;; Object cliff/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "cliff/"
  :tables
  (list
    (semanticdb-table "command.py"
      :major-mode 'python-mode
      :tags 
        '( ("abc" include nil nil [556 566])
            ("inspect" include nil nil [567 581])
            ("six" include nil nil [583 593])
            ("stevedore" include nil nil [594 625])
            ("cliff" include nil nil [627 654])
            ("" code nil nil [675 688])
            ("Command" type
               (:documentation "Base class for command plugins.

    When the command is instantiated, it loads extensions from a
    namespace based on the parent application namespace and the
    command name::

        app.namespace + '.' + cmd_name.replace(' ', '_')

    :param app: Application instance invoking the command.
    :paramtype app: cliff.app.App

    "
                :superclasses ("object")
                :members 
                  ( ("deprecated" variable nil (reparse-symbol indented_block_body) [1066 1084])
                    ("_description" variable nil (reparse-symbol indented_block_body) [1090 1107])
                    ("_epilog" variable nil (reparse-symbol indented_block_body) [1112 1126])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1190 1204])
                            ("self" variable nil (reparse-symbol indented_block_body) [1213 1237])
                            ("self" variable nil (reparse-symbol indented_block_body) [1246 1270])
                            ("self" code nil (reparse-symbol indented_block_body) [1279 1297]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1145 1149])
                            ("app" variable nil (reparse-symbol function_parameters) [1151 1154])
                            ("app_args" variable nil (reparse-symbol function_parameters) [1156 1164])
                            ("cmd_name" variable nil (reparse-symbol function_parameters) [1166 1174]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1132 1298])
                    ("_load_hooks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1319 1323]))                          )
                        (reparse-symbol indented_block_body) [1303 1968])
                    ("get_description" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1993 1997]))                          
                        :documentation "Return the command description.

        The default is to use the first line of the class' docstring
        as the description. Set the ``_description`` class attribute
        to a one-line description of a command to use a different
        value. This is useful for enabling translations, for example,
        with ``_description`` set to a string wrapped with a gettext
        translation marker.

        ")
                        (reparse-symbol indented_block_body) [1973 2928])
                    ("get_epilog" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2948 2952]))                          
                        :documentation "Return the command epilog.")
                        (reparse-symbol indented_block_body) [2933 3377])
                    ("get_parser" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3397 3401])
                            ("prog_name" variable nil (reparse-symbol function_parameters) [3403 3412]))                          
                        :documentation "Return an :class:`argparse.ArgumentParser`.
        ")
                        (reparse-symbol indented_block_body) [3382 3793])
                    ("take_action" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3838 3842])
                            ("parsed_args" variable nil (reparse-symbol function_parameters) [3844 3855]))                          
                        :documentation "Override to do something useful.

        The returned value will be returned by the program.
        ")
                        (reparse-symbol indented_block_body) [3798 3975])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3988 3992])
                            ("parsed_args" variable nil (reparse-symbol function_parameters) [3994 4005]))                          
                        :documentation "Invoked by the application when the command is run.

        Developers implementing commands should override
        :meth:`take_action`.

        Developers creating new command base classes (such as
        :class:`Lister` and :class:`ShowOne`) should override this
        method to wrap :meth:`take_action`.

        Return the value returned by :meth:`take_action` or 0.
        ")
                        (reparse-symbol indented_block_body) [3980 4592])
                    ("_run_before_hooks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4619 4623])
                            ("parsed_args" variable nil (reparse-symbol function_parameters) [4625 4636]))                          
                        :documentation "Calls before() method of the hooks.

        This method is intended to be called from the run() method before
        take_action() is called.

        This method should only be overriden by developers creating new
        command base classes and only if it is necessary to have different
        hook processing behavior.
        ")
                        (reparse-symbol indented_block_body) [4597 5062])
                    ("_run_after_hooks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5088 5092])
                            ("parsed_args" variable nil (reparse-symbol function_parameters) [5094 5105])
                            ("return_code" variable nil (reparse-symbol function_parameters) [5107 5118]))                          
                        :documentation "Calls after() method of the hooks.

        This method is intended to be called from the run() method after
        take_action() is called.

        This method should only be overriden by developers creating new
        command base classes and only if it is necessary to have different
        hook processing behavior.
        ")
                        (reparse-symbol indented_block_body) [5067 5554]))                  
                :type "class")
                nil [689 5554])
            ("_SmartHelpFormatter" type
               (:documentation "Smart help formatter to output raw help message if help contain \\n.

    Some command help messages maybe have multiple line content, the built-in
    argparse.HelpFormatter wrap and split the content according to width, and
    ignore \\n in the raw help message, it merge multiple line content in one
    line to output, that looks messy. SmartHelpFormatter keep the raw help
    message format if it contain \\n, and wrap long line like HelpFormatter
    behavior.
    "
                :superclasses ("_argparse.HelpFormatter")
                :members 
                  ( ("_split_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6111 6115])
                            ("text" variable nil (reparse-symbol function_parameters) [6117 6121])
                            ("width" variable nil (reparse-symbol function_parameters) [6123 6128]))                          )
                        (reparse-symbol indented_block_body) [6094 6400]))                  
                :type "class")
                nil [5556 6400]))          
      :file "command.py"
      :pointmax 6400
      :fsize 6399
      :lastmodtime '(22883 54602 0 0)
      :unmatched-syntax '((NAME 6139 . 6144) (IF 6165 . 6167) (ELSE 6181 . 6185)))
    (semanticdb-table "lister.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Application base class for providing a list of data as output.
\"\"\"" code nil nil [556 625])
            ("abc" include nil nil [626 636])
            ("six" include nil nil [637 647])
            ("display" include nil nil [656 670])
            ("" code nil nil [691 704])
            ("Lister" type
               (:documentation "Command base class for providing a list of data as output.
    "
                :superclasses ("display.DisplayCommandBase")
                :members 
                  ( ("formatter_namespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [864 868]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [826 909])
                    ("formatter_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [950 954]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [914 980])
                    ("take_action" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1025 1029])
                            ("parsed_args" variable nil (reparse-symbol function_parameters) [1031 1042]))                          
                        :documentation "Return a tuple containing the column names and an iterable
        containing the data to be listed.
        ")
                        (reparse-symbol indented_block_body) [985 1169])
                    ("produce_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1193 1197])
                            ("parsed_args" variable nil (reparse-symbol function_parameters) [1199 1210])
                            ("column_names" variable nil (reparse-symbol function_parameters) [1212 1224])
                            ("data" variable nil (reparse-symbol function_parameters) [1226 1230]))                          )
                        (reparse-symbol indented_block_body) [1174 1978]))                  
                :type "class")
                nil [705 1978]))          
      :file "lister.py"
      :pointmax 1978
      :fsize 1977
      :lastmodtime '(22883 54602 0 0)
      :unmatched-syntax '((FROM 649 . 653) (PERIOD 654 . 655) (FROM 649 . 653) (PERIOD 654 . 655) (FROM 649 . 653) (PERIOD 654 . 655) (FROM 649 . 653) (PERIOD 654 . 655)))
    (semanticdb-table "display.py"
      :file "display.py"
      :fsize 4565
      :lastmodtime '(22883 54602 0 0)))
  :file "!usr!lib!python2.7!site-packages!cliff!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
