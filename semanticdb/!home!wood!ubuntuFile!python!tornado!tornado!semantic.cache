;; Object tornado/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "tornado/"
  :tables
  (list
    (semanticdb-table "ioloop.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"An I/O event loop for non-blocking sockets.

Typical applications will use a single `IOLoop` object, in the
`IOLoop.instance` singleton.  The `IOLoop.start` method should usually
be called at the end of the ``main()`` function.  Atypical applications may
use more than one `IOLoop`, such as one `IOLoop` per thread, or per `unittest`
case.

In addition to I/O events, the `IOLoop` can also schedule time-based events.
`IOLoop.add_timeout` is a non-blocking alternative to `time.sleep`.
\"\"\"" code nil nil [598 1090])
            ("__future__" include nil nil [1092 1172])
            ("collections" include nil nil [1174 1192])
            ("datetime" include nil nil [1193 1208])
            ("errno" include nil nil [1209 1221])
            ("functools" include nil nil [1222 1238])
            ("heapq" include nil nil [1239 1251])
            ("itertools" include nil nil [1252 1268])
            ("logging" include nil nil [1269 1283])
            ("numbers" include nil nil [1284 1298])
            ("os" include nil nil [1299 1308])
            ("select" include nil nil [1309 1322])
            ("sys" include nil nil [1323 1333])
            ("threading" include nil nil [1334 1350])
            ("time" include nil nil [1351 1362])
            ("math" include nil nil [1380 1391])
            ("tornado.concurrent" include nil nil [1393 1450])
            ("tornado.log" include nil nil [1451 1491])
            ("tornado.platform.auto" include nil nil [1492 1547])
            ("tornado" include nil nil [1548 1581])
            ("tornado.util" include nil nil [1582 1668])
            ("try" code nil nil [1670 1731])
            ("if" code nil nil [1733 1794])
            ("_POLL_TIMEOUT" variable nil nil [1796 1818])
            ("TimeoutError" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1856 1860]))                  
                :type "class")
                nil [1821 1861])
            ("IOLoop" type
               (:documentation "A level-triggered I/O loop.

    We use ``epoll`` (Linux) or ``kqueue`` (BSD and Mac OS X) if they
    are available, or else we fall back on select(). If you are
    implementing a system that needs to handle thousands of
    simultaneous connections, you should use a system that supports
    either ``epoll`` or ``kqueue``.

    Example usage for a simple TCP server:

    .. testcode::

        import errno
        import functools
        import tornado.ioloop
        import socket

        def connection_ready(sock, fd, events):
            while True:
                try:
                    connection, address = sock.accept()
                except socket.error as e:
                    if e.args[0] not in (errno.EWOULDBLOCK, errno.EAGAIN):
                        raise
                    return
                connection.setblocking(0)
                handle_connection(connection, address)

        if __name__ == '__main__':
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            sock.setblocking(0)
            sock.bind((\"\", port))
            sock.listen(128)

            io_loop = tornado.ioloop.IOLoop.current()
            callback = functools.partial(connection_ready, sock)
            io_loop.add_handler(sock.fileno(), callback, io_loop.READ)
            io_loop.start()

    .. testoutput::
       :hide:

    By default, a newly-constructed `IOLoop` becomes the thread's current
    `IOLoop`, unless there already is a current `IOLoop`. This behavior
    can be controlled with the ``make_current`` argument to the `IOLoop`
    constructor: if ``make_current=True``, the new `IOLoop` will always
    try to become current and it raises an error if there is already a
    current instance. If ``make_current=False``, the new `IOLoop` will
    not try to become current.

    .. versionchanged:: 4.2
       Added the ``make_current`` keyword argument to the `IOLoop`
       constructor.
    "
                :superclasses ("Configurable")
                :members 
                  ( ("_EPOLLIN" variable nil (reparse-symbol indented_block_body) [3967 3983])
                    ("_EPOLLPRI" variable nil (reparse-symbol indented_block_body) [3988 4005])
                    ("_EPOLLOUT" variable nil (reparse-symbol indented_block_body) [4010 4027])
                    ("_EPOLLERR" variable nil (reparse-symbol indented_block_body) [4032 4049])
                    ("_EPOLLHUP" variable nil (reparse-symbol indented_block_body) [4054 4071])
                    ("_EPOLLRDHUP" variable nil (reparse-symbol indented_block_body) [4076 4096])
                    ("_EPOLLONESHOT" variable nil (reparse-symbol indented_block_body) [4101 4126])
                    ("_EPOLLET" variable nil (reparse-symbol indented_block_body) [4131 4151])
                    ("NONE" variable nil (reparse-symbol indented_block_body) [4206 4214])
                    ("READ" variable nil (reparse-symbol indented_block_body) [4219 4234])
                    ("WRITE" variable nil (reparse-symbol indented_block_body) [4239 4256])
                    ("ERROR" code nil (reparse-symbol indented_block_body) [4261 4290])
                    ("_instance_lock" variable nil (reparse-symbol indented_block_body) [4350 4383])
                    ("_current" variable nil (reparse-symbol indented_block_body) [4389 4417])
                    ("instance" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "Returns a global `IOLoop` instance.

        Most applications have a single, global `IOLoop` running on the
        main thread.  Use this method to get this instance from
        another thread.  In most other cases, it is better to use `current()`
        to get the current thread's `IOLoop`.
        ")
                        (reparse-symbol indented_block_body) [4423 5049])
                    ("initialized" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "Returns true if the singleton instance has been created.")
                        (reparse-symbol indented_block_body) [5054 5206])
                    ("install" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5223 5227]))                          
                        :documentation "Installs this `IOLoop` object as the singleton instance.

        This is normally not necessary as `instance()` will create
        an `IOLoop` on demand, but you may want to call `install` to use
        a custom subclass of `IOLoop`.

        When using an `IOLoop` subclass, `install` must be called prior
        to creating any objects that implicitly create their own
        `IOLoop` (e.g., :class:`tornado.httpclient.AsyncHTTPClient`).
        ")
                        (reparse-symbol indented_block_body) [5211 5770])
                    ("clear_instance" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "Clear the global `IOLoop` instance.

        .. versionadded:: 4.0
        ")
                        (reparse-symbol indented_block_body) [5775 5979])
                    ("current" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("instance" variable nil (reparse-symbol function_parameters) [6014 6022]))                          
                        :documentation "Returns the current thread's `IOLoop`.

        If an `IOLoop` is currently running or has been marked as
        current by `make_current`, returns that instance.  If there is
        no current `IOLoop`, returns `IOLoop.instance()` (i.e. the
        main thread's `IOLoop`, creating one if necessary) if ``instance``
        is true.

        In general you should use `IOLoop.current` as the default when
        constructing an asynchronous object, and use `IOLoop.instance`
        when you mean to communicate to the main thread from a different
        one.

        .. versionchanged:: 4.1
           Added ``instance`` argument to control the fallback to
           `IOLoop.instance()`.
        ")
                        (reparse-symbol indented_block_body) [5984 6911])
                    ("make_current" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6933 6937]))                          
                        :documentation "Makes this the `IOLoop` for the current thread.

        An `IOLoop` automatically becomes current for its thread
        when it is started, but it is sometimes useful to call
        `make_current` explicitly before starting the `IOLoop`,
        so that code run at startup time can find the right
        instance.

        .. versionchanged:: 4.1
           An `IOLoop` created while there is no current `IOLoop`
           will automatically become current.
        ")
                        (reparse-symbol indented_block_body) [6916 7467])
                    ("clear_current" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7472 7551])
                    ("configurable_base" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7595 7598]))                          )
                        (reparse-symbol indented_block_body) [7556 7623])
                    ("configurable_default" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7670 7673]))                          )
                        (reparse-symbol indented_block_body) [7628 8059])
                    ("initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8079 8083])
                            ("make_current" variable nil (reparse-symbol function_parameters) [8085 8097]))                          )
                        (reparse-symbol indented_block_body) [8064 8415])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8430 8434])
                            ("all_fds" variable nil (reparse-symbol function_parameters) [8436 8443]))                          
                        :documentation "Closes the `IOLoop`, freeing any resources used.

        If ``all_fds`` is true, all file descriptors registered on the
        IOLoop will be closed (not just the ones created by the
        `IOLoop` itself).

        Many applications will only use a single `IOLoop` that runs for the
        entire lifetime of the process.  In that case closing the `IOLoop`
        is not necessary since everything will be cleaned up when the
        process exits.  `IOLoop.close` is provided mainly for scenarios
        such as unit tests, which create and destroy a large number of
        ``IOLoops``.

        An `IOLoop` must be completely stopped before it can be closed.  This
        means that `IOLoop.stop()` must be called *and* `IOLoop.start()` must
        be allowed to return before attempting to call `IOLoop.close()`.
        Therefore the call to `close` will usually appear just after
        the call to `start` rather than near the call to `stop`.

        .. versionchanged:: 3.1
           If the `IOLoop` implementation supports non-integer objects
           for \"file descriptors\", those objects will have their
           ``close`` method when ``all_fds`` is true.
        ")
                        (reparse-symbol indented_block_body) [8420 9695])
                    ("add_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9716 9720])
                            ("fd" variable nil (reparse-symbol function_parameters) [9722 9724])
                            ("handler" variable nil (reparse-symbol function_parameters) [9726 9733])
                            ("events" variable nil (reparse-symbol function_parameters) [9735 9741]))                          
                        :documentation "Registers the given handler to receive the given events for ``fd``.

        The ``fd`` argument may either be an integer file descriptor or
        a file-like object with a ``fileno()`` method (and optionally a
        ``close()`` method, which may be called when the `IOLoop` is shut
        down).

        The ``events`` argument is a bitwise or of the constants
        ``IOLoop.READ``, ``IOLoop.WRITE``, and ``IOLoop.ERROR``.

        When an event occurs, ``handler(fd, events)`` will be run.

        .. versionchanged:: 4.0
           Added the ability to pass file-like objects in addition to
           raw file descriptors.
        ")
                        (reparse-symbol indented_block_body) [9700 10440])
                    ("update_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10464 10468])
                            ("fd" variable nil (reparse-symbol function_parameters) [10470 10472])
                            ("events" variable nil (reparse-symbol function_parameters) [10474 10480]))                          
                        :documentation "Changes the events we listen for ``fd``.

        .. versionchanged:: 4.0
           Added the ability to pass file-like objects in addition to
           raw file descriptors.
        ")
                        (reparse-symbol indented_block_body) [10445 10719])
                    ("remove_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10743 10747])
                            ("fd" variable nil (reparse-symbol function_parameters) [10749 10751]))                          
                        :documentation "Stop listening for events on ``fd``.

        .. versionchanged:: 4.0
           Added the ability to pass file-like objects in addition to
           raw file descriptors.
        ")
                        (reparse-symbol indented_block_body) [10724 10986])
                    ("set_blocking_signal_threshold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11025 11029])
                            ("seconds" variable nil (reparse-symbol function_parameters) [11031 11038])
                            ("action" variable nil (reparse-symbol function_parameters) [11040 11046]))                          
                        :documentation "Sends a signal if the `IOLoop` is blocked for more than
        ``s`` seconds.

        Pass ``seconds=None`` to disable.  Requires Python 2.6 on a unixy
        platform.

        The action parameter is a Python signal handler.  Read the
        documentation for the `signal` module for more information.
        If ``action`` is None, the process will be killed if it is
        blocked for too long.
        ")
                        (reparse-symbol indented_block_body) [10991 11513])
                    ("set_blocking_log_threshold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11549 11553])
                            ("seconds" variable nil (reparse-symbol function_parameters) [11555 11562]))                          
                        :documentation "Logs a stack trace if the `IOLoop` is blocked for more than
        ``s`` seconds.

        Equivalent to ``set_blocking_signal_threshold(seconds,
        self.log_stack)``
        ")
                        (reparse-symbol indented_block_body) [11518 11829])
                    ("log_stack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11848 11852])
                            ("signal" variable nil (reparse-symbol function_parameters) [11854 11860])
                            ("frame" variable nil (reparse-symbol function_parameters) [11862 11867]))                          
                        :documentation "Signal handler to log the stack trace of the current thread.

        For use with `set_blocking_signal_threshold`.
        ")
                        (reparse-symbol indented_block_body) [11834 12194])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12209 12213]))                          
                        :documentation "Starts the I/O loop.

        The loop will run until one of the callbacks calls `stop()`, which
        will make the loop stop after the current event iteration completes.
        ")
                        (reparse-symbol indented_block_body) [12199 12449])
                    ("_setup_logging" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12473 12477]))                          
                        :documentation "The IOLoop catches and logs exceptions, so it's
        important that log output be visible.  However, python's
        default behavior for non-root loggers (prior to python
        3.2) is to print an unhelpful \"no handlers could be
        found\" message rather than the actual log entry, so we
        must explicitly configure logging if we've made it this
        far without anything.

        This method should be called from start() in subclasses.
        ")
                        (reparse-symbol indented_block_body) [12454 13178])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13192 13196]))                          
                        :documentation "Stop the I/O loop.

        If the event loop is not currently running, the next call to `start()`
        will return immediately.

        To use asynchronous methods from otherwise-synchronous code (such as
        unit tests), you can start and stop the event loop like this::

          ioloop = IOLoop()
          async_method(ioloop=ioloop, callback=ioloop.stop)
          ioloop.start()

        ``ioloop.start()`` will return after ``async_method`` has run
        its callback, whether that callback was invoked before or
        after ``ioloop.start``.

        Note that even after `stop` has been called, the `IOLoop` is not
        completely stopped until `IOLoop.start` has also returned.
        Some work that was scheduled before the call to `stop` may still
        be run before the `IOLoop` shuts down.
        ")
                        (reparse-symbol indented_block_body) [13183 14083])
                    ("run_sync" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14101 14105])
                            ("func" variable nil (reparse-symbol function_parameters) [14107 14111])
                            ("timeout" variable nil (reparse-symbol function_parameters) [14113 14120]))                          
                        :documentation "Starts the `IOLoop`, runs the given function, and stops the loop.

        The function must return either a yieldable object or
        ``None``. If the function returns a yieldable object, the
        `IOLoop` will run until the yieldable is resolved (and
        `run_sync()` will return the yieldable's result). If it raises
        an exception, the `IOLoop` will stop and the exception will be
        re-raised to the caller.

        The keyword-only argument ``timeout`` may be used to set
        a maximum duration for the function.  If the timeout expires,
        a `TimeoutError` is raised.

        This method is useful in conjunction with `tornado.gen.coroutine`
        to allow asynchronous calls in a ``main()`` function::

            @gen.coroutine
            def main():
                # do stuff...

            if __name__ == '__main__':
                IOLoop.current().run_sync(main)

        .. versionchanged:: 4.3
           Returning a non-``None``, non-yieldable value is now an error.
        ")
                        (reparse-symbol indented_block_body) [14088 16267])
                    ("time" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16281 16285]))                          
                        :documentation "Returns the current time according to the `IOLoop`'s clock.

        The return value is a floating-point number relative to an
        unspecified time in the past.

        By default, the `IOLoop`'s time function is `time.time`.  However,
        it may be configured to use e.g. `time.monotonic` instead.
        Calls to `add_timeout` that pass a number instead of a
        `datetime.timedelta` should use this function to compute the
        appropriate time, so they can work no matter what time function
        is chosen.
        ")
                        (reparse-symbol indented_block_body) [16272 16870])
                    ("add_timeout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16891 16895])
                            ("deadline" variable nil (reparse-symbol function_parameters) [16897 16905])
                            ("callback" variable nil (reparse-symbol function_parameters) [16907 16915])
                            ("args" variable nil (reparse-symbol function_parameters) [16917 16922])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16924 16932]))                          
                        :documentation "Runs the ``callback`` at the time ``deadline`` from the I/O loop.

        Returns an opaque handle that may be passed to
        `remove_timeout` to cancel.

        ``deadline`` may be a number denoting a time (on the same
        scale as `IOLoop.time`, normally `time.time`), or a
        `datetime.timedelta` object for a deadline relative to the
        current time.  Since Tornado 4.0, `call_later` is a more
        convenient alternative for the relative case since it does not
        require a timedelta object.

        Note that it is not safe to call `add_timeout` from other threads.
        Instead, you must use `add_callback` to transfer control to the
        `IOLoop`'s thread, and then call `add_timeout` from there.

        Subclasses of IOLoop must implement either `add_timeout` or
        `call_at`; the default implementations of each will call
        the other.  `call_at` is usually easier to implement, but
        subclasses that wish to maintain compatibility with Tornado
        versions prior to 4.0 must use `add_timeout` instead.

        .. versionchanged:: 4.0
           Now passes through ``*args`` and ``**kwargs`` to the callback.
        ")
                        (reparse-symbol indented_block_body) [16875 18522])
                    ("call_later" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18542 18546])
                            ("delay" variable nil (reparse-symbol function_parameters) [18548 18553])
                            ("callback" variable nil (reparse-symbol function_parameters) [18555 18563])
                            ("args" variable nil (reparse-symbol function_parameters) [18565 18570])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18572 18580]))                          
                        :documentation "Runs the ``callback`` after ``delay`` seconds have passed.

        Returns an opaque handle that may be passed to `remove_timeout`
        to cancel.  Note that unlike the `asyncio` method of the same
        name, the returned object does not have a ``cancel()`` method.

        See `add_timeout` for comments on thread-safety and subclassing.

        .. versionadded:: 4.0
        ")
                        (reparse-symbol indented_block_body) [18527 19060])
                    ("call_at" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19077 19081])
                            ("when" variable nil (reparse-symbol function_parameters) [19083 19087])
                            ("callback" variable nil (reparse-symbol function_parameters) [19089 19097])
                            ("args" variable nil (reparse-symbol function_parameters) [19099 19104])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19106 19114]))                          
                        :documentation "Runs the ``callback`` at the absolute time designated by ``when``.

        ``when`` must be a number using the same reference point as
        `IOLoop.time`.

        Returns an opaque handle that may be passed to `remove_timeout`
        to cancel.  Note that unlike the `asyncio` method of the same
        name, the returned object does not have a ``cancel()`` method.

        See `add_timeout` for comments on thread-safety and subclassing.

        .. versionadded:: 4.0
        ")
                        (reparse-symbol indented_block_body) [19065 19683])
                    ("remove_timeout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19707 19711])
                            ("timeout" variable nil (reparse-symbol function_parameters) [19713 19720]))                          
                        :documentation "Cancels a pending timeout.

        The argument is a handle as returned by `add_timeout`.  It is
        safe to call `remove_timeout` even if the callback has already
        been run.
        ")
                        (reparse-symbol indented_block_body) [19688 19969])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19991 19995])
                            ("callback" variable nil (reparse-symbol function_parameters) [19997 20005])
                            ("args" variable nil (reparse-symbol function_parameters) [20007 20012])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20014 20022]))                          
                        :documentation "Calls the given callback on the next I/O loop iteration.

        It is safe to call this method from any thread at any time,
        except from a signal handler.  Note that this is the **only**
        method in `IOLoop` that makes this thread-safety guarantee; all
        other interaction with the `IOLoop` must be done from that
        `IOLoop`'s thread.  `add_callback()` may be used to transfer
        control from other threads to the `IOLoop`'s thread.

        To add a callback from a signal handler, see
        `add_callback_from_signal`.
        ")
                        (reparse-symbol indented_block_body) [19974 20639])
                    ("add_callback_from_signal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20673 20677])
                            ("callback" variable nil (reparse-symbol function_parameters) [20679 20687])
                            ("args" variable nil (reparse-symbol function_parameters) [20689 20694])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20696 20704]))                          
                        :documentation "Calls the given callback on the next I/O loop iteration.

        Safe for use from a Python signal handler; should not be used
        otherwise.

        Callbacks added with this method will be run without any
        `.stack_context`, to avoid picking up the context of the function
        that was interrupted by the signal.
        ")
                        (reparse-symbol indented_block_body) [20644 21097])
                    ("spawn_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21121 21125])
                            ("callback" variable nil (reparse-symbol function_parameters) [21127 21135])
                            ("args" variable nil (reparse-symbol function_parameters) [21137 21142])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [21144 21152]))                          
                        :documentation "Calls the given callback on the next IOLoop iteration.

        Unlike all other callback-related methods on IOLoop,
        ``spawn_callback`` does not associate the callback with its caller's
        ``stack_context``, so it is suitable for fire-and-forget callbacks
        that should not interfere with the caller.

        .. versionadded:: 4.0
        ")
                        (reparse-symbol indented_block_body) [21102 21628])
                    ("add_future" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21648 21652])
                            ("future" variable nil (reparse-symbol function_parameters) [21654 21660])
                            ("callback" variable nil (reparse-symbol function_parameters) [21662 21670]))                          
                        :documentation "Schedules a callback on the ``IOLoop`` when the given
        `.Future` is finished.

        The callback is invoked with one argument, the
        `.Future`.
        ")
                        (reparse-symbol indented_block_body) [21633 22035])
                    ("_run_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22058 22062])
                            ("callback" variable nil (reparse-symbol function_parameters) [22064 22072]))                          
                        :documentation "Runs a callback with error handling.

        For use in subclasses.
        ")
                        (reparse-symbol indented_block_body) [22040 23045])
                    ("_discard_future_result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23077 23081])
                            ("future" variable nil (reparse-symbol function_parameters) [23083 23089]))                          
                        :documentation "Avoid unhandled-exception warnings from spawned coroutines.")
                        (reparse-symbol indented_block_body) [23050 23190])
                    ("handle_callback_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23225 23229])
                            ("callback" variable nil (reparse-symbol function_parameters) [23231 23239]))                          
                        :documentation "This method is called whenever a callback run by the `IOLoop`
        throws an exception.

        By default simply logs the exception as an error.  Subclasses
        may override this method to customize reporting of exceptions.

        The exception itself is not passed explicitly, but is available
        in `sys.exc_info`.
        ")
                        (reparse-symbol indented_block_body) [23195 23673])
                    ("split_fd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23691 23695])
                            ("fd" variable nil (reparse-symbol function_parameters) [23697 23699]))                          
                        :documentation "Returns an (fd, obj) pair from an ``fd`` parameter.

        We accept both raw file descriptors and file-like objects as
        input to `add_handler` and related methods.  When a file-like
        object is passed, we must retain the object itself so we can
        close it correctly when the `IOLoop` shuts down, but the
        poller interfaces favor file descriptors (they will accept
        file-like objects and call ``fileno()`` for you, but they
        always return the descriptor itself).

        This method is provided for use by `IOLoop` subclasses and should
        not generally be used by application code.

        .. versionadded:: 4.0
        ")
                        (reparse-symbol indented_block_body) [23678 24492])
                    ("close_fd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24510 24514])
                            ("fd" variable nil (reparse-symbol function_parameters) [24516 24518]))                          
                        :documentation "Utility method to close an ``fd``.

        If ``fd`` is a file-like object, we close it directly; otherwise
        we use `os.close`.

        This method is provided for use by `IOLoop` subclasses (in
        implementations of ``IOLoop.close(all_fds=True)`` and should
        not generally be used by application code.

        .. versionadded:: 4.0
        ")
                        (reparse-symbol indented_block_body) [24497 25061]))                  
                :type "class")
                nil [1863 25061])
            ("PollIOLoop" type
               (:documentation "Base class for IOLoops built around a select-like function.

    For concrete implementations, see `tornado.platform.epoll.EPollIOLoop`
    (Linux), `tornado.platform.kqueue.KQueueIOLoop` (BSD and Mac), or
    `tornado.platform.select.SelectIOLoop` (all platforms).
    "
                :superclasses ("IOLoop")
                :members 
                  ( ("initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25389 25393])
                            ("impl" variable nil (reparse-symbol function_parameters) [25395 25399])
                            ("time_func" variable nil (reparse-symbol function_parameters) [25401 25410])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25417 25425]))                          )
                        (reparse-symbol indented_block_body) [25374 26318])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26333 26337])
                            ("all_fds" variable nil (reparse-symbol function_parameters) [26339 26346]))                          )
                        (reparse-symbol indented_block_body) [26323 26660])
                    ("add_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26681 26685])
                            ("fd" variable nil (reparse-symbol function_parameters) [26687 26689])
                            ("handler" variable nil (reparse-symbol function_parameters) [26691 26698])
                            ("events" variable nil (reparse-symbol function_parameters) [26700 26706]))                          )
                        (reparse-symbol indented_block_body) [26665 26862])
                    ("update_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26886 26890])
                            ("fd" variable nil (reparse-symbol function_parameters) [26892 26894])
                            ("events" variable nil (reparse-symbol function_parameters) [26896 26902]))                          )
                        (reparse-symbol indented_block_body) [26867 26992])
                    ("remove_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27016 27020])
                            ("fd" variable nil (reparse-symbol function_parameters) [27022 27024]))                          )
                        (reparse-symbol indented_block_body) [26997 27286])
                    ("set_blocking_signal_threshold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27325 27329])
                            ("seconds" variable nil (reparse-symbol function_parameters) [27331 27338])
                            ("action" variable nil (reparse-symbol function_parameters) [27340 27346]))                          )
                        (reparse-symbol indented_block_body) [27291 27752])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27767 27771]))                          )
                        (reparse-symbol indented_block_body) [27757 35515])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35529 35533]))                          )
                        (reparse-symbol indented_block_body) [35520 35622])
                    ("time" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35636 35640]))                          )
                        (reparse-symbol indented_block_body) [35627 35675])
                    ("call_at" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35692 35696])
                            ("deadline" variable nil (reparse-symbol function_parameters) [35698 35706])
                            ("callback" variable nil (reparse-symbol function_parameters) [35708 35716])
                            ("args" variable nil (reparse-symbol function_parameters) [35718 35723])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35725 35733]))                          )
                        (reparse-symbol indented_block_body) [35680 35953])
                    ("remove_timeout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35977 35981])
                            ("timeout" variable nil (reparse-symbol function_parameters) [35983 35990]))                          )
                        (reparse-symbol indented_block_body) [35958 36379])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36401 36405])
                            ("callback" variable nil (reparse-symbol function_parameters) [36407 36415])
                            ("args" variable nil (reparse-symbol function_parameters) [36417 36422])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36424 36432]))                          )
                        (reparse-symbol indented_block_body) [36384 37071])
                    ("add_callback_from_signal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37105 37109])
                            ("callback" variable nil (reparse-symbol function_parameters) [37111 37119])
                            ("args" variable nil (reparse-symbol function_parameters) [37121 37126])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [37128 37136]))                          )
                        (reparse-symbol indented_block_body) [37076 37238]))                  
                :type "class")
                nil [25063 37238])
            ("_Timeout" type
               (:documentation "An IOLoop timeout, a UNIX timestamp and a callback"
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [37400 37449])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [37512 37621])
                            ("self" variable nil (reparse-symbol indented_block_body) [37629 37653])
                            ("self" variable nil (reparse-symbol indented_block_body) [37662 37686])
                            ("self" variable nil (reparse-symbol indented_block_body) [37695 37754]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37468 37472])
                            ("deadline" variable nil (reparse-symbol function_parameters) [37474 37482])
                            ("callback" variable nil (reparse-symbol function_parameters) [37484 37492])
                            ("io_loop" variable nil (reparse-symbol function_parameters) [37494 37501]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37455 37755])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38013 38017])
                            ("other" variable nil (reparse-symbol function_parameters) [38019 38024]))                          )
                        (reparse-symbol indented_block_body) [38002 38075])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38091 38095])
                            ("other" variable nil (reparse-symbol function_parameters) [38097 38102]))                          )
                        (reparse-symbol indented_block_body) [38080 38154]))                  
                :type "class")
                nil [37240 38154])
            ("PeriodicCallback" type
               (:documentation "Schedules the given callback to be called periodically.

    The callback is called every ``callback_time`` milliseconds.
    Note that the timeout is given in milliseconds, while most other
    time-related functions in Tornado use seconds.

    If the callback runs for longer than ``callback_time`` milliseconds,
    subsequent invocations will be skipped to get back on schedule.

    `start` must be called after the `PeriodicCallback` is created.

    .. versionchanged:: 4.1
       The ``io_loop`` argument is deprecated.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [38803 38827])
                            ("if" code nil (reparse-symbol indented_block_body) [38836 38944])
                            ("self" variable nil (reparse-symbol indented_block_body) [38952 38986])
                            ("self" code nil (reparse-symbol indented_block_body) [38995 39037])
                            ("self" variable nil (reparse-symbol indented_block_body) [39046 39067])
                            ("self" variable nil (reparse-symbol indented_block_body) [39076 39096]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38749 38753])
                            ("callback" variable nil (reparse-symbol function_parameters) [38755 38763])
                            ("callback_time" variable nil (reparse-symbol function_parameters) [38765 38778])
                            ("io_loop" variable nil (reparse-symbol function_parameters) [38780 38787]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38736 39097])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39112 39116]))                          
                        :documentation "Starts the timer.")
                        (reparse-symbol indented_block_body) [39102 39259])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39273 39277]))                          
                        :documentation "Stops the timer.")
                        (reparse-symbol indented_block_body) [39264 39467])
                    ("is_running" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39487 39491]))                          
                        :documentation "Return True if this `.PeriodicCallback` has been started.

        .. versionadded:: 4.1
        ")
                        (reparse-symbol indented_block_body) [39472 39635])
                    ("_run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39649 39653]))                          )
                        (reparse-symbol indented_block_body) [39640 39896])
                    ("_schedule_next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39920 39924]))                          )
                        (reparse-symbol indented_block_body) [39901 40383]))                  
                :type "class")
                nil [38156 40383]))          
      :file "ioloop.py"
      :pointmax 40383
      :fsize 40382
      :lastmodtime '(22701 40133 329 439000)
      :unmatched-syntax nil)
    (semanticdb-table "concurrent.py"
      :file "concurrent.py"
      :fsize 18778
      :lastmodtime '(22701 40133 329 439000))
    (semanticdb-table "log.py"
      :file "log.py"
      :fsize 11033
      :lastmodtime '(22701 40133 4329 439000))
    (semanticdb-table "util.py"
      :file "util.py"
      :fsize 15879
      :lastmodtime '(22701 40133 12329 439000)))
  :file "!home!wood!ubuntuFile!python!tornado!tornado!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
