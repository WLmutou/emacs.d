;; Object marshmallow/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "marshmallow/"
  :tables
  (list
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags 
        '( ("__future__" include nil nil [25 63])
            ("" code nil nil [96 167])
            ("fields" include nil nil [175 188])
            ("" code nil nil [224 301])
            ("marshmallow.utils" include nil nil [302 347])
            ("marshmallow.exceptions" include nil nil [348 398])
            ("__version__" variable nil nil [400 422])
            ("__author__" variable nil nil [423 450])
            ("__all__" variable nil nil [452 714]))          
      :file "__init__.py"
      :pointmax 715
      :fsize 714
      :lastmodtime '(23014 47340 905220 0)
      :unmatched-syntax '((FROM 168 . 172) (PERIOD 173 . 174)))
    (semanticdb-table "fields.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Field classes for various types of data.\"\"\"" code nil nil [25 71])
            ("__future__" include nil nil [73 129])
            ("collections" include nil nil [131 149])
            ("datetime" include nil nil [150 171])
            ("uuid" include nil nil [172 183])
            ("warnings" include nil nil [184 199])
            ("decimal" include nil nil [200 214])
            ("operator" include nil nil [215 246])
            ("marshmallow" include nil nil [248 303])
            ("marshmallow.base" include nil nil [304 352])
            ("marshmallow.utils" include nil nil [353 402])
            ("marshmallow.compat" include nil nil [403 455])
            ("marshmallow.exceptions" include nil nil [456 506])
            ("marshmallow.validate" include nil nil [507 549])
            ("__all__" variable nil nil [551 940])
            ("MISSING_ERROR_MESSAGE" variable nil nil [942 1097])
            ("_RECURSIVE_NESTED" variable nil nil [1098 1124])
            ("Field" type
               (:documentation "Basic field from which other fields should extend. It applies no
    formatting by default, and should only be used in cases where
    data does not need to be formatted before being serialized or deserialized.
    On error, the name of the field will be returned.

    :param default: If set, this value will be used during serialization if the input value
        is missing. If not set, the field will be excluded from the serialized output if the
        input value is missing. May be a value or a callable.
    :param str attribute: The name of the attribute to get the value from. If
        `None`, assumes the attribute has the same name as the field.
    :param str load_from: Additional key to look for when deserializing. Will only
        be checked if the field's name is not found on the input dictionary. If checked,
        it will return this parameter on error.
    :param str dump_to: Field name to use as a key when serializing.
    :param callable validate: Validator or collection of validators that are called
        during deserialization. Validator takes a field's input value as
        its only parameter and returns a boolean.
        If it returns `False`, an :exc:`ValidationError` is raised.
    :param required: Raise a :exc:`ValidationError` if the field value
        is not supplied during deserialization.
    :param allow_none: Set this to `True` if `None` should be considered a valid value during
        validation/deserialization. If ``missing=None`` and ``allow_none`` is unset,
        will default to ``True``. Otherwise, the default is ``False``.
    :param bool load_only: If `True` skip this field during serialization, otherwise
        its value will be present in the serialized data.
    :param bool dump_only: If `True` skip this field during deserialization, otherwise
        its value will be present in the deserialized object. In the context of an
        HTTP API, this effectively marks the field as \"read-only\".
    :param missing: Default deserialization value for the field if the field is not
        found in the input data. May be a value or a callable.
    :param dict error_messages: Overrides for `Field.default_error_messages`.
    :param metadata: Extra arguments to be stored as metadata.

    .. versionchanged:: 2.0.0
        Removed `error` parameter. Use ``error_messages`` instead.

    .. versionchanged:: 2.0.0
        Added `allow_none` parameter, which makes validation/deserialization of `None`
        consistent across fields.

    .. versionchanged:: 2.0.0
        Added `load_only` and `dump_only` parameters, which allow field skipping
        during the (de)serialization process.

    .. versionchanged:: 2.0.0
        Added `missing` parameter, which indicates the value for a field if the field
        is not found during deserialization.

    .. versionchanged:: 2.0.0
        ``default`` value is only used if explicitly set. Otherwise, missing values
        inputs are excluded from serialized output.
    "
                :superclasses ("FieldABC")
                :members 
                  ( ("_CHECK_ATTRIBUTE" variable nil (reparse-symbol indented_block_body) [4349 4372])
                    ("_creation_index" variable nil (reparse-symbol indented_block_body) [4377 4396])
                    ("default_error_messages" variable nil (reparse-symbol indented_block_body) [4627 4864])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5141 5163])
                            ("self" variable nil (reparse-symbol indented_block_body) [5172 5198])
                            ("self" variable nil (reparse-symbol indented_block_body) [5207 5233])
                            ("self" variable nil (reparse-symbol indented_block_body) [5279 5301])
                            ("self" variable nil (reparse-symbol indented_block_body) [5345 5369])
                            ("if" code nil (reparse-symbol indented_block_body) [5378 5874])
                            ("self" variable nil (reparse-symbol indented_block_body) [5883 5907])
                            ("if" code nil (reparse-symbol indented_block_body) [5986 6193])
                            ("self" variable nil (reparse-symbol indented_block_body) [6201 6227])
                            ("self" variable nil (reparse-symbol indented_block_body) [6236 6262])
                            ("self" variable nil (reparse-symbol indented_block_body) [6271 6293])
                            ("self" variable nil (reparse-symbol indented_block_body) [6302 6326])
                            ("self" variable nil (reparse-symbol indented_block_body) [6335 6379])
                            ("Field" variable nil (reparse-symbol indented_block_body) [6388 6414])
                            ("messages" variable nil (reparse-symbol indented_block_body) [6493 6506])
                            ("for" code nil (reparse-symbol indented_block_body) [6515 6632])
                            ("messages" code nil (reparse-symbol indented_block_body) [6640 6677])
                            ("self" variable nil (reparse-symbol indented_block_body) [6686 6716]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4883 4887])
                            ("default" variable nil (reparse-symbol function_parameters) [4889 4896])
                            ("attribute" variable nil (reparse-symbol function_parameters) [4907 4916])
                            ("load_from" variable nil (reparse-symbol function_parameters) [4923 4932])
                            ("dump_to" variable nil (reparse-symbol function_parameters) [4939 4946])
                            ("error" variable nil (reparse-symbol function_parameters) [4970 4975])
                            ("validate" variable nil (reparse-symbol function_parameters) [4982 4990])
                            ("required" variable nil (reparse-symbol function_parameters) [4997 5005])
                            ("allow_none" variable nil (reparse-symbol function_parameters) [5013 5023])
                            ("load_only" variable nil (reparse-symbol function_parameters) [5030 5039])
                            ("dump_only" variable nil (reparse-symbol function_parameters) [5064 5073])
                            ("missing" variable nil (reparse-symbol function_parameters) [5081 5088])
                            ("error_messages" variable nil (reparse-symbol function_parameters) [5099 5113])
                            ("metadata" variable nil (reparse-symbol function_parameters) [5120 5130]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4870 6717])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6735 6739]))                          )
                        (reparse-symbol indented_block_body) [6722 7203])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7222 7226])
                            ("attr" variable nil (reparse-symbol function_parameters) [7228 7232])
                            ("obj" variable nil (reparse-symbol function_parameters) [7234 7237])
                            ("accessor" variable nil (reparse-symbol function_parameters) [7239 7247])
                            ("default" variable nil (reparse-symbol function_parameters) [7254 7261]))                          
                        :documentation "Return the value for a given key from an object.")
                        (reparse-symbol indented_block_body) [7208 7698])
                    ("_validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7717 7721])
                            ("value" variable nil (reparse-symbol function_parameters) [7723 7728]))                          
                        :documentation "Perform validation on ``value``. Raise a :exc:`ValidationError` if validation
        does not succeed.
        ")
                        (reparse-symbol indented_block_body) [7703 8441])
                    ("fail" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8495 8499])
                            ("key" variable nil (reparse-symbol function_parameters) [8501 8504])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8506 8514]))                          
                        :documentation "A helper method that simply raises a `ValidationError`.
        ")
                        (reparse-symbol indented_block_body) [8486 8957])
                    ("_validate_missing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8984 8988])
                            ("value" variable nil (reparse-symbol function_parameters) [8990 8995]))                          
                        :documentation "Validate missing values. Raise a :exc:`ValidationError` if
        `value` should be considered missing.
        ")
                        (reparse-symbol indented_block_body) [8962 9390])
                    ("serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9409 9413])
                            ("attr" variable nil (reparse-symbol function_parameters) [9415 9419])
                            ("obj" variable nil (reparse-symbol function_parameters) [9421 9424])
                            ("accessor" variable nil (reparse-symbol function_parameters) [9426 9434]))                          
                        :documentation "Pulls the value for the given key from the object, applies the
        field's formatting and returns the result.

        :param str attr: The attibute or key to get from the object.
        :param str obj: The object to pull the key from.
        :param callable accessor: Function used to pull values from ``obj``.
        :raise ValidationError: In case of formatting problem
        ")
                        (reparse-symbol indented_block_body) [9395 10274])
                    ("deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10295 10299])
                            ("value" variable nil (reparse-symbol function_parameters) [10301 10306])
                            ("attr" variable nil (reparse-symbol function_parameters) [10308 10312])
                            ("data" variable nil (reparse-symbol function_parameters) [10319 10323]))                          
                        :documentation "Deserialize ``value``.

        :raise ValidationError: If an invalid value is passed or if a required value
            is missing.
        ")
                        (reparse-symbol indented_block_body) [10279 10821])
                    ("_add_to_schema" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10894 10898])
                            ("field_name" variable nil (reparse-symbol function_parameters) [10900 10910])
                            ("schema" variable nil (reparse-symbol function_parameters) [10912 10918]))                          
                        :documentation "Update field with values from its parent schema. Called by
            :meth:`__set_field_attrs <marshmallow.Schema.__set_field_attrs>`.

        :param str field_name: Field name set in schema.
        :param Schema schema: Parent schema.
        ")
                        (reparse-symbol indented_block_body) [10875 11272])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11292 11296])
                            ("value" variable nil (reparse-symbol function_parameters) [11298 11303])
                            ("attr" variable nil (reparse-symbol function_parameters) [11305 11309])
                            ("obj" variable nil (reparse-symbol function_parameters) [11311 11314]))                          
                        :documentation "Serializes ``value`` to a basic Python datatype. Noop by default.
        Concrete :class:`Field` classes should implement this method.

        Example: ::

            class TitleCase(Field):
                def _serialize(self, value, attr, obj):
                    if not value:
                        return ''
                    return unicode(value).title()

        :param value: The value to be serialized.
        :param str attr: The attribute or key on the object to be serialized.
        :param object obj: The object the value was pulled from.
        :raise ValidationError: In case of formatting or validation failure.
        :return: The serialized value
        ")
                        (reparse-symbol indented_block_body) [11277 12038])
                    ("_deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12060 12064])
                            ("value" variable nil (reparse-symbol function_parameters) [12066 12071])
                            ("attr" variable nil (reparse-symbol function_parameters) [12073 12077])
                            ("data" variable nil (reparse-symbol function_parameters) [12079 12083]))                          
                        :documentation "Deserialize value. Concrete :class:`Field` classes should implement this method.

        :param value: The value to be deserialized.
        :param str attr: The attribute/key in `data` to be deserialized.
        :param dict data: The raw input data passed to the `Schema.load`.
        :raise ValidationError: In case of formatting or validation failure.
        :return: The deserialized value.

        .. versionchanged:: 2.0.0
            Added ``attr`` and ``data`` parameters.
        ")
                        (reparse-symbol indented_block_body) [12043 12616])
                    ("context" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12665 12669]))                          
                        :documentation "The context dictionary for the parent :class:`Schema`.")
                        (reparse-symbol indented_block_body) [12639 12776])
                    ("root" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12804 12808]))                          
                        :documentation "Reference to the `Schema` that this field belongs to even if it is buried in a `List`.
        Return `None` for unbound fields.
        ")
                        (reparse-symbol indented_block_body) [12781 13123]))                  
                :type "class")
                nil [1127 13123])
            ("Raw" type
               (:documentation "Field that applies no formatting or validation."
                :superclasses ("Field")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [13204 13208]))                  
                :type "class")
                nil [13124 13209])
            ("Nested" type
               (:documentation "Allows you to nest a :class:`Schema <marshmallow.Schema>`
    inside a field.

    Examples: ::

        user = fields.Nested(UserSchema)
        user2 = fields.Nested('UserSchema')  # Equivalent to above
        collaborators = fields.Nested(UserSchema, many=True, only='id')
        parent = fields.Nested('self')

    When passing a `Schema <marshmallow.Schema>` instance as the first argument,
    the instance's ``exclude``, ``only``, and ``many`` attributes will be respected.

    Therefore, when passing the ``exclude``, ``only``, or ``many`` arguments to `fields.Nested`,
    you should pass a `Schema <marshmallow.Schema>` class (not an instance) as the first argument.

    ::

        # Yes
        author = fields.Nested(UserSchema, only=('id', 'name'))

        # No
        author = fields.Nested(UserSchema(), only=('id', 'name'))

    :param Schema nested: The Schema class or class name (string)
        to nest, or ``\"self\"`` to nest the :class:`Schema` within itself.
    :param default: Default value to if attribute is missing or None
    :param tuple exclude: A list or tuple of fields to exclude.
    :param required: Raise an :exc:`ValidationError` during deserialization
        if the field, *and* any required field values specified
        in the `nested` schema, are not found in the data. If not a `bool`
        (e.g. a `str`), the provided value will be used as the message of the
        :exc:`ValidationError` instead of the default message.
    :param only: A tuple or string of the field(s) to marshal. If `None`, all fields
        will be marshalled. If a field name (string) is given, only a single
        value will be returned as output instead of a dictionary.
        This parameter takes precedence over ``exclude``.
    :param bool many: Whether the field is a collection of objects.
    :param kwargs: The same keyword arguments that :class:`Field` receives.
    "
                :superclasses ("Field")
                :members 
                  ( ("default_error_messages" variable nil (reparse-symbol indented_block_body) [15158 15223])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15321 15341])
                            ("self" variable nil (reparse-symbol indented_block_body) [15350 15366])
                            ("self" variable nil (reparse-symbol indented_block_body) [15375 15397])
                            ("self" variable nil (reparse-symbol indented_block_body) [15406 15443])
                            ("self" variable nil (reparse-symbol indented_block_body) [15452 15472])
                            ("self" variable nil (reparse-symbol indented_block_body) [15507 15536])
                            ("super" code nil (reparse-symbol indented_block_body) [15545 15600]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15242 15246])
                            ("nested" variable nil (reparse-symbol function_parameters) [15248 15254])
                            ("default" variable nil (reparse-symbol function_parameters) [15256 15263])
                            ("exclude" variable nil (reparse-symbol function_parameters) [15274 15281])
                            ("only" variable nil (reparse-symbol function_parameters) [15291 15295])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [15302 15310]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15229 15601])
                    ("schema" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15631 15635]))                          
                        :documentation "The nested Schema object.

        .. versionchanged:: 1.0.0
            Renamed from `serializer` to `schema`
        ")
                        (reparse-symbol indented_block_body) [15606 17792])
                    ("_nested_normalized_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17827 17831])
                            ("option_name" variable nil (reparse-symbol function_parameters) [17833 17844]))                          )
                        (reparse-symbol indented_block_body) [17797 18055])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18075 18079])
                            ("nested_obj" variable nil (reparse-symbol function_parameters) [18081 18091])
                            ("attr" variable nil (reparse-symbol function_parameters) [18093 18097])
                            ("obj" variable nil (reparse-symbol function_parameters) [18099 18102]))                          )
                        (reparse-symbol indented_block_body) [18060 18879])
                    ("_deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18901 18905])
                            ("value" variable nil (reparse-symbol function_parameters) [18907 18912])
                            ("attr" variable nil (reparse-symbol function_parameters) [18914 18918])
                            ("data" variable nil (reparse-symbol function_parameters) [18920 18924]))                          )
                        (reparse-symbol indented_block_body) [18884 19198])
                    ("_validate_missing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19225 19229])
                            ("value" variable nil (reparse-symbol function_parameters) [19231 19236]))                          
                        :documentation "Validate missing values. Raise a :exc:`ValidationError` if
        `value` should be considered missing.
        ")
                        (reparse-symbol indented_block_body) [19203 19698])
                    ("_check_required" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19723 19727]))                          )
                        (reparse-symbol indented_block_body) [19703 20699]))                  
                :type "class")
                nil [13210 20699])
            ("List" type
               (:documentation "A list field, composed with another `Field` class or
    instance.

    Example: ::

        numbers = fields.List(fields.Float())

    :param Field cls_or_instance: A field class or instance.
    :param bool default: Default value for serialization.
    :param kwargs: The same keyword arguments that :class:`Field` receives.

    .. versionchanged:: 2.0.0
        The ``allow_none`` parameter now applies to deserialization and
        has the same semantics as the other fields.
    "
                :superclasses ("Field")
                :members 
                  ( ("default_error_messages" variable nil (reparse-symbol indented_block_body) [21221 21293])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [21354 21390])
                            ("if" code nil (reparse-symbol indented_block_body) [21399 22070]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21312 21316])
                            ("cls_or_instance" variable nil (reparse-symbol function_parameters) [21318 21333])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [21335 21343]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21299 22070])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22089 22093])
                            ("attr" variable nil (reparse-symbol function_parameters) [22095 22099])
                            ("obj" variable nil (reparse-symbol function_parameters) [22101 22104])
                            ("accessor" variable nil (reparse-symbol function_parameters) [22106 22114]))                          
                        :documentation "Return the value for a given key from an object.")
                        (reparse-symbol indented_block_body) [22075 22595])
                    ("_add_to_schema" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22619 22623])
                            ("field_name" variable nil (reparse-symbol function_parameters) [22625 22635])
                            ("schema" variable nil (reparse-symbol function_parameters) [22637 22643]))                          )
                        (reparse-symbol indented_block_body) [22600 22785])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22805 22809])
                            ("value" variable nil (reparse-symbol function_parameters) [22811 22816])
                            ("attr" variable nil (reparse-symbol function_parameters) [22818 22822])
                            ("obj" variable nil (reparse-symbol function_parameters) [22824 22827]))                          )
                        (reparse-symbol indented_block_body) [22790 23062])
                    ("_deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23084 23088])
                            ("value" variable nil (reparse-symbol function_parameters) [23090 23095])
                            ("attr" variable nil (reparse-symbol function_parameters) [23097 23101])
                            ("data" variable nil (reparse-symbol function_parameters) [23103 23107]))                          )
                        (reparse-symbol indented_block_body) [23067 23577]))                  
                :type "class")
                nil [20701 23577])
            ("String" type
               (:documentation "A string field.

    :param kwargs: The same keyword arguments that :class:`Field` receives.
    "
                :superclasses ("Field")
                :members 
                  ( ("default_error_messages" variable nil (reparse-symbol indented_block_body) [23712 23785])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23806 23810])
                            ("value" variable nil (reparse-symbol function_parameters) [23812 23817])
                            ("attr" variable nil (reparse-symbol function_parameters) [23819 23823])
                            ("obj" variable nil (reparse-symbol function_parameters) [23825 23828]))                          )
                        (reparse-symbol indented_block_body) [23791 23926])
                    ("_deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23948 23952])
                            ("value" variable nil (reparse-symbol function_parameters) [23954 23959])
                            ("attr" variable nil (reparse-symbol function_parameters) [23961 23965])
                            ("data" variable nil (reparse-symbol function_parameters) [23967 23971]))                          )
                        (reparse-symbol indented_block_body) [23931 24098]))                  
                :type "class")
                nil [23578 24098])
            ("UUID" type
               (:documentation "A UUID field."
                :superclasses ("String")
                :members 
                  ( ("default_error_messages" variable nil (reparse-symbol indented_block_body) [24148 24309])
                    ("_validated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24330 24334])
                            ("value" variable nil (reparse-symbol function_parameters) [24336 24341]))                          
                        :documentation "Format the value or raise a :exc:`ValidationError` if an error occurs.")
                        (reparse-symbol indented_block_body) [24315 24677])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24697 24701])
                            ("value" variable nil (reparse-symbol function_parameters) [24703 24708])
                            ("attr" variable nil (reparse-symbol function_parameters) [24710 24714])
                            ("obj" variable nil (reparse-symbol function_parameters) [24716 24719]))                          )
                        (reparse-symbol indented_block_body) [24682 24869])
                    ("_deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24891 24895])
                            ("value" variable nil (reparse-symbol function_parameters) [24897 24902])
                            ("attr" variable nil (reparse-symbol function_parameters) [24904 24908])
                            ("data" variable nil (reparse-symbol function_parameters) [24910 24914]))                          )
                        (reparse-symbol indented_block_body) [24874 24955]))                  
                :type "class")
                nil [24100 24955])
            ("Number" type
               (:documentation "Base class for number fields.

    :param bool as_string: If True, format the serialized value as a string.
    :param kwargs: The same keyword arguments that :class:`Field` receives.
    "
                :superclasses ("Field")
                :members 
                  ( ("num_type" variable nil (reparse-symbol indented_block_body) [25182 25198])
                    ("default_error_messages" variable nil (reparse-symbol indented_block_body) [25203 25276])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [25337 25363])
                            ("super" code nil (reparse-symbol indented_block_body) [25372 25410]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25295 25299])
                            ("as_string" variable nil (reparse-symbol function_parameters) [25301 25310])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25318 25326]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25282 25411])
                    ("_format_num" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25432 25436])
                            ("value" variable nil (reparse-symbol function_parameters) [25438 25443]))                          
                        :documentation "Return the number value for value, given this field's `num_type`.")
                        (reparse-symbol indented_block_body) [25416 25612])
                    ("_validated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25632 25636])
                            ("value" variable nil (reparse-symbol function_parameters) [25638 25643]))                          
                        :documentation "Format the value or raise a :exc:`ValidationError` if an error occurs.")
                        (reparse-symbol indented_block_body) [25617 25867])
                    ("serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25886 25890])
                            ("attr" variable nil (reparse-symbol function_parameters) [25892 25896])
                            ("obj" variable nil (reparse-symbol function_parameters) [25898 25901])
                            ("accessor" variable nil (reparse-symbol function_parameters) [25903 25911]))                          
                        :documentation "Pulls the value for the given key from the object and returns the
        serialized number representation. Return a string if `self.as_string=True`,
        othewise return this field's `num_type`. Receives the same `args` and `kwargs`
        as `Field`.
        ")
                        (reparse-symbol indented_block_body) [25872 26362])
                    ("_to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26382 26386])
                            ("value" variable nil (reparse-symbol function_parameters) [26388 26393]))                          )
                        (reparse-symbol indented_block_body) [26367 26422])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26442 26446])
                            ("value" variable nil (reparse-symbol function_parameters) [26448 26453])
                            ("attr" variable nil (reparse-symbol function_parameters) [26455 26459])
                            ("obj" variable nil (reparse-symbol function_parameters) [26461 26464]))                          )
                        (reparse-symbol indented_block_body) [26427 26505])
                    ("_deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26527 26531])
                            ("value" variable nil (reparse-symbol function_parameters) [26533 26538])
                            ("attr" variable nil (reparse-symbol function_parameters) [26540 26544])
                            ("data" variable nil (reparse-symbol function_parameters) [26546 26550]))                          )
                        (reparse-symbol indented_block_body) [26510 26591]))                  
                :type "class")
                nil [24957 26591])
            ("Integer" type
               (:documentation "An integer field.

    :param kwargs: The same keyword arguments that :class:`Number` receives.
    "
                :superclasses ("Number")
                :members 
                  ( ("num_type" variable nil (reparse-symbol indented_block_body) [26732 26746])
                    ("default_error_messages" variable nil (reparse-symbol indented_block_body) [26751 26825]))                  
                :type "class")
                nil [26593 26826])
            ("Decimal" type
               (:documentation "A field that (de)serializes to the Python ``decimal.Decimal`` type.
    It's safe to use when dealing with money values, percentages, ratios
    or other numbers where precision is critical.

    .. warning::

        This field serializes to a `decimal.Decimal` object by default. If you need
        to render your data as JSON, keep in mind that the `json` module from the
        standard library does not encode `decimal.Decimal`. Therefore, you must use
        a JSON library that can handle decimals, such as `simplejson`, or serialize
        to a string by passing ``as_string=True``.

    .. warning::

        If a JSON `float` value is passed to this field for deserialization it will
        first be cast to its corresponding `string` value before being deserialized
        to a `decimal.Decimal` object. The default `__str__` implementation of the
        built-in Python `float` type may apply a destructive transformation upon
        its input data and therefore cannot be relied upon to preserve precision.
        To avoid this, you can instead pass a JSON `string` to be deserialized
        directly.

    :param int places: How many decimal places to quantize the value. If `None`, does
        not quantize the value.
    :param rounding: How to round the value during quantize, for example
        `decimal.ROUND_UP`. If None, uses the rounding value from
        the current thread's context.
    :param bool allow_nan: If `True`, `NaN`, `Infinity` and `-Infinity` are allowed,
        even though they are illegal according to the JSON specification.
    :param bool as_string: If True, serialize to a string instead of a Python
        `decimal.Decimal` type.
    :param kwargs: The same keyword arguments that :class:`Number` receives.

    .. versionadded:: 1.2.0
    "
                :superclasses ("Number")
                :members 
                  ( ("num_type" variable nil (reparse-symbol indented_block_body) [28667 28693])
                    ("default_error_messages" variable nil (reparse-symbol indented_block_body) [28699 28795])
                    ("__init__" function
                       (:suite 
                          ( ("None" code nil (reparse-symbol indented_block_body) [28978 28982])
                            ("self" variable nil (reparse-symbol indented_block_body) [28991 29015])
                            ("self" variable nil (reparse-symbol indented_block_body) [29024 29050])
                            ("super" code nil (reparse-symbol indented_block_body) [29059 29119]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28814 28818])
                            ("places" variable nil (reparse-symbol function_parameters) [28820 28826])
                            ("rounding" variable nil (reparse-symbol function_parameters) [28833 28841])
                            ("allow_nan" variable nil (reparse-symbol function_parameters) [28848 28857])
                            ("as_string" variable nil (reparse-symbol function_parameters) [28865 28874])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [28882 28890]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28801 29120])
                    ("_format_num" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29163 29167])
                            ("value" variable nil (reparse-symbol function_parameters) [29169 29174]))                          )
                        (reparse-symbol indented_block_body) [29147 29649])
                    ("_validated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29691 29695])
                            ("value" variable nil (reparse-symbol function_parameters) [29697 29702]))                          )
                        (reparse-symbol indented_block_body) [29676 29850])
                    ("_to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29892 29896])
                            ("value" variable nil (reparse-symbol function_parameters) [29898 29903]))                          )
                        (reparse-symbol indented_block_body) [29877 29940]))                  
                :type "class")
                nil [26828 29940])
            ("Boolean" type
               (:documentation "A boolean field.

    :param kwargs: The same keyword arguments that :class:`Field` receives.
    "
                :superclasses ("Field")
                :members 
                  ( ("truthy" variable nil (reparse-symbol indented_block_body) [30198 30260])
                    ("falsy" variable nil (reparse-symbol indented_block_body) [30315 30385])
                    ("default_error_messages" variable nil (reparse-symbol indented_block_body) [30391 30465])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30486 30490])
                            ("value" variable nil (reparse-symbol function_parameters) [30492 30497])
                            ("attr" variable nil (reparse-symbol function_parameters) [30499 30503])
                            ("obj" variable nil (reparse-symbol function_parameters) [30505 30508]))                          )
                        (reparse-symbol indented_block_body) [30471 30707])
                    ("_deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30729 30733])
                            ("value" variable nil (reparse-symbol function_parameters) [30735 30740])
                            ("attr" variable nil (reparse-symbol function_parameters) [30742 30746])
                            ("data" variable nil (reparse-symbol function_parameters) [30748 30752]))                          )
                        (reparse-symbol indented_block_body) [30712 31073]))                  
                :type "class")
                nil [29942 31073])
            ("FormattedString" type
               (:documentation "Interpolate other values from the object into this field. The syntax for
    the source string is the same as the string `str.format` method
    from the python stdlib.
    ::

        class UserSchema(Schema):
            name = fields.String()
            greeting = fields.FormattedString('Hello {name}')

        ser = UserSchema()
        res = ser.dump(user)
        res.data  # => {'name': 'Monty', 'greeting': 'Hello Monty'}
    "
                :superclasses ("Field")
                :members 
                  ( ("default_error_messages" variable nil (reparse-symbol indented_block_body) [31556 31646])
                    ("_CHECK_ATTRIBUTE" variable nil (reparse-symbol indented_block_body) [31651 31675])
                    ("__init__" function
                       (:suite 
                          ( ("Field" code nil (reparse-symbol indented_block_body) [31735 31772])
                            ("self" variable nil (reparse-symbol indented_block_body) [31781 31814]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31694 31698])
                            ("src_str" variable nil (reparse-symbol function_parameters) [31700 31707])
                            ("args" variable nil (reparse-symbol function_parameters) [31709 31714])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31716 31724]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31681 31815])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31835 31839])
                            ("value" variable nil (reparse-symbol function_parameters) [31841 31846])
                            ("attr" variable nil (reparse-symbol function_parameters) [31848 31852])
                            ("obj" variable nil (reparse-symbol function_parameters) [31854 31857]))                          )
                        (reparse-symbol indented_block_body) [31820 32052]))                  
                :type "class")
                nil [31074 32052])
            ("Float" type
               (:documentation "
    A double as IEEE-754 double precision string.

    :param bool as_string: If True, format the value as a string.
    :param kwargs: The same keyword arguments that :class:`Number` receives.
    "
                :superclasses ("Number")
                :members 
                  ( ("num_type" variable nil (reparse-symbol indented_block_body) [32290 32306]))                  
                :type "class")
                nil [32054 32307])
            ("DateTime" type
               (:documentation "A formatted datetime string in UTC.

    Example: ``'2014-12-22T03:12:58.019077+00:00'``

    Timezone-naive `datetime` objects are converted to
    UTC (+00:00) by :meth:`Schema.dump <marshmallow.Schema.dump>`.
    :meth:`Schema.load <marshmallow.Schema.load>` returns `datetime`
    objects that are timezone-aware.

    :param str format: Either ``\"rfc\"`` (for RFC822), ``\"iso\"`` (for ISO8601),
        or a date format string. If `None`, defaults to \"iso\".
    :param kwargs: The same keyword arguments that :class:`Field` receives.

    "
                :superclasses ("Field")
                :members 
                  ( ("DATEFORMAT_SERIALIZATION_FUNCS" variable nil (reparse-symbol indented_block_body) [32890 33065])
                    ("DATEFORMAT_DESERIALIZATION_FUNCS" variable nil (reparse-symbol indented_block_body) [33071 33244])
                    ("DEFAULT_FORMAT" variable nil (reparse-symbol indented_block_body) [33250 33272])
                    ("localtime" variable nil (reparse-symbol indented_block_body) [33278 33295])
                    ("default_error_messages" variable nil (reparse-symbol indented_block_body) [33300 33442])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [33499 33539])
                            ("self" variable nil (reparse-symbol indented_block_body) [33750 33774]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33461 33465])
                            ("format" variable nil (reparse-symbol function_parameters) [33467 33473])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [33480 33488]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33448 33775])
                    ("_add_to_schema" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33799 33803])
                            ("field_name" variable nil (reparse-symbol function_parameters) [33805 33815])
                            ("schema" variable nil (reparse-symbol function_parameters) [33817 33823]))                          )
                        (reparse-symbol indented_block_body) [33780 33959])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33979 33983])
                            ("value" variable nil (reparse-symbol function_parameters) [33985 33990])
                            ("attr" variable nil (reparse-symbol function_parameters) [33992 33996])
                            ("obj" variable nil (reparse-symbol function_parameters) [33998 34001]))                          )
                        (reparse-symbol indented_block_body) [33964 34483])
                    ("_deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34505 34509])
                            ("value" variable nil (reparse-symbol function_parameters) [34511 34516])
                            ("attr" variable nil (reparse-symbol function_parameters) [34518 34522])
                            ("data" variable nil (reparse-symbol function_parameters) [34524 34528]))                          )
                        (reparse-symbol indented_block_body) [34488 35552]))                  
                :type "class")
                nil [32309 35552])
            ("LocalDateTime" type
               (:documentation "A formatted datetime string in localized time, relative to UTC.

        ex. ``\"Sun, 10 Nov 2013 08:23:45 -0600\"``

    Takes the same arguments as :class:`DateTime <marshmallow.fields.DateTime>`.
    "
                :superclasses ("DateTime")
                :members 
                  ( ("localtime" variable nil (reparse-symbol indented_block_body) [35801 35817]))                  
                :type "class")
                nil [35554 35818])
            ("Time" type
               (:documentation "ISO8601-formatted time string.

    :param kwargs: The same keyword arguments that :class:`Field` receives.
    "
                :superclasses ("Field")
                :members 
                  ( ("default_error_messages" variable nil (reparse-symbol indented_block_body) [35966 36100])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36121 36125])
                            ("value" variable nil (reparse-symbol function_parameters) [36127 36132])
                            ("attr" variable nil (reparse-symbol function_parameters) [36134 36138])
                            ("obj" variable nil (reparse-symbol function_parameters) [36140 36143]))                          )
                        (reparse-symbol indented_block_body) [36106 36398])
                    ("_deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36420 36424])
                            ("value" variable nil (reparse-symbol function_parameters) [36426 36431])
                            ("attr" variable nil (reparse-symbol function_parameters) [36433 36437])
                            ("data" variable nil (reparse-symbol function_parameters) [36439 36443]))                          
                        :documentation "Deserialize an ISO8601-formatted time to a :class:`datetime.time` object.")
                        (reparse-symbol indented_block_body) [36403 36788]))                  
                :type "class")
                nil [35820 36788])
            ("Date" type
               (:documentation "ISO8601-formatted date string.

    :param kwargs: The same keyword arguments that :class:`Field` receives.
    "
                :superclasses ("Field")
                :members 
                  ( ("default_error_messages" variable nil (reparse-symbol indented_block_body) [36935 37069])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37090 37094])
                            ("value" variable nil (reparse-symbol function_parameters) [37096 37101])
                            ("attr" variable nil (reparse-symbol function_parameters) [37103 37107])
                            ("obj" variable nil (reparse-symbol function_parameters) [37109 37112]))                          )
                        (reparse-symbol indented_block_body) [37075 37312])
                    ("_deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37334 37338])
                            ("value" variable nil (reparse-symbol function_parameters) [37340 37345])
                            ("attr" variable nil (reparse-symbol function_parameters) [37347 37351])
                            ("data" variable nil (reparse-symbol function_parameters) [37353 37357]))                          
                        :documentation "Deserialize an ISO8601-formatted date string to a
        :class:`datetime.date` object.
        ")
                        (reparse-symbol indented_block_body) [37317 37703]))                  
                :type "class")
                nil [36789 37703])
            ("TimeDelta" type
               (:documentation "A field that (de)serializes a :class:`datetime.timedelta` object to an
    integer and vice versa. The integer can represent the number of days,
    seconds or microseconds.

    :param str precision: Influences how the integer is interpreted during
        (de)serialization. Must be 'days', 'seconds' or 'microseconds'.
    :param str error: Error message stored upon validation failure.
    :param kwargs: The same keyword arguments that :class:`Field` receives.

    .. versionchanged:: 2.0.0
        Always serializes to an integer value to avoid rounding errors.
        Add `precision` parameter.
    "
                :superclasses ("Field")
                :members 
                  ( ("DAYS" variable nil (reparse-symbol indented_block_body) [38353 38366])
                    ("SECONDS" variable nil (reparse-symbol indented_block_body) [38371 38390])
                    ("MICROSECONDS" variable nil (reparse-symbol indented_block_body) [38395 38424])
                    ("default_error_messages" variable nil (reparse-symbol indented_block_body) [38430 38578])
                    ("__init__" function
                       (:suite 
                          ( ("precision" variable nil (reparse-symbol indented_block_body) [38655 38684])
                            ("units" variable nil (reparse-symbol indented_block_body) [38693 38745])
                            ("if" code nil (reparse-symbol indented_block_body) [38755 38896])
                            ("self" variable nil (reparse-symbol indented_block_body) [38905 38931])
                            ("super" code nil (reparse-symbol indented_block_body) [38940 38994]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38597 38601])
                            ("precision" variable nil (reparse-symbol function_parameters) [38603 38612])
                            ("error" variable nil (reparse-symbol function_parameters) [38624 38629])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [38636 38644]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38584 38995])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39015 39019])
                            ("value" variable nil (reparse-symbol function_parameters) [39021 39026])
                            ("attr" variable nil (reparse-symbol function_parameters) [39028 39032])
                            ("obj" variable nil (reparse-symbol function_parameters) [39034 39037]))                          )
                        (reparse-symbol indented_block_body) [39000 39558])
                    ("_deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39580 39584])
                            ("value" variable nil (reparse-symbol function_parameters) [39586 39591])
                            ("attr" variable nil (reparse-symbol function_parameters) [39593 39597])
                            ("data" variable nil (reparse-symbol function_parameters) [39599 39603]))                          )
                        (reparse-symbol indented_block_body) [39563 39884]))                  
                :type "class")
                nil [37705 39884])
            ("Dict" type
               (:documentation "A dict field. Supports dicts and dict-like objects.

    .. note::
        This field is only appropriate when the structure of
        nested data is not known. For structured data, use
        `Nested`.

    .. versionadded:: 2.1.0
    "
                :superclasses ("Field")
                :members 
                  ( ("default_error_messages" variable nil (reparse-symbol indented_block_body) [40159 40238])
                    ("_deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40261 40265])
                            ("value" variable nil (reparse-symbol function_parameters) [40267 40272])
                            ("attr" variable nil (reparse-symbol function_parameters) [40274 40278])
                            ("data" variable nil (reparse-symbol function_parameters) [40280 40284]))                          )
                        (reparse-symbol indented_block_body) [40244 40410]))                  
                :type "class")
                nil [39886 40410])
            ("ValidatedField" type
               (:documentation "A field that validates input on serialization."
                :superclasses ("Field")
                :members 
                  ( ("_validated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40518 40522])
                            ("value" variable nil (reparse-symbol function_parameters) [40524 40529]))                          )
                        (reparse-symbol indented_block_body) [40503 40601])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40621 40625])
                            ("value" variable nil (reparse-symbol function_parameters) [40627 40632])
                            ("args" variable nil (reparse-symbol function_parameters) [40634 40639])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [40641 40649]))                          )
                        (reparse-symbol indented_block_body) [40606 40765]))                  
                :type "class")
                nil [40412 40765])
            ("Url" type
               (:documentation "A validated URL field. Validation occurs during both serialization and
    deserialization.

    :param default: Default value for the field if the attribute is not set.
    :param str attribute: The name of the attribute to get the value from. If
        `None`, assumes the attribute has the same name as the field.
    :param bool relative: Allow relative URLs.
    :param kwargs: The same keyword arguments that :class:`String` receives.
    "
                :superclasses ("ValidatedField" "String")
                :members 
                  ( ("default_error_messages" variable nil (reparse-symbol indented_block_body) [41263 41319])
                    ("__init__" function
                       (:suite 
                          ( ("String" code nil (reparse-symbol indented_block_body) [41393 41424])
                            ("self" variable nil (reparse-symbol indented_block_body) [41434 41458])
                            ("self" code nil (reparse-symbol indented_block_body) [41565 41729]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41338 41342])
                            ("relative" variable nil (reparse-symbol function_parameters) [41344 41352])
                            ("schemes" variable nil (reparse-symbol function_parameters) [41360 41367])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41374 41382]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41325 41730])
                    ("_validated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41750 41754])
                            ("value" variable nil (reparse-symbol function_parameters) [41756 41761]))                          )
                        (reparse-symbol indented_block_body) [41735 41945]))                  
                :type "class")
                nil [40767 41945])
            ("Email" type
               (:documentation "A validated email field. Validation occurs during both serialization and
    deserialization.

    :param args: The same positional arguments that :class:`String` receives.
    :param kwargs: The same keyword arguments that :class:`String` receives.
    "
                :superclasses ("ValidatedField" "String")
                :members 
                  ( ("default_error_messages" variable nil (reparse-symbol indented_block_body) [42253 42319])
                    ("__init__" function
                       (:suite 
                          ( ("String" code nil (reparse-symbol indented_block_body) [42369 42407])
                            ("self" code nil (reparse-symbol indented_block_body) [42514 42593]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42337 42341])
                            ("args" variable nil (reparse-symbol function_parameters) [42343 42348])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42350 42358]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42324 42594])
                    ("_validated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42614 42618])
                            ("value" variable nil (reparse-symbol function_parameters) [42620 42625]))                          )
                        (reparse-symbol indented_block_body) [42599 42775]))                  
                :type "class")
                nil [41947 42775])
            ("Method" type
               (:documentation "A field that takes the value returned by a `Schema` method.

    :param str method_name: The name of the Schema method from which
        to retrieve the value. The method must take an argument ``obj``
        (in addition to self) that is the object to be serialized.
    :param str deserialize: Optional name of the Schema method for deserializing
        a value The method must take a single argument ``value``, which is the
        value to deserialize.

    .. versionchanged:: 2.0.0
        Removed optional ``context`` parameter on methods. Use ``self.context`` instead.
    .. versionchanged:: 2.3.0
        Deprecated ``method_name`` parameter in favor of ``serialize`` and allow
        ``serialize`` to not be passed at all.
    "
                :superclasses ("Field")
                :members 
                  ( ("_CHECK_ATTRIBUTE" variable nil (reparse-symbol indented_block_body) [43554 43578])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [43674 43873])
                            ("self" code nil (reparse-symbol indented_block_body) [43882 43954])
                            ("self" variable nil (reparse-symbol indented_block_body) [43963 44005])
                            ("super" code nil (reparse-symbol indented_block_body) [44014 44052]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43597 43601])
                            ("serialize" variable nil (reparse-symbol function_parameters) [43603 43612])
                            ("deserialize" variable nil (reparse-symbol function_parameters) [43619 43630])
                            ("method_name" variable nil (reparse-symbol function_parameters) [43637 43648])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [43655 43663]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43584 44053])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44073 44077])
                            ("value" variable nil (reparse-symbol function_parameters) [44079 44084])
                            ("attr" variable nil (reparse-symbol function_parameters) [44086 44090])
                            ("obj" variable nil (reparse-symbol function_parameters) [44092 44095]))                          )
                        (reparse-symbol indented_block_body) [44058 44405])
                    ("_deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44427 44431])
                            ("value" variable nil (reparse-symbol function_parameters) [44433 44438])
                            ("attr" variable nil (reparse-symbol function_parameters) [44440 44444])
                            ("data" variable nil (reparse-symbol function_parameters) [44446 44450]))                          )
                        (reparse-symbol indented_block_body) [44410 44770]))                  
                :type "class")
                nil [42777 44770])
            ("Function" type
               (:documentation "A field that takes the value returned by a function.

    :param callable serialize: A callable from which to retrieve the value.
        The function must take a single argument ``obj`` which is the object
        to be serialized. It can also optionally take a ``context`` argument,
        which is a dictionary of context variables passed to the serializer.
        If no callable is provided then the ```load_only``` flag will be set
        to True.
    :param callable deserialize: A callable from which to retrieve the value.
        The function must take a single argument ``value`` which is the value
        to be deserialized. It can also optionally take a ``context`` argument,
        which is a dictionary of context variables passed to the deserializer.
        If no callable is provided then ```value``` will be passed through
        unchanged.
    :param callable func: This argument is to be deprecated. It exists for
        backwards compatiblity. Use serialize instead.

    .. versionchanged:: 2.3.0
        Deprecated ``func`` parameter in favor of ``serialize``.
    "
                :superclasses ("Field")
                :members 
                  ( ("_CHECK_ATTRIBUTE" variable nil (reparse-symbol indented_block_body) [45905 45929])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [46018 46222])
                            ("super" code nil (reparse-symbol indented_block_body) [46230 46270])
                            ("self" code nil (reparse-symbol indented_block_body) [46279 46361])
                            ("self" code nil (reparse-symbol indented_block_body) [46370 46446]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45948 45952])
                            ("serialize" variable nil (reparse-symbol function_parameters) [45954 45963])
                            ("deserialize" variable nil (reparse-symbol function_parameters) [45970 45981])
                            ("func" variable nil (reparse-symbol function_parameters) [45988 45992])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [45999 46007]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [45935 46447])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46467 46471])
                            ("value" variable nil (reparse-symbol function_parameters) [46473 46478])
                            ("attr" variable nil (reparse-symbol function_parameters) [46480 46484])
                            ("obj" variable nil (reparse-symbol function_parameters) [46486 46489]))                          )
                        (reparse-symbol indented_block_body) [46452 46700])
                    ("_deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46722 46726])
                            ("value" variable nil (reparse-symbol function_parameters) [46728 46733])
                            ("attr" variable nil (reparse-symbol function_parameters) [46735 46739])
                            ("data" variable nil (reparse-symbol function_parameters) [46741 46745]))                          )
                        (reparse-symbol indented_block_body) [46705 46878])
                    ("_call_or_raise" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46902 46906])
                            ("func" variable nil (reparse-symbol function_parameters) [46908 46912])
                            ("value" variable nil (reparse-symbol function_parameters) [46914 46919])
                            ("attr" variable nil (reparse-symbol function_parameters) [46921 46925]))                          )
                        (reparse-symbol indented_block_body) [46883 47242]))                  
                :type "class")
                nil [44772 47242])
            ("Constant" type
               (:documentation "A field that (de)serializes to a preset constant.  If you only want the
    constant added for serialization or deserialization, you should use
    ``dump_only=True`` or ``load_only=True`` respectively.

    :param constant: The constant to return for the field attribute.

    .. versionadded:: 2.0.0
    "
                :superclasses ("Field")
                :members 
                  ( ("_CHECK_ATTRIBUTE" variable nil (reparse-symbol indented_block_body) [47589 47613])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [47667 47707])
                            ("self" variable nil (reparse-symbol indented_block_body) [47716 47740])
                            ("self" variable nil (reparse-symbol indented_block_body) [47749 47772])
                            ("self" variable nil (reparse-symbol indented_block_body) [47781 47804]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47632 47636])
                            ("constant" variable nil (reparse-symbol function_parameters) [47638 47646])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47648 47656]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47619 47805])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47825 47829])
                            ("value" variable nil (reparse-symbol function_parameters) [47831 47836])
                            ("args" variable nil (reparse-symbol function_parameters) [47838 47843])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47845 47853]))                          )
                        (reparse-symbol indented_block_body) [47810 47885])
                    ("_deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47907 47911])
                            ("value" variable nil (reparse-symbol function_parameters) [47913 47918])
                            ("args" variable nil (reparse-symbol function_parameters) [47920 47925])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47927 47935]))                          )
                        (reparse-symbol indented_block_body) [47890 47967]))                  
                :type "class")
                nil [47245 47967])
            ("URL" variable nil nil [47979 47988])
            ("Str" variable nil nil [47989 48001])
            ("Bool" variable nil nil [48002 48016])
            ("Int" variable nil nil [48017 48030]))          
      :file "fields.py"
      :pointmax 48031
      :fsize 48030
      :lastmodtime '(23014 47340 906221 0)
      :unmatched-syntax '((INDENT_BLOCK 34369 . 34418) (NEWLINE 34368 . 34369) (COLON 34367 . 34368) (TRY 34240 . 34243) (AS 34361 . 34363) (INDENT_BLOCK 32020 . 32052) (NEWLINE 32019 . 32020) (COLON 32018 . 32019) (TRY 31868 . 31871) (AS 32010 . 32012) (NAME 28901 . 28905) (IF 28951 . 28953) (ELSE 28973 . 28977) (RETURN 26273 . 26279) (IF 26301 . 26303) (ELSE 26353 . 26357) (INDENT_BLOCK 25834 . 25867) (NEWLINE 25833 . 25834) (COLON 25832 . 25833) (TRY 25739 . 25742) (AS 25826 . 25828) (NAME 24730 . 24739) (IF 24770 . 24772) (ELSE 24791 . 24795) (INDENT_BLOCK 23392 . 23479) (NEWLINE 23391 . 23392) (COLON 23390 . 23391) (TRY 23282 . 23285) (AS 23386 . 23388) (INDENT_BLOCK 20406 . 20469) (NEWLINE 20405 . 20406) (COLON 20404 . 20405) (TRY 20288 . 20291) (AS 20399 . 20401) (RETURN 13072 . 13078) (IF 13083 . 13085) (ELSE 13113 . 13117) (INDENT_BLOCK 8159 . 8370) (NEWLINE 8158 . 8159) (COLON 8157 . 8158) (TRY 7952 . 7955) (AS 8151 . 8153) (NAME 7591 . 7600) (IF 7608 . 7610) (ELSE 7629 . 7633) (INDENT_BLOCK 8159 . 8370) (NEWLINE 8158 . 8159) (COLON 8157 . 8158) (TRY 7952 . 7955) (AS 8151 . 8153) (NAME 7591 . 7600) (IF 7608 . 7610) (ELSE 7629 . 7633)))
    (semanticdb-table "utils.py"
      :file "utils.py"
      :fsize 11675
      :lastmodtime '(23014 47340 907221 0))
    (semanticdb-table "exceptions.py"
      :file "exceptions.py"
      :fsize 2019
      :lastmodtime '(23014 47340 906221 0))
    (semanticdb-table "base.py"
      :file "base.py"
      :fsize 1025
      :lastmodtime '(23014 47340 905220 0))
    (semanticdb-table "compat.py"
      :file "compat.py"
      :fsize 2226
      :lastmodtime '(23014 47340 905220 0))
    (semanticdb-table "validate.py"
      :file "validate.py"
      :fsize 16420
      :lastmodtime '(23014 47340 907221 0)))
  :file "!usr!lib!python2.7!site-packages!marshmallow!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
