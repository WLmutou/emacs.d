;; Object torch/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "torch/"
  :tables (list 
   (semanticdb-table "__init__.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
The torch package contains data structures for multi-dimensional
tensors and mathematical operations over these are defined.
Additionally, it provides many utilities for efficient serializing of
Tensors and arbitrary types, and other useful utilities.

It has a CUDA counterpart, that enables you to run your tensor computations
on an NVIDIA GPU with compute capability >= 3.0.
\"\"\"" code nil nil [1 386])
            ("sys" include nil nil [388 398])
            ("_import_dotted_name" include nil nil [412 438])
            ("__version__" include nil nil [453 471])
            ("__all__" variable nil nil [473 927])
            ("os" include nil nil [1317 1339])
            ("try" code nil nil [1494 1551])
            ("if" code nil nil [1607 1884])
            ("old_flags" variable nil nil [1885 1917])
            ("sys" code nil nil [1918 1981])
            ("try" code nil nil [1982 2040])
            ("torch._C" include nil nil [2040 2062])
            ("__all__" variable nil nil [2064 2173])
            ("sys" code nil nil [2175 2204])
            ("del" code nil nil [2205 2218])
            ("del" code nil nil [2219 2232])
            ("typename" function (:arguments 
              ( ("o" variable nil (reparse-symbol function_parameters) [2436 2437]))              ) nil [2423 2874])
            ("is_tensor" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [2890 2893]))              ) nil [2876 3043])
            ("is_storage" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [3060 3063]))              ) nil [3045 3222])
            ("set_default_tensor_type" function (:arguments 
              ( ("t" variable nil (reparse-symbol function_parameters) [3252 3253]))              ) nil [3224 3435])
            ("set_rng_state" include nil nil [3450 3512])
            ("get_rng_state" include nil nil [3450 3512])
            ("manual_seed" include nil nil [3450 3512])
            ("initial_seed" include nil nil [3450 3512])
            ("save" include nil nil [3533 3550])
            ("load" include nil nil [3533 3550])
            ("set_printoptions" include nil nil [3569 3592])
            ("_StorageBase" include nil nil [3807 3826])
            ("_TensorBase" include nil nil [3840 3858])
            ("DoubleStorage" type
               (:superclasses ("_C.DoubleStorageBase" "_StorageBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3922 3926]))                  
                :type "class")
                nil [3861 3927])
            ("FloatStorage" type
               (:superclasses ("_C.FloatStorageBase" "_StorageBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3988 3992]))                  
                :type "class")
                nil [3929 3993])
            ("HalfStorage" type
               (:superclasses ("_C.HalfStorageBase" "_StorageBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [4052 4056]))                  
                :type "class")
                nil [3995 4057])
            ("LongStorage" type
               (:superclasses ("_C.LongStorageBase" "_StorageBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [4116 4120]))                  
                :type "class")
                nil [4059 4121])
            ("IntStorage" type
               (:superclasses ("_C.IntStorageBase" "_StorageBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [4178 4182]))                  
                :type "class")
                nil [4123 4183])
            ("ShortStorage" type
               (:superclasses ("_C.ShortStorageBase" "_StorageBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [4244 4248]))                  
                :type "class")
                nil [4185 4249])
            ("CharStorage" type
               (:superclasses ("_C.CharStorageBase" "_StorageBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [4308 4312]))                  
                :type "class")
                nil [4251 4313])
            ("ByteStorage" type
               (:superclasses ("_C.ByteStorageBase" "_StorageBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [4372 4376]))                  
                :type "class")
                nil [4315 4377])
            ("DoubleTensor" type
               (:superclasses ("_C.DoubleTensorBase" "_TensorBase")
                :members 
                  ( ("is_signed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4452 4456]))                          )
                        (reparse-symbol indented_block_body) [4438 4479])
                    ("storage_type" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4518 4521]))                          )
                        (reparse-symbol indented_block_body) [4484 4553]))                  
                :type "class")
                nil [4379 4553])
            ("FloatTensor" type
               (:superclasses ("_C.FloatTensorBase" "_TensorBase")
                :members 
                  ( ("is_signed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4626 4630]))                          )
                        (reparse-symbol indented_block_body) [4612 4653])
                    ("storage_type" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4692 4695]))                          )
                        (reparse-symbol indented_block_body) [4658 4726]))                  
                :type "class")
                nil [4555 4726])
            ("HalfTensor" type
               (:superclasses ("_C.HalfTensorBase" "_TensorBase")
                :members 
                  ( ("is_signed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4797 4801]))                          )
                        (reparse-symbol indented_block_body) [4783 4824])
                    ("storage_type" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4863 4866]))                          )
                        (reparse-symbol indented_block_body) [4829 4896]))                  
                :type "class")
                nil [4728 4896])
            ("LongTensor" type
               (:superclasses ("_C.LongTensorBase" "_TensorBase")
                :members 
                  ( ("is_signed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4967 4971]))                          )
                        (reparse-symbol indented_block_body) [4953 4994])
                    ("storage_type" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5033 5036]))                          )
                        (reparse-symbol indented_block_body) [4999 5066]))                  
                :type "class")
                nil [4898 5066])
            ("IntTensor" type
               (:superclasses ("_C.IntTensorBase" "_TensorBase")
                :members 
                  ( ("is_signed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5135 5139]))                          )
                        (reparse-symbol indented_block_body) [5121 5162])
                    ("storage_type" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5201 5204]))                          )
                        (reparse-symbol indented_block_body) [5167 5233]))                  
                :type "class")
                nil [5068 5233])
            ("ShortTensor" type
               (:superclasses ("_C.ShortTensorBase" "_TensorBase")
                :members 
                  ( ("is_signed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5306 5310]))                          )
                        (reparse-symbol indented_block_body) [5292 5333])
                    ("storage_type" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5372 5375]))                          )
                        (reparse-symbol indented_block_body) [5338 5406]))                  
                :type "class")
                nil [5235 5406])
            ("CharTensor" type
               (:superclasses ("_C.CharTensorBase" "_TensorBase")
                :members 
                  ( ("is_signed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5477 5481]))                          )
                        (reparse-symbol indented_block_body) [5463 5520])
                    ("storage_type" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5559 5562]))                          )
                        (reparse-symbol indented_block_body) [5525 5592]))                  
                :type "class")
                nil [5408 5592])
            ("ByteTensor" type
               (:superclasses ("_C.ByteTensorBase" "_TensorBase")
                :members 
                  ( ("is_signed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5663 5667]))                          )
                        (reparse-symbol indented_block_body) [5649 5691])
                    ("storage_type" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5730 5733]))                          )
                        (reparse-symbol indented_block_body) [5696 5763]))                  
                :type "class")
                nil [5594 5763])
            ("_storage_classes" variable nil nil [5765 5901])
            ("_tensor_classes" variable nil nil [5903 6030])
            ("set_default_tensor_type" code nil nil [6033 6077])
            ("manager_path" function nil nil [6503 6772])
            ("_C" code nil nil [6853 6886])
            ("del" code nil nil [6887 6903])
            ("del" code nil nil [7097 7118])
            ("del" code nil nil [7119 7139])
            ("del" code nil nil [7140 7159])
            ("del" code nil nil [7160 7178])
            ("del" code nil nil [7179 7199])
            ("del" code nil nil [7200 7219])
            ("del" code nil nil [7220 7239])
            ("del" code nil nil [7240 7260])
            ("del" code nil nil [7261 7280])
            ("del" code nil nil [7281 7299])
            ("del" code nil nil [7300 7317])
            ("del" code nil nil [7318 7337])
            ("del" code nil nil [7338 7356])
            ("del" code nil nil [7357 7375])
            ("del" code nil nil [7377 7403])
            ("del" code nil nil [7404 7429])
            ("del" code nil nil [7430 7454])
            ("del" code nil nil [7455 7478])
            ("del" code nil nil [7479 7504])
            ("del" code nil nil [7505 7529])
            ("del" code nil nil [7530 7554])
            ("torch.cuda" include nil nil [7752 7769])
            ("torch.autograd" include nil nil [7770 7791])
            ("torch.nn" include nil nil [7792 7807])
            ("torch.optim" include nil nil [7808 7826])
            ("torch.multiprocessing" include nil nil [7827 7855])
            ("torch.sparse" include nil nil [7856 7875])
            ("torch.utils.backcompat" include nil nil [7876 7905])
            ("torch.onnx" include nil nil [7906 7923])
            ("torch.random" include nil nil [7924 7943])
            ("torch.distributions" include nil nil [7944 7970])
            ("_C" code nil nil [7972 8046])
            ("_torch_docs" include nil nil [8105 8152])
            ("_tensor_docs" include nil nil [8105 8152])
            ("_storage_docs" include nil nil [8105 8152])
            ("del" code nil nil [8153 8197]))          
    :file "__init__.py"
    :pointmax 8198
    :fsize 8197
    :lastmodtime '(23105 45908 501927 0)
    :unmatched-syntax '((FROM 8098 . 8102) (PERIOD 8103 . 8104) (IMPORT 6306 . 6312) (MULT 6313 . 6314) (FROM 6289 . 6293) (PERIOD 6294 . 6295) (FROM 3827 . 3831) (PERIOD 3832 . 3833) (FROM 3793 . 3797) (PERIOD 3798 . 3799) (FROM 3551 . 3555) (PERIOD 3556 . 3557) (FROM 3513 . 3517) (PERIOD 3518 . 3519) (FROM 3437 . 3441) (PERIOD 3442 . 3443) (FROM 439 . 443) (PERIOD 444 . 445) (FROM 399 . 403) (PERIOD 404 . 405))
    )
   (semanticdb-table "random.py"
    :major-mode 'python-mode
    :tags 
        '( ("torch" include nil nil [1 13])
            ("contextlib" include nil nil [14 31])
            ("warnings" include nil nil [32 47])
            ("torch._C" include nil nil [49 87])
            ("set_rng_state" function (:arguments 
              ( ("new_state" variable nil (reparse-symbol function_parameters) [108 117]))              ) nil [90 286])
            ("get_rng_state" function nil nil [288 420])
            ("manual_seed" function (:arguments 
              ( ("seed" variable nil (reparse-symbol function_parameters) [438 442]))              ) nil [422 758])
            ("initial_seed" function nil nil [760 919])
            ("_fork_rng_warned_already" variable nil nil [921 953])
            ("fork_rng" function
               (:documentation "
    Forks the RNG, so that when you return, the RNG is reset
    to the state that it was previously in.

    Arguments:
        devices (iterable of CUDA IDs): CUDA devices for which to fork
            the RNG.  CPU RNG state is always forked.  By default, fork_rng operates
            on all devices, but will emit a warning if your machine has a lot
            of devices, since this function will run very slowly in that case.
            If you explicitly specify devices, this warning will be supressed
        enabled (bool): if ``False``, the RNG is not forked.  This is a convenience
            argument for easily disabling the context manager without having
            to reindent your Python code.
    "
                :arguments 
                  ( ("devices" variable nil (reparse-symbol function_parameters) [996 1003])
                    ("enabled" variable nil (reparse-symbol function_parameters) [1010 1017])
                    ("_caller" variable nil (reparse-symbol function_parameters) [1024 1031])
                    ("_devices_kw" variable nil (reparse-symbol function_parameters) [1044 1055]))                  
                :decorators 
                  ( ("contextlib.contextmanager" function (:type "decorator") nil nil))                  )
                nil [956 4021]))          
    :file "random.py"
    :pointmax 4021
    :fsize 4020
    :lastmodtime '(23105 45917 760910 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "distributions.py"
    :file "distributions.py"
    :fsize 6015
    :lastmodtime '(23105 45917 758910 0)
    )
   (semanticdb-table "_torch_docs.py"
    :file "_torch_docs.py"
    :fsize 117769
    :lastmodtime '(23105 45917 714910 0)
    )
   (semanticdb-table "_tensor_docs.py"
    :file "_tensor_docs.py"
    :fsize 35869
    :lastmodtime '(23105 45908 505927 0)
    )
   (semanticdb-table "_storage_docs.py"
    :file "_storage_docs.py"
    :fsize 1164
    :lastmodtime '(23105 45917 760910 0)
    )
   )
  :file "!usr!lib64!python2.7!site-packages!torch!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
