;; Object falcon/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "falcon/"
  :tables (list 
   (semanticdb-table "__init__.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Primary package for Falcon, the minimalist WSGI library.

Falcon is a minimalist WSGI library for building speedy web APIs and app
backends. The `falcon` package can be used to directly access most of
the framework's classes, functions, and variables::

    import falcon

    app = falcon.API()

\"\"\"" code nil nil [591 894])
            ("falcon.version" include nil nil [952 990])
            ("falcon.constants" include nil nil [999 1029])
            ("falcon.api" include nil nil [1038 1064])
            ("falcon.status_codes" include nil nil [1073 1106])
            ("falcon.errors" include nil nil [1115 1142])
            ("falcon.redirects" include nil nil [1151 1181])
            ("falcon.http_error" include nil nil [1190 1229])
            ("falcon.http_status" include nil nil [1238 1279])
            ("falcon.uri" include nil nil [1471 1488])
            ("falcon.util" include nil nil [1498 1523])
            ("falcon.hooks" include nil nil [1533 1571])
            ("falcon.request" include nil nil [1580 1641])
            ("falcon.response" include nil nil [1650 1703]))          
    :file "__init__.py"
    :pointmax 1712
    :fsize 1711
    :lastmodtime '(23079 49428 609413 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "api.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Falcon API class.\"\"\"" code nil nil [591 614])
            ("re" include nil nil [616 625])
            ("six" include nil nil [627 637])
            ("falcon" include nil nil [639 709])
            ("falcon.http_error" include nil nil [710 749])
            ("falcon.http_status" include nil nil [750 791])
            ("falcon.request" include nil nil [792 842])
            ("falcon.responders" include nil nil [843 867])
            ("falcon.response" include nil nil [868 921])
            ("falcon.status_codes" include nil nil [922 958])
            ("falcon.util.misc" include nil nil [959 1000])
            ("API" type
               (:documentation "This class is the main entry point into a Falcon-based app.

    Each API instance provides a callable WSGI interface and a routing
    engine.

    Keyword Arguments:
        media_type (str): Default media type to use as the
            value for the Content-Type header on responses (default
            'application/json'). The ``falcon`` module provides a
            number of constants for common media types, such as
            ``falcon.MEDIA_MSGPACK``, ``falcon.MEDIA_YAML``,
            ``falcon.MEDIA_XML``, etc.
        middleware(object or list): Either a single object or a list
            of objects (instantiated classes) that implement the
            following middleware component interface::

                class ExampleComponent(object):
                    def process_request(self, req, resp):
                        \\\"\\\"\\\"Process the request before routing it.

                        Args:
                            req: Request object that will eventually be
                                routed to an on_* responder method.
                            resp: Response object that will be routed to
                                the on_* responder.
                        \\\"\\\"\\\"

                    def process_resource(self, req, resp, resource, params):
                        \\\"\\\"\\\"Process the request and resource *after* routing.

                        Note:
                            This method is only called when the request matches
                            a route to a resource.

                        Args:
                            req: Request object that will be passed to the
                                routed responder.
                            resp: Response object that will be passed to the
                                responder.
                            resource: Resource object to which the request was
                                routed. May be None if no route was found for
                                the request.
                            params: A dict-like object representing any
                                additional params derived from the route's URI
                                template fields, that will be passed to the
                                resource's responder method as keyword
                                arguments.
                        \\\"\\\"\\\"

                    def process_response(self, req, resp, resource, req_succeeded)
                        \\\"\\\"\\\"Post-processing of the response (after routing).

                        Args:
                            req: Request object.
                            resp: Response object.
                            resource: Resource object to which the request was
                                routed. May be None if no route was found
                                for the request.
                            req_succeeded: True if no exceptions were raised
                                while the framework processed and routed the
                                request; otherwise False.
                        \\\"\\\"\\\"

            (See also: :ref:`Middleware <middleware>`)

        request_type (Request): ``Request``-like class to use instead
            of Falcon's default class. Among other things, this feature
            affords inheriting from ``falcon.request.Request`` in order
            to override the ``context_type`` class variable.
            (default ``falcon.request.Request``)

        response_type (Response): ``Response``-like class to use
            instead of Falcon's default class. (default
            ``falcon.response.Response``)

        router (object): An instance of a custom router
            to use in lieu of the default engine.
            (See also: :ref:`Custom Routers <routing_custom>`)

        independent_middleware (bool): Set to ``True`` if response
            middleware should be executed independently of whether or
            not request middleware raises an exception (default
            ``False``).

    Attributes:
        req_options: A set of behavioral options related to incoming
            requests. (See also: :py:class:`~.RequestOptions`)
        resp_options: A set of behavioral options related to outgoing
            responses. (See also: :py:class:`~.ResponseOptions`)
        router_options: Configuration options for the router. If a
            custom router is in use, and it does not expose any
            configurable options, referencing this attribute will raise
            an instance of ``AttributeError``.

            (See also: :ref:`CompiledRouterOptions <compiled_router_options>`)
    "
                :superclasses ("object")
                :members 
                  ( ("_BODILESS_STATUS_CODES" variable nil (reparse-symbol indented_block_body) [5812 5948])
                    ("_STREAM_BLOCK_SIZE" code nil (reparse-symbol indented_block_body) [5954 5983])
                    ("__slots__" variable nil (reparse-symbol indented_block_body) [5998 6262])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6484 6500])
                            ("self" variable nil (reparse-symbol indented_block_body) [6509 6538])
                            ("self" variable nil (reparse-symbol indented_block_body) [6573 6690])
                            ("self" variable nil (reparse-symbol indented_block_body) [6699 6752])
                            ("self" code nil (reparse-symbol indented_block_body) [6762 6810])
                            ("self" variable nil (reparse-symbol indented_block_body) [6819 6881])
                            ("self" variable nil (reparse-symbol indented_block_body) [6891 6924])
                            ("self" variable nil (reparse-symbol indented_block_body) [6933 6968])
                            ("self" variable nil (reparse-symbol indented_block_body) [6978 7003])
                            ("self" variable nil (reparse-symbol indented_block_body) [7012 7067])
                            ("self" variable nil (reparse-symbol indented_block_body) [7077 7112])
                            ("self" variable nil (reparse-symbol indented_block_body) [7121 7158])
                            ("self" variable nil (reparse-symbol indented_block_body) [7168 7216])
                            ("self" variable nil (reparse-symbol indented_block_body) [7225 7274])
                            ("self" code nil (reparse-symbol indented_block_body) [7336 7402])
                            ("self" code nil (reparse-symbol indented_block_body) [7411 7479]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6281 6285])
                            ("media_type" variable nil (reparse-symbol function_parameters) [6287 6297])
                            ("request_type" variable nil (reparse-symbol function_parameters) [6335 6347])
                            ("response_type" variable nil (reparse-symbol function_parameters) [6357 6370])
                            ("middleware" variable nil (reparse-symbol function_parameters) [6398 6408])
                            ("router" variable nil (reparse-symbol function_parameters) [6415 6421])
                            ("independent_middleware" variable nil (reparse-symbol function_parameters) [6445 6467]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6268 7480])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7498 7502])
                            ("env" variable nil (reparse-symbol function_parameters) [7504 7507])
                            ("start_response" variable nil (reparse-symbol function_parameters) [7509 7523]))                          
                        :documentation "WSGI `app` method.

        Makes instances of API callable from a WSGI server. May be used to
        host an API or called directly in order to simulate requests when
        testing the API.

        (See also: PEP 3333)

        Args:
            env (dict): A WSGI environment dictionary
            start_response (callable): A WSGI helper function for setting
                status and headers on a response.

        ")
                        (reparse-symbol indented_block_body) [7485 12617])
                    ("router_options" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12655 12659]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12622 12698])
                    ("add_route" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12717 12721])
                            ("uri_template" variable nil (reparse-symbol function_parameters) [12723 12735])
                            ("resource" variable nil (reparse-symbol function_parameters) [12737 12745])
                            ("args" variable nil (reparse-symbol function_parameters) [12747 12752])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [12754 12762]))                          
                        :documentation "Associates a templatized URI path with a resource.

        Falcon routes incoming requests to resources based on a set of
        URI templates. If the path requested by the client matches the
        template for a given route, the request is then passed on to the
        associated resource for processing.

        If no route matches the request, control then passes to a
        default responder that simply raises an instance of
        :class:`~.HTTPNotFound`.

        (See also: :ref:`Routing <routing>`)

        Args:
            uri_template (str): A templatized URI. Care must be
                taken to ensure the template does not mask any sink
                patterns, if any are registered.

                (See also: :meth:`~.add_sink`)

            resource (instance): Object which represents a REST
                resource. Falcon will pass \"GET\" requests to on_get,
                \"PUT\" requests to on_put, etc. If any HTTP methods are not
                supported by your resource, simply don't define the
                corresponding request handlers, and Falcon will do the right
                thing.

        Note:
            Any additional args and kwargs not defined above are passed
            through to the underlying router's ``add_route()`` method. The
            default router does not expect any additional arguments, but
            custom routers may take advantage of this feature to receive
            additional options when setting up routes.

        ")
                        (reparse-symbol indented_block_body) [12703 14944])
                    ("add_sink" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14962 14966])
                            ("sink" variable nil (reparse-symbol function_parameters) [14968 14972])
                            ("prefix" variable nil (reparse-symbol function_parameters) [14974 14980]))                          
                        :documentation "Registers a sink method for the API.

        If no route matches a request, but the path in the requested URI
        matches a sink prefix, Falcon will pass control to the
        associated sink, regardless of the HTTP method requested.

        Using sinks, you can drain and dynamically handle a large number
        of routes, when creating static resources and responders would be
        impractical. For example, you might use a sink to create a smart
        proxy that forwards requests to one or more backend services.

        Args:
            sink (callable): A callable taking the form ``func(req, resp)``.

            prefix (str): A regex string, typically starting with '/', which
                will trigger the sink if it matches the path portion of the
                request's URI. Both strings and precompiled regex objects
                may be specified. Characters are matched starting at the
                beginning of the URI path.

                Note:
                    Named groups are converted to kwargs and passed to
                    the sink as such.

                Warning:
                    If the prefix overlaps a registered route template,
                    the route will take precedence and mask the sink.

                    (See also: :meth:`~.add_route`)

        ")
                        (reparse-symbol indented_block_body) [14949 16651])
                    ("add_error_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16678 16682])
                            ("exception" variable nil (reparse-symbol function_parameters) [16684 16693])
                            ("handler" variable nil (reparse-symbol function_parameters) [16695 16702]))                          
                        :documentation "Registers a handler for a given exception error type.

        Error handlers may be registered for any type, including
        :class:`~.HTTPError`. This feature provides a central location
        for logging and otherwise handling exceptions raised by
        responders, hooks, and middleware components.

        A handler can raise an instance of :class:`~.HTTPError` or
        :class:`~.HTTPStatus` to communicate information about the issue to
        the client.  Alternatively, a handler may modify `resp`
        directly.

        Error handlers are matched in LIFO order. In other words, when
        searching for an error handler to match a raised exception, and
        more than one handler matches the exception type, the framework
        will choose the one that was most recently registered.
        Therefore, more general error handlers (e.g., for the
        standard ``Exception`` type) should be added first, to avoid
        masking more specific handlers for subclassed types.

        Args:
            exception (type): Whenever an error occurs when handling a request
                that is an instance of this exception class, the associated
                handler will be called.
            handler (callable): A function or callable object taking the form
                ``func(ex, req, resp, params)``.

                If not specified explicitly, the handler will default to
                ``exception.handle``, where ``exception`` is the error
                type specified above, and ``handle`` is a static method
                (i.e., decorated with @staticmethod) that accepts
                the same params just described. For example::

                    class CustomException(CustomBaseException):

                        @staticmethod
                        def handle(ex, req, resp, params):
                            # TODO: Log the error
                            # Convert to an instance of falcon.HTTPError
                            raise falcon.HTTPError(falcon.HTTP_792)


        ")
                        (reparse-symbol indented_block_body) [16656 19388])
                    ("set_error_serializer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19418 19422])
                            ("serializer" variable nil (reparse-symbol function_parameters) [19424 19434]))                          
                        :documentation "Override the default serializer for instances of :class:`~.HTTPError`.

        When a responder raises an instance of :class:`~.HTTPError`,
        Falcon converts it to an HTTP response automatically. The
        default serializer supports JSON and XML, but may be overridden
        by this method to use a custom serializer in order to support
        other media types.

        Note:
            If a custom media type is used and the type includes a
            \"+json\" or \"+xml\" suffix, the default serializer will
            convert the error to JSON or XML, respectively.

        The :class:`~.HTTPError` class contains helper methods,
        such as `to_json()` and `to_dict()`, that can be used from
        within custom serializers. For example::

            def my_serializer(req, resp, exception):
                representation = None

                preferred = req.client_prefers(('application/x-yaml',
                                                'application/json'))

                if preferred is not None:
                    if preferred == 'application/json':
                        representation = exception.to_json()
                    else:
                        representation = yaml.dump(exception.to_dict(),
                                                   encoding=None)
                    resp.body = representation
                    resp.content_type = preferred

                resp.append_header('Vary', 'Accept')

        Args:
            serializer (callable): A function taking the form
                ``func(req, resp, exception)``, where `req` is the request
                object that was passed to the responder method, `resp` is
                the response object, and `exception` is an instance of
                ``falcon.HTTPError``.

        ")
                        (reparse-symbol indented_block_body) [19393 21431])
                    ("_get_responder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21646 21650])
                            ("req" variable nil (reparse-symbol function_parameters) [21652 21655]))                          
                        :documentation "Searches routes for a matching responder.

        Args:
            req: The request object.

        Returns:
            tuple: A 3-member tuple consisting of a responder callable,
            a ``dict`` containing parsed path fields (if any were specified in
            the matching route's URI template), and a reference to the
            responder's resource instance.

        Note:
            If a responder was matched to the given URI, but the HTTP
            method was not found in the method_map for the responder,
            the responder callable element of the returned tuple will be
            `falcon.responder.bad_request`.

            Likewise, if no responder was matched for the given URI, then
            the responder callable element of the returned tuple will be
            `falcon.responder.path_not_found`
        ")
                        (reparse-symbol indented_block_body) [21627 23955])
                    ("_compose_status_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23989 23993])
                            ("req" variable nil (reparse-symbol function_parameters) [23995 23998])
                            ("resp" variable nil (reparse-symbol function_parameters) [24000 24004])
                            ("http_status" variable nil (reparse-symbol function_parameters) [24006 24017]))                          
                        :documentation "Composes a response for the given HTTPStatus instance.")
                        (reparse-symbol indented_block_body) [23960 24619])
                    ("_compose_error_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24652 24656])
                            ("req" variable nil (reparse-symbol function_parameters) [24658 24661])
                            ("resp" variable nil (reparse-symbol function_parameters) [24663 24667])
                            ("error" variable nil (reparse-symbol function_parameters) [24669 24674]))                          
                        :documentation "Composes a response for the given HTTPError instance.")
                        (reparse-symbol indented_block_body) [24624 24954])
                    ("_http_status_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24984 24988])
                            ("status" variable nil (reparse-symbol function_parameters) [24990 24996])
                            ("req" variable nil (reparse-symbol function_parameters) [24998 25001])
                            ("resp" variable nil (reparse-symbol function_parameters) [25003 25007])
                            ("params" variable nil (reparse-symbol function_parameters) [25009 25015]))                          )
                        (reparse-symbol indented_block_body) [24959 25075])
                    ("_http_error_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25104 25108])
                            ("error" variable nil (reparse-symbol function_parameters) [25110 25115])
                            ("req" variable nil (reparse-symbol function_parameters) [25117 25120])
                            ("resp" variable nil (reparse-symbol function_parameters) [25122 25126])
                            ("params" variable nil (reparse-symbol function_parameters) [25128 25134]))                          )
                        (reparse-symbol indented_block_body) [25080 25192])
                    ("_handle_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25219 25223])
                            ("ex" variable nil (reparse-symbol function_parameters) [25225 25227])
                            ("req" variable nil (reparse-symbol function_parameters) [25229 25232])
                            ("resp" variable nil (reparse-symbol function_parameters) [25234 25238])
                            ("params" variable nil (reparse-symbol function_parameters) [25240 25246]))                          
                        :documentation "Handles an exception raised from mw or a responder.

        Args:
            ex: Exception to handle
            req: Current request object to pass to the handler
                registered for the given exception type
            resp: Current response object to pass to the handler
                registered for the given exception type
            params: Responder params to pass to the handler
                registered for the given exception type

        Returns:
            bool: ``True`` if a handler was found and called for the
            exception, ``False`` otherwise.
        ")
                        (reparse-symbol indented_block_body) [25197 26523])
                    ("_get_body" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26693 26697])
                            ("resp" variable nil (reparse-symbol function_parameters) [26699 26703])
                            ("wsgi_file_wrapper" variable nil (reparse-symbol function_parameters) [26705 26722]))                          
                        :documentation "Converts resp content into an iterable as required by PEP 333

        Args:
            resp: Instance of falcon.Response
            wsgi_file_wrapper: Reference to wsgi.file_wrapper from the
                WSGI environ dict, if provided by the WSGI server. Used
                when resp.stream is a file-like object (default None).

        Returns:
            tuple: A two-member tuple of the form (iterable, content_length).
            The length is returned as ``None`` when unknown. The
            iterable is determined as follows:

                * If resp.body is not ``None``, returns [resp.body],
                  encoded as UTF-8 if it is a Unicode string.
                  Bytestrings are returned as-is.
                * If resp.data is not ``None``, returns [resp.data]
                * If resp.stream is not ``None``, returns resp.stream
                  iterable using wsgi.file_wrapper, if possible.
                * Otherwise, returns []

        ")
                        (reparse-symbol indented_block_body) [26679 29167]))                  
                :type "class")
                nil [1003 29167]))          
    :file "api.py"
    :pointmax 29167
    :fsize 29166
    :lastmodtime '(23079 49428 610414 0)
    :unmatched-syntax '((INDENT_BLOCK 26196 . 26263) (NEWLINE 26195 . 26196) (COLON 26194 . 26195) (AS 26186 . 26188) (EXCEPT 26169 . 26175) (INDENT_BLOCK 26084 . 26153) (NEWLINE 26083 . 26084) (COLON 26082 . 26083) (TRY 25979 . 25982) (AS 26073 . 26075) (NAME 11730 . 11741) (IF 11761 . 11763) (ELSE 11772 . 11776) (INDENT_BLOCK 11337 . 11484) (NEWLINE 11336 . 11337) (COLON 11335 . 11336) (TRY 11219 . 11222) (AS 11330 . 11332) (INDENT_BLOCK 9921 . 10685) (NEWLINE 9920 . 9921) (COLON 9919 . 9920) (ELSE 9915 . 9919) (INDENT_BLOCK 9807 . 9903) (NEWLINE 9806 . 9807) (COLON 9805 . 9806) (TRY 8317 . 8320) (AS 9800 . 9802) (INDENT_BLOCK 26196 . 26263) (NEWLINE 26195 . 26196) (COLON 26194 . 26195) (AS 26186 . 26188) (EXCEPT 26169 . 26175) (INDENT_BLOCK 26084 . 26153) (NEWLINE 26083 . 26084) (COLON 26082 . 26083) (TRY 25979 . 25982) (AS 26073 . 26075) (NAME 11730 . 11741) (IF 11761 . 11763) (ELSE 11772 . 11776) (INDENT_BLOCK 11337 . 11484) (NEWLINE 11336 . 11337) (COLON 11335 . 11336) (TRY 11219 . 11222) (AS 11330 . 11332) (INDENT_BLOCK 9921 . 10685) (NEWLINE 9920 . 9921) (COLON 9919 . 9920) (ELSE 9915 . 9919) (INDENT_BLOCK 9807 . 9903) (NEWLINE 9806 . 9807) (COLON 9805 . 9806) (TRY 8317 . 8320) (AS 9800 . 9802))
    )
   (semanticdb-table "request.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Request class.\"\"\"" code nil nil [545 565])
            ("datetime" include nil nil [567 596])
            ("try" code nil nil [597 663])
            ("try" code nil nil [664 1110])
            ("wsgiref.validate" include nil nil [1111 1152])
            ("mimeparse" include nil nil [1154 1170])
            ("six" include nil nil [1171 1181])
            ("six.moves" include nil nil [1182 1216])
            ("falcon" include nil nil [1218 1255])
            ("falcon" include nil nil [1256 1281])
            ("falcon" include nil nil [1282 1327])
            ("falcon" include nil nil [1328 1351])
            ("falcon.media" include nil nil [1352 1385])
            ("falcon.util.uri" include nil nil [1386 1460])
            ("SimpleCookie" variable nil nil [1630 1670])
            ("DEFAULT_ERROR_LOG_FORMAT" variable nil nil [1672 1789])
            ("TRUE_STRINGS" variable nil nil [1791 1840])
            ("FALSE_STRINGS" variable nil nil [1841 1893])
            ("WSGI_CONTENT_HEADERS" variable nil nil [1894 1951])
            ("strptime" variable nil nil [2029 2057])
            ("now" variable nil nil [2058 2076])
            ("Request" type
               (:documentation "Represents a client's HTTP request.

    Note:
        `Request` is not meant to be instantiated directly by responders.

    Args:
        env (dict): A WSGI environment dict passed in from the server. See
            also PEP-3333.

    Keyword Arguments:
        options (dict): Set of global options passed from the API handler.

    Attributes:
        env (dict): Reference to the WSGI environ ``dict`` passed in from the
            server. (See also PEP-3333.)
        context (dict): Dictionary to hold any data about the request which is
            specific to your app (e.g. session object). Falcon itself will
            not interact with this attribute after it has been initialized.
        context_type (class): Class variable that determines the factory or
            type to use for initializing the `context` attribute. By default,
            the framework will instantiate standard ``dict`` objects. However,
            you may override this behavior by creating a custom child class of
            ``falcon.Request``, and then passing that new class to
            `falcon.API()` by way of the latter's `request_type` parameter.

            Note:
                When overriding `context_type` with a factory function (as
                opposed to a class), the function is called like a method of
                the current Request instance. Therefore the first argument is
                the Request instance itself (self).
        scheme (str): URL scheme used for the request. Either 'http' or
            'https'.

            Note:
                If the request was proxied, the scheme may not
                match what was originally requested by the client.
                :py:attr:`forwarded_scheme` can be used, instead,
                to handle such cases.

        forwarded_scheme (str): Original URL scheme requested by the
            user agent, if the request was proxied. Typical values are
            'http' or 'https'.

            The following request headers are checked, in order of
            preference, to determine the forwarded scheme:

                - ``Forwarded``
                - ``X-Forwarded-For``

            If none of these headers are available, or if the
            Forwarded header is available but does not contain a
            \"proto\" parameter in the first hop, the value of
            :attr:`scheme` is returned instead.

            (See also: RFC 7239, Section 1)

        protocol (str): Deprecated alias for `scheme`. Will be removed
            in a future release.
        method (str): HTTP method requested (e.g., 'GET', 'POST', etc.)
        host (str): Host request header field
        forwarded_host (str): Original host request header as received
            by the first proxy in front of the application server.

            The following request headers are checked, in order of
            preference, to determine the forwarded scheme:

                - ``Forwarded``
                - ``X-Forwarded-Host``

            If none of the above headers are available, or if the
            Forwarded header is available but the \"host\"
            parameter is not included in the first hop, the value of
            :attr:`host` is returned instead.

            Note:
                Reverse proxies are often configured to set the Host
                header directly to the one that was originally
                requested by the user agent; in that case, using
                :attr:`host` is sufficient.

            (See also: RFC 7239, Section 4)

        port (int): Port used for the request. If the request URI does
            not specify a port, the default one for the given schema is
            returned (80 for HTTP and 443 for HTTPS).
        netloc (str): Returns the 'host:port' portion of the request
            URL. The port may be ommitted if it is the default one for
            the URL's schema (80 for HTTP and 443 for HTTPS).
        subdomain (str): Leftmost (i.e., most specific) subdomain from the
            hostname. If only a single domain name is given, `subdomain`
            will be ``None``.

            Note:
                If the hostname in the request is an IP address, the value
                for `subdomain` is undefined.

        app (str): The initial portion of the request URI's path that
            corresponds to the application object, so that the
            application knows its virtual \"location\". This may be an
            empty string, if the application corresponds to the \"root\"
            of the server.

            (Corresponds to the \"SCRIPT_NAME\" environ variable defined
            by PEP-3333.)
        uri (str): The fully-qualified URI for the request.
        url (str): Alias for `uri`.
        forwarded_uri (str): Original URI for proxied requests. Uses
            :attr:`forwarded_scheme` and :attr:`forwarded_host` in
            order to reconstruct the original URI requested by the user
            agent.
        relative_uri (str): The path and query string portion of the
            request URI, omitting the scheme and host.
        prefix (str): The prefix of the request URI, including scheme,
            host, and WSGI app (if any).
        forwarded_prefix (str): The prefix of the original URI for
            proxied requests. Uses :attr:`forwarded_scheme` and
            :attr:`forwarded_host` in order to reconstruct the
            original URI.
        path (str): Path portion of the request URI (not including query
            string).

            Note:
                `req.path` may be set to a new value by a `process_request()`
                middleware method in order to influence routing.
        query_string (str): Query string portion of the request URI, without
            the preceding '?' character.
        uri_template (str): The template for the route that was matched for
            this request. May be ``None`` if the request has not yet been
            routed, as would be the case for `process_request()` middleware
            methods. May also be ``None`` if your app uses a custom routing
            engine and the engine does not provide the URI template when
            resolving a route.
        remote_addr(str): IP address of the closest client or proxy to
            the WSGI server.

            This property is determined by the value of ``REMOTE_ADDR``
            in the WSGI environment dict. Since this address is not
            derived from an HTTP header, clients and proxies can not
            forge it.

            Note:
                If your application is behind one or more reverse
                proxies, you can use :py:attr:`~.access_route`
                to retrieve the real IP address of the client.
        access_route(list): IP address of the original client, as well
            as any known addresses of proxies fronting the WSGI server.

            The following request headers are checked, in order of
            preference, to determine the addresses:

                - ``Forwarded``
                - ``X-Forwarded-For``
                - ``X-Real-IP``

            If none of these headers are available, the value of
            :py:attr:`~.remote_addr` is used instead.

            Note:
                Per `RFC 7239`_, the access route may contain \"unknown\"
                and obfuscated identifiers, in addition to IPv4 and
                IPv6 addresses

                .. _RFC 7239: https://tools.ietf.org/html/rfc7239

            Warning:
                Headers can be forged by any client or proxy. Use this
                property with caution and validate all values before
                using them. Do not rely on the access route to authorize
                requests.

        forwarded (list): Value of the Forwarded header, as a parsed list
            of :class:`falcon.Forwarded` objects, or ``None`` if the header
            is missing.

            (See also: RFC 7239, Section 4)
        date (datetime): Value of the Date header, converted to a
            ``datetime`` instance. The header value is assumed to
            conform to RFC 1123.
        auth (str): Value of the Authorization header, or ``None`` if the
            header is missing.
        user_agent (str): Value of the User-Agent header, or ``None`` if the
            header is missing.
        referer (str): Value of the Referer header, or ``None`` if
            the header is missing.
        accept (str): Value of the Accept header, or '*/*' if the header is
            missing.
        client_accepts_json (bool): ``True`` if the Accept header indicates
            that the client is willing to receive JSON, otherwise ``False``.
        client_accepts_msgpack (bool): ``True`` if the Accept header indicates
            that the client is willing to receive MessagePack, otherwise
            ``False``.
        client_accepts_xml (bool): ``True`` if the Accept header indicates that
            the client is willing to receive XML, otherwise ``False``.
        cookies (dict):
            A dict of name/value cookie pairs. (See also:
            :ref:`Getting Cookies <getting-cookies>`)
        content_type (str): Value of the Content-Type header, or ``None`` if
            the header is missing.
        content_length (int): Value of the Content-Length header converted
            to an ``int``, or ``None`` if the header is missing.
        stream: File-like input object for reading the body of the
            request, if any. This object provides direct access to the
            server's data stream and is non-seekable. In order to
            avoid unintended side effects, and to provide maximum
            flexibility to the application, Falcon itself does not
            buffer or spool the data in any way.

            Since this object is provided by the WSGI
            server itself, rather than by Falcon, it may behave
            differently depending on how you host your app. For example,
            attempting to read more bytes than are expected (as
            determined by the Content-Length header) may or may not
            block indefinitely. It's a good idea to test your WSGI
            server to find out how it behaves.

            This can be particulary problematic when a request body is
            expected, but none is given. In this case, the following
            call blocks under certain WSGI servers::

                # Blocks if Content-Length is 0
                data = req.stream.read()

            The workaround is fairly straightforward, if verbose::

                # If Content-Length happens to be 0, or the header is
                # missing altogether, this will not block.
                data = req.stream.read(req.content_length or 0)

            Alternatively, when passing the stream directly to a
            consumer, it may be necessary to branch off the
            value of the Content-Length header::

                if req.content_length:
                    doc = json.load(req.stream)

            For a slight performance cost, you may instead wish to use
            :py:attr:`bounded_stream`, which wraps the native WSGI
            input object to normalize its behavior.

            Note:
                If an HTML form is POSTed to the API using the
                *application/x-www-form-urlencoded* media type, and
                the :py:attr:`~.RequestOptions.auto_parse_form_urlencoded`
                option is set, the framework
                will consume `stream` in order to parse the parameters
                and merge them into the query string parameters. In this
                case, the stream will be left at EOF.

        bounded_stream: File-like wrapper around `stream` to normalize
            certain differences between the native input objects
            employed by different WSGI servers. In particular,
            `bounded_stream` is aware of the expected Content-Length of
            the body, and will never block on out-of-bounds reads,
            assuming the client does not stall while transmitting the
            data to the server.

            For example, the following will not block when
            Content-Length is 0 or the header is missing altogether::

                data = req.bounded_stream.read()

            This is also safe::

                doc = json.load(req.bounded_stream)

        expect (str): Value of the Expect header, or ``None`` if the
            header is missing.
        media (object): Returns a deserialized form of the request stream.
            When called, it will attempt to deserialize the request stream
            using the Content-Type header as well as the media-type handlers
            configured via :class:`falcon.RequestOptions`.

            See :ref:`media` for more information regarding media handling.

            Warning:
                This operation will consume the request stream the first time
                it's called and cache the results. Follow-up calls will just
                retrieve a cached version of the object.

        range (tuple of int): A 2-member ``tuple`` parsed from the value of the
            Range header.

            The two members correspond to the first and last byte
            positions of the requested resource, inclusive. Negative
            indices indicate offset from the end of the resource,
            where -1 is the last byte, -2 is the second-to-last byte,
            and so forth.

            Only continous ranges are supported (e.g., \"bytes=0-0,-1\" would
            result in an HTTPBadRequest exception when the attribute is
            accessed.)
        range_unit (str): Unit of the range parsed from the value of the
            Range header, or ``None`` if the header is missing
        if_match (str): Value of the If-Match header, or ``None`` if the
            header is missing.
        if_none_match (str): Value of the If-None-Match header, or ``None``
            if the header is missing.
        if_modified_since (datetime): Value of the If-Modified-Since header,
            or ``None`` if the header is missing.
        if_unmodified_since (datetime): Value of the If-Unmodified-Since
            header, or ``None`` if the header is missing.
        if_range (str): Value of the If-Range header, or ``None`` if the
            header is missing.

        headers (dict): Raw HTTP headers from the request with
            canonical dash-separated names. Parsing all the headers
            to create this dict is done the first time this attribute
            is accessed. This parsing can be costly, so unless you
            need all the headers in this format, you should use the
            `get_header` method or one of the convenience attributes
            instead, to get a value for a specific header.

        params (dict): The mapping of request query parameter names to their
            values.  Where the parameter appears multiple times in the query
            string, the value mapped to that parameter key will be a list of
            all the values in the order seen.

        options (dict): Set of global options passed from the API handler.
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [17375 17936])
                    ("context_type" variable nil (reparse-symbol indented_block_body) [17980 17999])
                    ("_wsgi_input_type_known" variable nil (reparse-symbol indented_block_body) [18005 18035])
                    ("_always_wrap_wsgi_input" variable nil (reparse-symbol indented_block_body) [18040 18071])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [18124 18138])
                            ("RequestOptions" code nil (reparse-symbol indented_block_body) [18186 18202])
                            ("self" variable nil (reparse-symbol indented_block_body) [18212 18249])
                            ("self" variable nil (reparse-symbol indented_block_body) [18258 18293])
                            ("self" variable nil (reparse-symbol indented_block_body) [18303 18327])
                            ("self" variable nil (reparse-symbol indented_block_body) [18336 18354])
                            ("path" code nil (reparse-symbol indented_block_body) [18488 18518])
                            ("if" code nil (reparse-symbol indented_block_body) [18528 18743])
                            ("if" code nil (reparse-symbol indented_block_body) [18752 18936])
                            ("try" code nil (reparse-symbol indented_block_body) [19019 19516])
                            ("self" variable nil (reparse-symbol indented_block_body) [19525 19545])
                            ("self" variable nil (reparse-symbol indented_block_body) [19555 19587])
                            ("self" variable nil (reparse-symbol indented_block_body) [19596 19625])
                            ("self" variable nil (reparse-symbol indented_block_body) [19634 19670])
                            ("self" variable nil (reparse-symbol indented_block_body) [19679 19712])
                            ("self" variable nil (reparse-symbol indented_block_body) [19721 19748])
                            ("self" variable nil (reparse-symbol indented_block_body) [19757 19783])
                            ("self" variable nil (reparse-symbol indented_block_body) [19792 19824])
                            ("self" variable nil (reparse-symbol indented_block_body) [19833 19856])
                            ("try" code nil (reparse-symbol indented_block_body) [19866 19990])
                            ("if" code nil (reparse-symbol indented_block_body) [20395 20634])
                            ("if" code nil (reparse-symbol indented_block_body) [20643 21031])
                            ("if" code nil (reparse-symbol indented_block_body) [21222 21779])
                            ("self" variable nil (reparse-symbol indented_block_body) [21788 21822]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18090 18094])
                            ("env" variable nil (reparse-symbol function_parameters) [18096 18099])
                            ("options" variable nil (reparse-symbol function_parameters) [18101 18108]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18077 21823])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21841 21845]))                          )
                        (reparse-symbol indented_block_body) [21828 21928])
                    ("user_agent" variable nil (reparse-symbol indented_block_body) [22109 22164])
                    ("auth" variable nil (reparse-symbol indented_block_body) [22169 22221])
                    ("expect" variable nil (reparse-symbol indented_block_body) [22227 22274])
                    ("if_match" variable nil (reparse-symbol indented_block_body) [22280 22331])
                    ("if_none_match" variable nil (reparse-symbol indented_block_body) [22336 22397])
                    ("if_range" variable nil (reparse-symbol indented_block_body) [22402 22453])
                    ("referer" variable nil (reparse-symbol indented_block_body) [22459 22508])
                    ("forwarded" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22542 22546]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22514 25627])
                    ("client_accepts_json" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25670 25674]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25632 25732])
                    ("client_accepts_msgpack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25778 25782]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25737 25909])
                    ("client_accepts_xml" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25951 25955]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25914 26012])
                    ("accept" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26042 26046]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26017 26255])
                    ("content_length" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26293 26297]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26260 27214])
                    ("bounded_stream" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27252 27256]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [27219 27403])
                    ("date" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27431 27435]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [27408 27489])
                    ("if_modified_since" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27530 27534]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [27494 27601])
                    ("if_unmodified_since" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27644 27648]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [27606 27717])
                    ("range" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27746 27750]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [27722 28983])
                    ("range_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29017 29021]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [28988 29410])
                    ("app" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29437 29441]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [29415 29861])
                    ("scheme" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29891 29895]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [29866 29941])
                    ("forwarded_scheme" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29981 29985]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [29946 30877])
                    ("protocol" variable nil (reparse-symbol indented_block_body) [30946 30963])
                    ("uri" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30991 30995]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30969 31434])
                    ("url" variable nil (reparse-symbol indented_block_body) [31439 31448])
                    ("forwarded_uri" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31486 31490]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31454 31932])
                    ("relative_uri" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31968 31972]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31937 32318])
                    ("prefix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32348 32352]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [32323 32590])
                    ("forwarded_prefix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32630 32634]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [32595 32904])
                    ("host" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32932 32936]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [32909 33415])
                    ("forwarded_host" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33453 33457]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33420 34293])
                    ("subdomain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34326 34330]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [34298 34503])
                    ("headers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34534 34538]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [34508 35260])
                    ("params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35290 35294]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35265 35325])
                    ("cookies" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35356 35360]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35330 36070])
                    ("access_route" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36106 36110]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [36075 37618])
                    ("remote_addr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37653 37657]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [37623 37703])
                    ("port" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37731 37735]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [37708 38317])
                    ("netloc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38347 38351]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [38322 39076])
                    ("media" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39105 39109]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [39081 39498])
                    ("client_accepts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39695 39699])
                            ("media_type" variable nil (reparse-symbol function_parameters) [39701 39711]))                          
                        :documentation "Determines whether or not the client accepts a given media type.

        Args:
            media_type (str): An Internet media type to check.

        Returns:
            bool: ``True`` if the client has indicated in the Accept header
            that it accepts the specified media type. Otherwise, returns
            ``False``.
        ")
                        (reparse-symbol indented_block_body) [39676 40441])
                    ("client_prefers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40465 40469])
                            ("media_types" variable nil (reparse-symbol function_parameters) [40471 40482]))                          
                        :documentation "Returns the client's preferred media type, given several choices.

        Args:
            media_types (iterable of str): One or more Internet media types
                from which to choose the client's preferred type. This value
                **must** be an iterable collection of strings.

        Returns:
            str: The client's preferred media type, based on the Accept
            header. Returns ``None`` if the client does not accept any
            of the given types.
        ")
                        (reparse-symbol indented_block_body) [40446 41354])
                    ("get_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41374 41378])
                            ("name" variable nil (reparse-symbol function_parameters) [41380 41384])
                            ("required" variable nil (reparse-symbol function_parameters) [41386 41394])
                            ("default" variable nil (reparse-symbol function_parameters) [41402 41409]))                          
                        :documentation "Retrieve the raw string value for the given header.

        Args:
            name (str): Header name, case-insensitive (e.g., 'Content-Type')

        Keyword Args:
            required (bool): Set to ``True`` to raise
                ``HTTPBadRequest`` instead of returning gracefully when the
                header is not found (default ``False``).
            default (any): Value to return if the header
                is not found (default ``None``).

        Returns:
            str: The value of the specified header if it exists, or
            the default value if the header is not found and is not
            required.

        Raises:
            HTTPBadRequest: The header was not found in the request, but
                it was required.

        ")
                        (reparse-symbol indented_block_body) [41359 43182])
                    ("get_header_as_datetime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43214 43218])
                            ("header" variable nil (reparse-symbol function_parameters) [43220 43226])
                            ("required" variable nil (reparse-symbol function_parameters) [43228 43236])
                            ("obs_date" variable nil (reparse-symbol function_parameters) [43244 43252]))                          
                        :documentation "Return an HTTP header with HTTP-Date values as a datetime.

        Args:
            name (str): Header name, case-insensitive (e.g., 'Date')

        Keyword Args:
            required (bool): Set to ``True`` to raise
                ``HTTPBadRequest`` instead of returning gracefully when the
                header is not found (default ``False``).
            obs_date (bool): Support obs-date formats according to
                RFC 7231, e.g.: \"Sunday, 06-Nov-94 08:49:37 GMT\"
                (default ``False``).

        Returns:
            datetime: The value of the specified header if it exists,
            or ``None`` if the header is not found and is not required.

        Raises:
            HTTPBadRequest: The header was not found in the request, but
                it was required.
            HttpInvalidHeader: The header contained a malformed/invalid value.
        ")
                        (reparse-symbol indented_block_body) [43187 44620])
                    ("get_param" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44639 44643])
                            ("name" variable nil (reparse-symbol function_parameters) [44645 44649])
                            ("required" variable nil (reparse-symbol function_parameters) [44651 44659])
                            ("store" variable nil (reparse-symbol function_parameters) [44667 44672])
                            ("default" variable nil (reparse-symbol function_parameters) [44679 44686]))                          
                        :documentation "Return the raw value of a query string parameter as a string.

        Note:
            If an HTML form is POSTed to the API using the
            *application/x-www-form-urlencoded* media type, Falcon can
            automatically parse the parameters from the request body
            and merge them into the query string parameters. To enable
            this functionality, set
            :py:attr:`~.RequestOptions.auto_parse_form_urlencoded` to
            ``True`` via :any:`API.req_options`.

            If a key appears more than once in the form data, one of the
            values will be returned as a string, but it is undefined which
            one. Use `req.get_param_as_list()` to retrieve all the values.

        Note:
            Similar to the way multiple keys in form data is handled,
            if a query parameter is assigned a comma-separated list of
            values (e.g., 'foo=a,b,c'), only one of those values will be
            returned, and it is undefined which one. Use
            `req.get_param_as_list()` to retrieve all the values.

        Args:
            name (str): Parameter name, case-sensitive (e.g., 'sort').

        Keyword Args:
            required (bool): Set to ``True`` to raise
                ``HTTPBadRequest`` instead of returning ``None`` when the
                parameter is not found (default ``False``).
            store (dict): A ``dict``-like object in which to place
                the value of the param, but only if the param is present.
            default (any): If the param is not found returns the
                given value instead of None

        Returns:
            str: The value of the param as a string, or ``None`` if param is
            not found and is not required.

        Raises:
            HTTPBadRequest: A required param is missing from the request.

        ")
                        (reparse-symbol indented_block_body) [44625 47304])
                    ("get_param_as_int" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47330 47334])
                            ("name" variable nil (reparse-symbol function_parameters) [47336 47340])
                            ("required" variable nil (reparse-symbol function_parameters) [47367 47375])
                            ("min" variable nil (reparse-symbol function_parameters) [47383 47386])
                            ("max" variable nil (reparse-symbol function_parameters) [47393 47396])
                            ("store" variable nil (reparse-symbol function_parameters) [47403 47408]))                          
                        :documentation "Return the value of a query string parameter as an int.

        Args:
            name (str): Parameter name, case-sensitive (e.g., 'limit').

        Keyword Args:
            required (bool): Set to ``True`` to raise
                ``HTTPBadRequest`` instead of returning ``None`` when the
                parameter is not found or is not an integer (default
                ``False``).
            min (int): Set to the minimum value allowed for this
                param. If the param is found and it is less than min, an
                ``HTTPError`` is raised.
            max (int): Set to the maximum value allowed for this
                param. If the param is found and its value is greater than
                max, an ``HTTPError`` is raised.
            store (dict): A ``dict``-like object in which to place
                the value of the param, but only if the param is found
                (default ``None``).

        Returns:
            int: The value of the param if it is found and can be converted to
            an integer. If the param is not found, returns ``None``, unless
            `required` is ``True``.

        Raises
            HTTPBadRequest: The param was not found in the request, even though
                it was required to be there. Also raised if the param's value
                falls outside the given interval, i.e., the value must be in
                the interval: min <= value <= max to avoid triggering an error.

        ")
                        (reparse-symbol indented_block_body) [47309 49930])
                    ("get_param_as_bool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49957 49961])
                            ("name" variable nil (reparse-symbol function_parameters) [49963 49967])
                            ("required" variable nil (reparse-symbol function_parameters) [49969 49977])
                            ("store" variable nil (reparse-symbol function_parameters) [49985 49990])
                            ("blank_as_true" variable nil (reparse-symbol function_parameters) [50023 50036]))                          
                        :documentation "Return the value of a query string parameter as a boolean

        The following boolean strings are supported::

            TRUE_STRINGS = ('true', 'True', 'yes', '1', 'on')
            FALSE_STRINGS = ('false', 'False', 'no', '0', 'off')

        Args:
            name (str): Parameter name, case-sensitive (e.g., 'detailed').

        Keyword Args:
            required (bool): Set to ``True`` to raise
                ``HTTPBadRequest`` instead of returning ``None`` when the
                parameter is not found or is not a recognized boolean
                string (default ``False``).
            store (dict): A ``dict``-like object in which to place
                the value of the param, but only if the param is found (default
                ``None``).
            blank_as_true (bool): If ``True``, an empty string value will be
                treated as ``True`` (default ``False``). Normally empty strings
                are ignored; if you would like to recognize such parameters, you
                must set the `keep_blank_qs_values` request option to ``True``.
                Request options are set globally for each instance of
                ``falcon.API`` through the `req_options` attribute.

        Returns:
            bool: The value of the param if it is found and can be converted
            to a ``bool``. If the param is not found, returns ``None``
            unless required is ``True``.

        Raises:
            HTTPBadRequest: A required param is missing from the request.

        ")
                        (reparse-symbol indented_block_body) [49935 52442])
                    ("get_param_as_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52469 52473])
                            ("name" variable nil (reparse-symbol function_parameters) [52475 52479])
                            ("transform" variable nil (reparse-symbol function_parameters) [52507 52516])
                            ("required" variable nil (reparse-symbol function_parameters) [52523 52531])
                            ("store" variable nil (reparse-symbol function_parameters) [52539 52544]))                          
                        :documentation "Return the value of a query string parameter as a list.

        List items must be comma-separated or must be provided
        as multiple instances of the same param in the query string
        ala *application/x-www-form-urlencoded*.

        Args:
            name (str): Parameter name, case-sensitive (e.g., 'ids').

        Keyword Args:
            transform (callable): An optional transform function
                that takes as input each element in the list as a ``str`` and
                outputs a transformed element for inclusion in the list that
                will be returned. For example, passing ``int`` will
                transform list items into numbers.
            required (bool): Set to ``True`` to raise ``HTTPBadRequest``
                instead of returning ``None`` when the parameter is not
                found (default ``False``).
            store (dict): A ``dict``-like object in which to place
                the value of the param, but only if the param is found (default
                ``None``).

        Returns:
            list: The value of the param if it is found. Otherwise, returns
            ``None`` unless required is True. Empty list elements will be
            discarded. For example, the following query strings would
            both result in `['1', '3']`::

                things=1,,3
                things=1&things=&things=3

        Raises:
            HTTPBadRequest: A required param is missing from the request.
            HTTPInvalidParam: A transform function raised an instance of
                ``ValueError``.

        ")
                        (reparse-symbol indented_block_body) [52447 55353])
                    ("get_param_as_datetime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55384 55388])
                            ("name" variable nil (reparse-symbol function_parameters) [55390 55394])
                            ("format_string" variable nil (reparse-symbol function_parameters) [55396 55409])
                            ("required" variable nil (reparse-symbol function_parameters) [55462 55470])
                            ("store" variable nil (reparse-symbol function_parameters) [55478 55483]))                          
                        :documentation "Return the value of a query string parameter as a datetime.

        Args:
            name (str): Parameter name, case-sensitive (e.g., 'ids').

        Keyword Args:
            format_string (str): String used to parse the param value
                into a datetime. Any format recognized by strptime() is
                supported (default ``'%Y-%m-%dT%H:%M:%SZ'``).
            required (bool): Set to ``True`` to raise
                ``HTTPBadRequest`` instead of returning ``None`` when the
                parameter is not found (default ``False``).
            store (dict): A ``dict``-like object in which to place
                the value of the param, but only if the param is found (default
                ``None``).
        Returns:
            datetime.datetime: The value of the param if it is found and can be
            converted to a ``datetime`` according to the supplied format
            string. If the param is not found, returns ``None`` unless
            required is ``True``.

        Raises:
            HTTPBadRequest: A required param is missing from the request.
            HTTPInvalidParam: A transform function raised an instance of
                ``ValueError``.
        ")
                        (reparse-symbol indented_block_body) [55358 57158])
                    ("get_param_as_date" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57185 57189])
                            ("name" variable nil (reparse-symbol function_parameters) [57191 57195])
                            ("format_string" variable nil (reparse-symbol function_parameters) [57197 57210])
                            ("required" variable nil (reparse-symbol function_parameters) [57249 57257])
                            ("store" variable nil (reparse-symbol function_parameters) [57265 57270]))                          
                        :documentation "Return the value of a query string parameter as a date.

        Args:
            name (str): Parameter name, case-sensitive (e.g., 'ids').

        Keyword Args:
            format_string (str): String used to parse the param value
                into a date. Any format recognized by strptime() is
                supported (default ``\"%Y-%m-%d\"``).
            required (bool): Set to ``True`` to raise
                ``HTTPBadRequest`` instead of returning ``None`` when the
                parameter is not found (default ``False``).
            store (dict): A ``dict``-like object in which to place
                the value of the param, but only if the param is found (default
                ``None``).
        Returns:
            datetime.date: The value of the param if it is found and can be
            converted to a ``date`` according to the supplied format
            string. If the param is not found, returns ``None`` unless
            required is ``True``.

        Raises:
            HTTPBadRequest: A required param is missing from the request.
            HTTPInvalidParam: A transform function raised an instance of
                ``ValueError``.
        ")
                        (reparse-symbol indented_block_body) [57163 58738])
                    ("get_param_as_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58765 58769])
                            ("name" variable nil (reparse-symbol function_parameters) [58771 58775])
                            ("required" variable nil (reparse-symbol function_parameters) [58777 58785])
                            ("store" variable nil (reparse-symbol function_parameters) [58793 58798]))                          
                        :documentation "Return the value of a query string parameter as a dict.

        Given a JSON value, parse and return it as a dict.

        Args:
            name (str): Parameter name, case-sensitive (e.g., 'payload').

        Keyword Args:
            required (bool): Set to ``True`` to raise ``HTTPBadRequest``
                instead of returning ``None`` when the parameter is not
                found (default ``False``).
            store (dict): A ``dict``-like object in which to place the
                value of the param, but only if the param is found
                (default ``None``).

        Returns:
            dict: The value of the param if it is found. Otherwise, returns
            ``None`` unless required is ``True``.

        Raises:
            HTTPBadRequest: A required param is missing from the request.
            HTTPInvalidParam: The parameter's value could not be parsed as JSON.
        ")
                        (reparse-symbol indented_block_body) [58743 60124])
                    ("log_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60143 60147])
                            ("message" variable nil (reparse-symbol function_parameters) [60149 60156]))                          
                        :documentation "Write an error message to the server's log.

        Prepends timestamp and request info to message, and writes the
        result out to the WSGI server's error stream (`wsgi.error`).

        Args:
            message (str or unicode): Description of the problem. On Python 2,
                instances of ``unicode`` will be converted to UTF-8.

        ")
                        (reparse-symbol indented_block_body) [60129 61126])
                    ("_get_wrapped_wsgi_input" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61332 61336]))                          )
                        (reparse-symbol indented_block_body) [61304 61836])
                    ("_parse_form_urlencoded" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61868 61872]))                          )
                        (reparse-symbol indented_block_body) [61841 62808]))                  
                :type "class")
                nil [2079 62808])
            ("RequestOptions" type
               (:documentation "Defines a set of configurable request options.

    An instance of this class is exposed via :any:`API.req_options` for
    configuring certain :py:class:`~.Request` behaviors.

    Attributes:
        keep_blank_qs_values (bool): Set to ``True`` to keep query string
            fields even if they do not have a value (default ``False``).
            For comma-separated values, this option also determines
            whether or not empty elements in the parsed list are
            retained.

        auto_parse_form_urlencoded: Set to ``True`` in order to
            automatically consume the request stream and merge the
            results into the request's query string params when the
            request's content type is
            *application/x-www-form-urlencoded* (default ``False``).

            Enabling this option makes the form parameters accessible
            via :attr:`~.params`, :meth:`~.get_param`, etc.

            Warning:
                When this option is enabled, the request's body
                stream will be left at EOF. The original data is
                not retained by the framework.

            Note:
                The character encoding for fields, before
                percent-encoding non-ASCII bytes, is assumed to be
                UTF-8. The special `_charset_` field is ignored if
                present.

                Falcon expects form-encoded request bodies to be
                encoded according to the standard W3C algorithm (see
                also http://goo.gl/6rlcux).

        auto_parse_qs_csv: Set to ``False`` to treat commas in a query
            string value as literal characters, rather than as a comma-
            separated list (default ``True``). When this option is
            enabled, the value will be split on any non-percent-encoded
            commas. Disable this option when encoding lists as multiple
            occurrences of the same parameter, and when values may be
            encoded in alternative formats in which the comma character
            is significant.

        strip_url_path_trailing_slash: Set to ``False`` in order to
            retain a trailing slash, if present, at the end of the URL
            path (default ``True``). When this option is enabled,
            the URL path is normalized by stripping the trailing slash
            character. This lets the application define a single route
            to a resource for a path that may or may not end in a
            forward slash. However, this behavior can be problematic in
            certain cases, such as when working with authentication
            schemes that employ URL-based signatures.

        default_media_type (str): The default media-type to use when
            deserializing a response. This value is normally set to the media
            type provided when a :class:`falcon.API` is initialized; however,
            if created independently, this will default to the
            ``DEFAULT_MEDIA_TYPE`` specified by Falcon.

        media_handlers (Handlers): A dict-like object that allows you to
            configure the media-types that you would like to handle.
            By default, a handler is provided for the ``application/json``
            media type.
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [66198 66413])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [66447 66480])
                            ("self" variable nil (reparse-symbol indented_block_body) [66489 66528])
                            ("self" variable nil (reparse-symbol indented_block_body) [66537 66566])
                            ("self" variable nil (reparse-symbol indented_block_body) [66575 66616])
                            ("self" variable nil (reparse-symbol indented_block_body) [66625 66669])
                            ("self" variable nil (reparse-symbol indented_block_body) [66678 66710]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66432 66436]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [66419 66711]))                  
                :type "class")
                nil [62882 66711])
            ("Forwarded" type
               (:documentation "Represents a parsed Forwarded header.

    (See also: RFC 7239, Section 4)

    Attributes:
        src (str): The value of the \"for\" parameter, or
            ``None`` if the parameter is absent. Identifies the
            node making the request to the proxy.
        dest (str): The value of the \"by\" parameter, or
            ``None`` if the parameter is absent. Identifies the
            client-facing interface of the proxy.
        host (str): The value of the \"host\" parameter, or
            ``None`` if the parameter is absent. Provides the host
            request header field as received by the proxy.
        scheme (str): The value of the \"proto\" parameter, or
            ``None`` if the parameter is absent. Indicates the
            protocol that was used to make the request to
            the proxy.
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [67735 67780])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [67814 67829])
                            ("self" variable nil (reparse-symbol indented_block_body) [67838 67854])
                            ("self" variable nil (reparse-symbol indented_block_body) [67863 67879])
                            ("self" variable nil (reparse-symbol indented_block_body) [67888 67906]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67799 67803]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [67786 67907]))                  
                :type "class")
                nil [66713 67907]))          
    :file "request.py"
    :pointmax 67907
    :fsize 67906
    :lastmodtime '(23079 49428 609413 0)
    :unmatched-syntax '((NAME 37812 . 37824) (IF 37830 . 37832) (ELSE 37871 . 37875) (RETURN 34469 . 34475) (IF 34486 . 34488) (ELSE 34493 . 34497) (NAME 18147 . 18151) (IF 18170 . 18172) (ELSE 18181 . 18185))
    )
   (semanticdb-table "errors.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"HTTP error classes.

This module implements a collection of `falcon.HTTPError`
specializations that can be raised to generate a 4xx or 5xx HTTP
response. All classes are available directly from the `falcon`
package namespace::

    import falcon

    class MessageResource(object):
        def on_get(self, req, resp):

            # ...

            raise falcon.HTTPBadRequest(
                'TTL Out of Range',
                'The message's TTL must be between 60 and 300 seconds, inclusive.'
            )

            # ...

\"\"\"" code nil nil [591 1130])
            ("datetime" include nil nil [1132 1161])
            ("falcon" include nil nil [1163 1186])
            ("falcon.http_error" include nil nil [1187 1274])
            ("falcon.status_codes" include nil nil [1275 1311])
            ("HTTPBadRequest" type
               (:documentation "400 Bad Request.

    The server cannot or will not process the request due to something
    that is perceived to be a client error (e.g., malformed request
    syntax, invalid request message framing, or deceptive request
    routing).

    (See also: RFC 7231, Section 6.5.1)

    Keyword Args:
        title (str): Error title (default '400 Bad Request').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3233 3361]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3178 3182])
                            ("title" variable nil (reparse-symbol function_parameters) [3184 3189])
                            ("description" variable nil (reparse-symbol function_parameters) [3196 3207])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3214 3222]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3165 3362]))                  
                :type "class")
                nil [1314 3362])
            ("HTTPUnauthorized" type
               (:documentation "401 Unauthorized.

    The request has not been applied because it lacks valid
    authentication credentials for the target resource.

    The server generating a 401 response MUST send a WWW-Authenticate
    header field containing at least one challenge applicable to the
    target resource.

    If the request included authentication credentials, then the 401
    response indicates that authorization has been refused for those
    credentials. The user agent MAY repeat the request with a new or
    replaced Authorization header field. If the 401 response contains
    the same challenge as the prior response, and the user agent has
    already attempted authentication at least once, then the user agent
    SHOULD present the enclosed representation to the user, since it
    usually contains relevant diagnostic information.

    (See also: RFC 7235, Section 3.1)

    Keyword Args:
        title (str): Error title (default '401 Unauthorized').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        challenges (iterable of str): One or more authentication
            challenges to use as the value of the WWW-Authenticate header in
            the response.

            (See also: RFC 7235, Section 2.1)

        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).

    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("headers" variable nil (reparse-symbol indented_block_body) [6119 6161])
                            ("if" code nil (reparse-symbol indented_block_body) [6171 6250])
                            ("super" code nil (reparse-symbol indented_block_body) [6259 6391]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6047 6051])
                            ("title" variable nil (reparse-symbol function_parameters) [6053 6058])
                            ("description" variable nil (reparse-symbol function_parameters) [6065 6076])
                            ("challenges" variable nil (reparse-symbol function_parameters) [6083 6093])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6100 6108]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6034 6392]))                  
                :type "class")
                nil [3364 6392])
            ("HTTPForbidden" type
               (:documentation "403 Forbidden.

    The server understood the request but refuses to authorize it.

    A server that wishes to make public why the request has been
    forbidden can describe that reason in the response payload (if any).

    If authentication credentials were provided in the request, the
    server considers them insufficient to grant access. The client
    SHOULD NOT automatically repeat the request with the same
    credentials. The client MAY repeat the request with new or different
    credentials. However, a request might be forbidden for reasons
    unrelated to the credentials.

    An origin server that wishes to \"hide\" the current existence of a
    forbidden target resource MAY instead respond with a status code of
    404 Not Found.

    (See also: RFC 7231, Section 6.5.4)

    Keyword Args:
        title (str): Error title (default '403 Forbidden').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [8829 8955]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8774 8778])
                            ("title" variable nil (reparse-symbol function_parameters) [8780 8785])
                            ("description" variable nil (reparse-symbol function_parameters) [8792 8803])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8810 8818]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8761 8956]))                  
                :type "class")
                nil [6394 8956])
            ("HTTPNotFound" type
               (:documentation "404 Not Found.

    The origin server did not find a current representation for the
    target resource or is not willing to disclose that one exists.

    A 404 status code does not indicate whether this lack of
    representation is temporary or permanent; the 410 Gone status code
    is preferred over 404 if the origin server knows, presumably through
    some configurable means, that the condition is likely to be
    permanent.

    A 404 response is cacheable by default; i.e., unless otherwise
    indicated by the method definition or explicit cache controls.

    (See also: RFC 7231, Section 6.5.3)

    Keyword Args:
        title (str): Human-friendly error title. If not provided, and
            `description` is also not provided, no body will be included
            in the response.
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two (default ``None``).
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("OptionalRepresentation" "HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [11332 11393]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11307 11311])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11313 11321]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11294 11394]))                  
                :type "class")
                nil [8958 11394])
            ("HTTPMethodNotAllowed" type
               (:documentation "405 Method Not Allowed.

    The method received in the request-line is known by the origin
    server but not supported by the target resource.

    The origin server MUST generate an Allow header field in a 405
    response containing a list of the target resource's currently
    supported methods.

    A 405 response is cacheable by default; i.e., unless otherwise
    indicated by the method definition or explicit cache controls.

    (See also: RFC 7231, Section 6.5.5)

    Args:
        allowed_methods (list of str): Allowed HTTP methods for this
            resource (e.g., ``['GET', 'POST', 'HEAD']``).

    Keyword Args:
        title (str): Human-friendly error title. If not provided, and
            `description` is also not provided, no body will be included
            in the response.
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two (default ``None``).
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("OptionalRepresentation" "HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("new_headers" variable nil (reparse-symbol indented_block_body) [13799 13850])
                            ("super" code nil (reparse-symbol indented_block_body) [13859 13979])
                            ("if" code nil (reparse-symbol indented_block_body) [13988 14039])
                            ("self" code nil (reparse-symbol indented_block_body) [14048 14080]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13757 13761])
                            ("allowed_methods" variable nil (reparse-symbol function_parameters) [13763 13778])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [13780 13788]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13744 14081]))                  
                :type "class")
                nil [11396 14081])
            ("HTTPNotAcceptable" type
               (:documentation "406 Not Acceptable.

    The target resource does not have a current representation that
    would be acceptable to the user agent, according to the proactive
    negotiation header fields received in the request, and the server
    is unwilling to supply a default representation.

    The server SHOULD generate a payload containing a list of available
    representation characteristics and corresponding resource
    identifiers from which the user or user agent can choose the one
    most appropriate. A user agent MAY automatically select the most
    appropriate choice from that list. However, this specification does
    not define any standard for such automatic selection, as described
    in RFC 7231, Section 6.4.1

    (See also: RFC 7231, Section 6.5.6)

    Keyword Args:
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [16423 16627]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16380 16384])
                            ("description" variable nil (reparse-symbol function_parameters) [16386 16397])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16404 16412]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16367 16628]))                  
                :type "class")
                nil [14083 16628])
            ("HTTPConflict" type
               (:documentation "409 Conflict.

    The request could not be completed due to a conflict with the
    current state of the target resource. This code is used in
    situations where the user might be able to resolve the conflict and
    resubmit the request.

    The server SHOULD generate a payload that includes enough
    information for a user to recognize the source of the conflict.

    Conflicts are most likely to occur in response to a PUT request. For
    example, if versioning were being used and the representation being
    PUT included changes to a resource that conflict with those made by
    an earlier (third-party) request, the origin server might use a 409
    response to indicate that it can't complete the request. In this
    case, the response representation would likely contain information
    useful for merging the differences based on the revision history.

    (See also: RFC 7231, Section 6.5.8)

    Keyword Args:
        title (str): Error title (default '409 Conflict').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [19180 19304]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19125 19129])
                            ("title" variable nil (reparse-symbol function_parameters) [19131 19136])
                            ("description" variable nil (reparse-symbol function_parameters) [19143 19154])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19161 19169]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19112 19305]))                  
                :type "class")
                nil [16630 19305])
            ("HTTPGone" type
               (:documentation "410 Gone.

    The target resource is no longer available at the origin server and
    this condition is likely to be permanent.

    If the origin server does not know, or has no facility to determine,
    whether or not the condition is permanent, the status code 404 Not
    Found ought to be used instead.

    The 410 response is primarily intended to assist the task of web
    maintenance by notifying the recipient that the resource is
    intentionally unavailable and that the server owners desire that
    remote links to that resource be removed. Such an event is common
    for limited-time, promotional services and for resources belonging
    to individuals no longer associated with the origin server's site.
    It is not necessary to mark all permanently unavailable resources as
    \"gone\" or to keep the mark for any length of time -- that is left to
    the discretion of the server owner.

    A 410 response is cacheable by default; i.e., unless otherwise
    indicated by the method definition or explicit cache controls.

    (See also: RFC 7231, Section 6.5.9)

    Keyword Args:
        title (str): Human-friendly error title. If not provided, and
            `description` is also not provided, no body will be included
            in the response.
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two (default ``None``).
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("OptionalRepresentation" "HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [22152 22209]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22127 22131])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [22133 22141]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22114 22210]))                  
                :type "class")
                nil [19307 22210])
            ("HTTPLengthRequired" type
               (:documentation "411 Length Required.

    The server refuses to accept the request without a defined Content-
    Length.

    The client MAY repeat the request if it adds a valid Content-Length
    header field containing the length of the message body in the
    request message.

    (See also: RFC 7231, Section 6.5.10)

    Keyword Args:
        title (str): Error title (default '411 Length Required').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [24168 24304]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24113 24117])
                            ("title" variable nil (reparse-symbol function_parameters) [24119 24124])
                            ("description" variable nil (reparse-symbol function_parameters) [24131 24142])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [24149 24157]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24100 24305]))                  
                :type "class")
                nil [22212 24305])
            ("HTTPPreconditionFailed" type
               (:documentation "412 Precondition Failed.

    One or more conditions given in the request header fields evaluated
    to false when tested on the server.

    This response code allows the client to place preconditions on the
    current resource state (its current representations and metadata)
    and, thus, prevent the request method from being applied if the
    target resource is in an unexpected state.

    (See also: RFC 7232, Section 4.2)

    Keyword Args:
        title (str): Error title (default '412 Precondition Failed').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [26398 26542]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26343 26347])
                            ("title" variable nil (reparse-symbol function_parameters) [26349 26354])
                            ("description" variable nil (reparse-symbol function_parameters) [26361 26372])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [26379 26387]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26330 26543]))                  
                :type "class")
                nil [24307 26543])
            ("HTTPRequestEntityTooLarge" type
               (:documentation "413 Request Entity Too Large.

    The server is refusing to process a request because the request
    payload is larger than the server is willing or able to process.

    The server MAY close the connection to prevent the client from
    continuing the request.

    If the condition is temporary, the server SHOULD generate a Retry-
    After header field to indicate that it is temporary and after what
    time the client MAY try again.

    (See also: RFC 7231, Section 6.5.11)

    Keyword Args:
        title (str): Error title (default '413 Request Entity Too Large').

        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.

        retry_after (datetime or int): Value for the Retry-After
            header. If a ``datetime`` object, will serialize as an HTTP date.
            Otherwise, a non-negative ``int`` is expected, representing the
            number of seconds to wait.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("headers" variable nil (reparse-symbol indented_block_body) [28972 29014])
                            ("if" code nil (reparse-symbol indented_block_body) [29024 29220])
                            ("super" code nil (reparse-symbol indented_block_body) [29229 29491]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28899 28903])
                            ("title" variable nil (reparse-symbol function_parameters) [28905 28910])
                            ("description" variable nil (reparse-symbol function_parameters) [28917 28928])
                            ("retry_after" variable nil (reparse-symbol function_parameters) [28935 28946])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [28953 28961]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28886 29492]))                  
                :type "class")
                nil [26545 29492])
            ("HTTPUriTooLong" type
               (:documentation "414 URI Too Long.

    The server is refusing to service the request because the request-
    target is longer than the server is willing to interpret.

    This rare condition is only likely to occur when a client has
    improperly converted a POST request to a GET request with long query
    information, when the client has descended into a \"black hole\" of
    redirection (e.g., a redirected URI prefix that points to a suffix
    of itself) or when the server is under attack by a client attempting
    to exploit potential security holes.

    A 414 response is cacheable by default; i.e., unless otherwise
    indicated by the method definition or explicit cache controls.

    (See also: RFC 7231, Section 6.5.12)

    Keyword Args:
        title (str): Error title (default '414 URI Too Long').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two (default ``None``).
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [31879 31962]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31824 31828])
                            ("title" variable nil (reparse-symbol function_parameters) [31830 31835])
                            ("description" variable nil (reparse-symbol function_parameters) [31842 31853])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31860 31868]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31811 31963]))                  
                :type "class")
                nil [29494 31963])
            ("HTTPUnsupportedMediaType" type
               (:documentation "415 Unsupported Media Type.

    The origin server is refusing to service the request because the
    payload is in a format not supported by this method on the target
    resource.

    The format problem might be due to the request's indicated Content-
    Type or Content-Encoding, or as a result of inspecting the data
    directly.

    (See also: RFC 7231, Section 6.5.13)

    Keyword Args:
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [33921 34046]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33878 33882])
                            ("description" variable nil (reparse-symbol function_parameters) [33884 33895])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [33902 33910]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33865 34047]))                  
                :type "class")
                nil [31965 34047])
            ("HTTPRangeNotSatisfiable" type
               (:documentation "416 Range Not Satisfiable.

    None of the ranges in the request's Range header field overlap the
    current extent of the selected resource or that the set of ranges
    requested has been rejected due to invalid ranges or an excessive
    request of small or overlapping ranges.

    For byte ranges, failing to overlap the current extent means that
    the first-byte-pos of all of the byte-range-spec values were greater
    than the current length of the selected representation. When this
    status code is generated in response to a byte-range request, the
    sender SHOULD generate a Content-Range header field specifying the
    current length of the selected representation.

    (See also: RFC 7233, Section 4.4)

    Args:
        resource_length: The maximum value for the last-byte-pos of a range
            request. Used to set the Content-Range header.
    "
                :superclasses ("NoRepresentation" "HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("headers" variable nil (reparse-symbol indented_block_body) [35048 35110])
                            ("super" code nil (reparse-symbol indented_block_body) [35119 35252]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35016 35020])
                            ("resource_length" variable nil (reparse-symbol function_parameters) [35022 35037]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35003 35253]))                  
                :type "class")
                nil [34049 35253])
            ("HTTPUnprocessableEntity" type
               (:documentation "422 Unprocessable Entity.

    The server understands the content type of the request entity (hence
    a 415 Unsupported Media Type status code is inappropriate), and the
    syntax of the request entity is correct (thus a 400 Bad Request
    status code is inappropriate) but was unable to process the
    contained instructions.

    For example, this error condition may occur if an XML request body
    contains well-formed (i.e., syntactically correct), but semantically
    erroneous, XML instructions.

    (See also: RFC 4918, Section 11.2)

    Keyword Args:
        title (str): Error title (default '422 Unprocessable Entity').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [37464 37610]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37409 37413])
                            ("title" variable nil (reparse-symbol function_parameters) [37415 37420])
                            ("description" variable nil (reparse-symbol function_parameters) [37427 37438])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [37445 37453]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37396 37611]))                  
                :type "class")
                nil [35255 37611])
            ("HTTPLocked" type
               (:documentation "423 Locked.

    The 423 (Locked) status code means the source or destination resource
    of a method is locked. This response SHOULD contain an appropriate
    precondition or postcondition code, such as 'lock-token-submitted' or
    'no-conflicting-lock'.

    (See also: RFC 4918, Section 11.3)

    Keyword Args:
        title (str): Error title (default '423 Locked').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("OptionalRepresentation" "HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [39568 39688]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39513 39517])
                            ("title" variable nil (reparse-symbol function_parameters) [39519 39524])
                            ("description" variable nil (reparse-symbol function_parameters) [39531 39542])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39549 39557]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39500 39689]))                  
                :type "class")
                nil [37613 39689])
            ("HTTPFailedDependency" type
               (:documentation "424 Failed Dependency.

    The 424 (Failed Dependency) status code means that the method could
    not be performed on the resource because the requested action
    depended on another action and that action failed.

    (See also: RFC 4918, Section 11.4)

    Keyword Args:
        title (str): Error title (default '424 Failed Dependency').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("OptionalRepresentation" "HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [41625 41765]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41570 41574])
                            ("title" variable nil (reparse-symbol function_parameters) [41576 41581])
                            ("description" variable nil (reparse-symbol function_parameters) [41588 41599])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41606 41614]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41557 41766]))                  
                :type "class")
                nil [39691 41766])
            ("HTTPPreconditionRequired" type
               (:documentation "428 Precondition Required.

    The 428 status code indicates that the origin server requires the
    request to be conditional.

    Its typical use is to avoid the \"lost update\" problem, where a client
    GETs a resource's state, modifies it, and PUTs it back to the server,
    when meanwhile a third party has modified the state on the server,
    leading to a conflict.  By requiring requests to be conditional, the
    server can assure that clients are working with the correct copies.

    Responses using this status code SHOULD explain how to resubmit the
    request successfully.

    (See also: RFC 6585, Section 3)

    Keyword Args:
        title (str): Error title (default '428 Precondition Required').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [44058 44206]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44003 44007])
                            ("title" variable nil (reparse-symbol function_parameters) [44009 44014])
                            ("description" variable nil (reparse-symbol function_parameters) [44021 44032])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44039 44047]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43990 44207]))                  
                :type "class")
                nil [41768 44207])
            ("HTTPTooManyRequests" type
               (:documentation "429 Too Many Requests.

    The user has sent too many requests in a given amount of time (\"rate
    limiting\").

    The response representations SHOULD include details explaining the
    condition, and MAY include a Retry-After header indicating how long
    to wait before making a new request.

    Responses with the 429 status code MUST NOT be stored by a cache.

    (See also: RFC 6585, Section 4)

    Keyword Args:
        title (str): Error title (default '429 Too Many Requests').
        description (str): Human-friendly description of the rate limit that
            was exceeded.
        retry_after (datetime or int): Value for the Retry-After
            header. If a ``datetime`` object, will serialize as an HTTP date.
            Otherwise, a non-negative ``int`` is expected, representing the
            number of seconds to wait.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("headers" variable nil (reparse-symbol indented_block_body) [46526 46568])
                            ("if" code nil (reparse-symbol indented_block_body) [46578 46774])
                            ("super" code nil (reparse-symbol indented_block_body) [46783 47021]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46453 46457])
                            ("title" variable nil (reparse-symbol function_parameters) [46459 46464])
                            ("description" variable nil (reparse-symbol function_parameters) [46471 46482])
                            ("retry_after" variable nil (reparse-symbol function_parameters) [46489 46500])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [46507 46515]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [46440 47022]))                  
                :type "class")
                nil [44209 47022])
            ("HTTPRequestHeaderFieldsTooLarge" type
               (:documentation "431 Request Header Fields Too Large.

    The 431 status code indicates that the server is unwilling to process
    the request because its header fields are too large.  The request MAY
    be resubmitted after reducing the size of the request header fields.

    It can be used both when the set of request header fields in total is
    too large, and when a single header field is at fault.  In the latter
    case, the response representation SHOULD specify which header field
    was too large.

    Responses with the 431 status code MUST NOT be stored by a cache.

    (See also: RFC 6585, Section 5)

    Keyword Args:
        title (str): Error title (default '431 Request Header Fields Too Large').
        description (str): Human-friendly description of the rate limit that
            was exceeded.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [49292 49578]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49237 49241])
                            ("title" variable nil (reparse-symbol function_parameters) [49243 49248])
                            ("description" variable nil (reparse-symbol function_parameters) [49255 49266])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [49273 49281]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [49224 49579]))                  
                :type "class")
                nil [47024 49579])
            ("HTTPUnavailableForLegalReasons" type
               (:documentation "451 Unavailable For Legal Reasons.

    The server is denying access to the resource as a consequence of a
    legal demand.

    The server in question might not be an origin server. This type of
    legal demand typically most directly affects the operations of ISPs
    and search engines.

    Responses using this status code SHOULD include an explanation, in
    the response body, of the details of the legal demand: the party
    making it, the applicable legislation or regulation, and what
    classes of person and resource it applies to.

    Note that in many cases clients can still access the denied resource
    by using technical countermeasures such as a VPN or the Tor network.

    A 451 response is cacheable by default; i.e., unless otherwise
    indicated by the method definition or explicit cache controls.

    (See also: RFC 7725, Section 3)

    Keyword Args:
        title (str): Error title (default '451 Unavailable For Legal Reasons').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two (default ``None``).
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("OptionalRepresentation" "HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [52150 52297]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52113 52117])
                            ("title" variable nil (reparse-symbol function_parameters) [52119 52124])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52131 52139]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52100 52298]))                  
                :type "class")
                nil [49581 52298])
            ("HTTPInternalServerError" type
               (:documentation "500 Internal Server Error.

    The server encountered an unexpected condition that prevented it
    from fulfilling the request.

    (See also: RFC 7231, Section 6.6.1)

    Keyword Args:
        title (str): Error title (default '500 Internal Server Error').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).

    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [54132 54278]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54077 54081])
                            ("title" variable nil (reparse-symbol function_parameters) [54083 54088])
                            ("description" variable nil (reparse-symbol function_parameters) [54095 54106])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [54113 54121]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [54064 54279]))                  
                :type "class")
                nil [52300 54279])
            ("HTTPNotImplemented" type
               (:documentation "501 Not Implemented.

    The 501 (Not Implemented) status code indicates that the server does
    not support the functionality required to fulfill the request.  This
    is the appropriate response when the server does not recognize the
    request method and is not capable of supporting it for any resource.

    A 501 response is cacheable by default; i.e., unless otherwise
    indicated by the method definition or explicit cache controls
    as described in RFC 7234, Section 4.2.2.

    (See also: RFC 7231, Section 6.6.2)

    Keyword Args:
        title (str): Error title (default '500 Internal Server Error').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.

        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).

    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [56470 56606]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56415 56419])
                            ("title" variable nil (reparse-symbol function_parameters) [56421 56426])
                            ("description" variable nil (reparse-symbol function_parameters) [56433 56444])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [56451 56459]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [56402 56607]))                  
                :type "class")
                nil [54281 56607])
            ("HTTPBadGateway" type
               (:documentation "502 Bad Gateway.

    The server, while acting as a gateway or proxy, received an invalid
    response from an inbound server it accessed while attempting to
    fulfill the request.

    (See also: RFC 7231, Section 6.6.3)

    Keyword Args:
        title (str): Error title (default '502 Bad Gateway').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [58474 58602]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58419 58423])
                            ("title" variable nil (reparse-symbol function_parameters) [58425 58430])
                            ("description" variable nil (reparse-symbol function_parameters) [58437 58448])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [58455 58463]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [58406 58603]))                  
                :type "class")
                nil [56609 58603])
            ("HTTPServiceUnavailable" type
               (:documentation "503 Service Unavailable.

    The server is currently unable to handle the request due to a
    temporary overload or scheduled maintenance, which will likely be
    alleviated after some delay.

    The server MAY send a Retry-After header field to suggest an
    appropriate amount of time for the client to wait before retrying
    the request.

    Note: The existence of the 503 status code does not imply that a
    server has to use it when becoming overloaded. Some servers might
    simply refuse the connection.

    (See also: RFC 7231, Section 6.6.4)

    Keyword Args:
        title (str): Error title (default '503 Service Unavailable').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        retry_after (datetime or int): Value for the Retry-After header. If a
            ``datetime`` object, will serialize as an HTTP date. Otherwise,
            a non-negative ``int`` is expected, representing the number of
            seconds to wait.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("headers" variable nil (reparse-symbol indented_block_body) [61101 61143])
                            ("if" code nil (reparse-symbol indented_block_body) [61153 61349])
                            ("super" code nil (reparse-symbol indented_block_body) [61358 61608]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61028 61032])
                            ("title" variable nil (reparse-symbol function_parameters) [61034 61039])
                            ("description" variable nil (reparse-symbol function_parameters) [61046 61057])
                            ("retry_after" variable nil (reparse-symbol function_parameters) [61064 61075])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [61082 61090]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [61015 61609]))                  
                :type "class")
                nil [58605 61609])
            ("HTTPGatewayTimeout" type
               (:documentation "504 Gateway Timeout.

    The 504 (Gateway Timeout) status code indicates that the server,
    while acting as a gateway or proxy, did not receive a timely response
    from an upstream server it needed to access in order to complete the
    request.

    (See also: RFC 7231, Section 6.6.5)

    Keyword Args:
        title (str): Error title (default '503 Service Unavailable').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.

        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [63557 63693]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63502 63506])
                            ("title" variable nil (reparse-symbol function_parameters) [63508 63513])
                            ("description" variable nil (reparse-symbol function_parameters) [63520 63531])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [63538 63546]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [63489 63694]))                  
                :type "class")
                nil [61611 63694])
            ("HTTPVersionNotSupported" type
               (:documentation "505 HTTP Version Not Supported

    The 505 (HTTP Version Not Supported) status code indicates that the
    server does not support, or refuses to support, the major version of
    HTTP that was used in the request message.  The server is indicating
    that it is unable or unwilling to complete the request using the same
    major version as the client (as described in RFC 7230, Section 2.6),
    other than with this error message.  The server SHOULD
    generate a representation for the 505 response that describes why
    that version is not supported and what other protocols are supported
    by that server.

    (See also: RFC 7231, Section 6.6.6)

    Keyword Args:
        title (str): Error title (default '503 Service Unavailable').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.

        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [66015 66161]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65960 65964])
                            ("title" variable nil (reparse-symbol function_parameters) [65966 65971])
                            ("description" variable nil (reparse-symbol function_parameters) [65978 65989])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [65996 66004]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [65947 66162]))                  
                :type "class")
                nil [63696 66162])
            ("HTTPInsufficientStorage" type
               (:documentation "507 Insufficient Storage.

    The 507 (Insufficient Storage) status code means the method could not
    be performed on the resource because the server is unable to store
    the representation needed to successfully complete the request. This
    condition is considered to be temporary. If the request that
    received this status code was the result of a user action, the
    request MUST NOT be repeated until it is requested by a separate user
    action.

    (See also: RFC 4918, Section 11.5)

    Keyword Args:
        title (str): Error title (default '507 Insufficient Storage').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [68326 68472]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68271 68275])
                            ("title" variable nil (reparse-symbol function_parameters) [68277 68282])
                            ("description" variable nil (reparse-symbol function_parameters) [68289 68300])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [68307 68315]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [68258 68473]))                  
                :type "class")
                nil [66164 68473])
            ("HTTPLoopDetected" type
               (:documentation "508 Loop Detected.

    The 508 (Loop Detected) status code indicates that the server
    terminated an operation because it encountered an infinite loop while
    processing a request with \"Depth: infinity\". This status indicates
    that the entire operation failed.

    (See also: RFC 5842, Section 7.2)

    Keyword Args:
        title (str): Error title (default '508 Loop Detected').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [70428 70560]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70373 70377])
                            ("title" variable nil (reparse-symbol function_parameters) [70379 70384])
                            ("description" variable nil (reparse-symbol function_parameters) [70391 70402])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [70409 70417]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [70360 70561]))                  
                :type "class")
                nil [68475 70561])
            ("HTTPNetworkAuthenticationRequired" type
               (:documentation "511 Network Authentication Required.

    The 511 status code indicates that the client needs to authenticate
    to gain network access.

    The response representation SHOULD contain a link to a resource that
    allows the user to submit credentials.

    Note that the 511 response SHOULD NOT contain a challenge or the
    authentication interface itself, because clients would show the
    interface as being associated with the originally requested URL,
    which may cause confusion.

    The 511 status SHOULD NOT be generated by origin servers; it is
    intended for use by intercepting proxies that are interposed as a
    means of controlling access to the network.

    Responses with the 511 status code MUST NOT be stored by a cache.

    (See also: RFC 6585, Section 6)

    Keyword Args:
        title (str): Error title (default '511 Network Authentication Required').
        description (str): Human-friendly description of the error, along with
            a helpful suggestion or two.
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [73031 73325]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72976 72980])
                            ("title" variable nil (reparse-symbol function_parameters) [72982 72987])
                            ("description" variable nil (reparse-symbol function_parameters) [72994 73005])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [73012 73020]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [72963 73326]))                  
                :type "class")
                nil [70563 73326])
            ("HTTPInvalidHeader" type
               (:documentation "400 Bad Request.

    One of the headers in the request is invalid.

    Args:
        msg (str): A description of why the value is invalid.
        header_name (str): The name of the invalid header.

    Keyword Args:
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPBadRequest")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("description" variable nil (reparse-symbol indented_block_body) [74983 75080])
                            ("description" variable nil (reparse-symbol indented_block_body) [75089 75139])
                            ("super" code nil (reparse-symbol indented_block_body) [75149 75283]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74940 74944])
                            ("msg" variable nil (reparse-symbol function_parameters) [74946 74949])
                            ("header_name" variable nil (reparse-symbol function_parameters) [74951 74962])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [74964 74972]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [74927 75284]))                  
                :type "class")
                nil [73328 75284])
            ("HTTPMissingHeader" type
               (:documentation "400 Bad Request

    A header is missing from the request.

    Args:
        header_name (str): The name of the missing header.

    Keyword Args:
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPBadRequest")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("description" variable nil (reparse-symbol indented_block_body) [76865 76908])
                            ("description" variable nil (reparse-symbol indented_block_body) [76917 76962])
                            ("super" code nil (reparse-symbol indented_block_body) [76972 77106]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76827 76831])
                            ("header_name" variable nil (reparse-symbol function_parameters) [76833 76844])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [76846 76854]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [76814 77107]))                  
                :type "class")
                nil [75286 77107])
            ("HTTPInvalidParam" type
               (:documentation "400 Bad Request

    A parameter in the request is invalid. This error may refer to a
    parameter in a query string, form, or document that was submitted
    with the request.

    Args:
        msg (str): A description of the invalid parameter.
        param_name (str): The name of the parameter.

    Keyword Args:
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPBadRequest")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("description" variable nil (reparse-symbol indented_block_body) [78863 78914])
                            ("description" variable nil (reparse-symbol indented_block_body) [78923 78972])
                            ("super" code nil (reparse-symbol indented_block_body) [78982 79111]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78821 78825])
                            ("msg" variable nil (reparse-symbol function_parameters) [78827 78830])
                            ("param_name" variable nil (reparse-symbol function_parameters) [78832 78842])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [78844 78852]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [78808 79112]))                  
                :type "class")
                nil [77109 79112])
            ("HTTPMissingParam" type
               (:documentation "400 Bad Request

    A parameter is missing from the request. This error may refer to a
    parameter in a query string, form, or document that was submitted
    with the request.

    Args:
        param_name (str): The name of the missing parameter.

    Keyword Args:
        headers (dict or list): A ``dict`` of header names and values
            to set, or a ``list`` of (*name*, *value*) tuples. Both *name* and
            *value* must be of type ``str`` or ``StringType``, and only
            character values 0x00 through 0xFF may be used on platforms that
            use wide characters.

            Note:
                The Content-Type header, if present, will be overridden. If
                you wish to return custom error messages, you can create
                your own HTTP error class, and install an error handler
                to convert it into an appropriate HTTP response for the
                client

            Note:
                Falcon can process a list of ``tuple`` slightly faster
                than a ``dict``.
        href (str): A URL someone can visit to find out more information
            (default ``None``). Unicode characters are percent-encoded.
        href_text (str): If href is given, use this as the friendly
            title/description for the link (default 'API documentation
            for this error').
        code (int): An internal code that customers can reference in their
            support request or to help them when searching for knowledge
            base articles related to this error (default ``None``).
    "
                :superclasses ("HTTPBadRequest")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("description" variable nil (reparse-symbol indented_block_body) [80814 80862])
                            ("description" variable nil (reparse-symbol indented_block_body) [80871 80915])
                            ("super" code nil (reparse-symbol indented_block_body) [80925 81054]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80777 80781])
                            ("param_name" variable nil (reparse-symbol function_parameters) [80783 80793])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [80795 80803]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [80764 81055]))                  
                :type "class")
                nil [79114 81055]))          
    :file "errors.py"
    :pointmax 81055
    :fsize 81054
    :lastmodtime '(23079 49428 611414 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "http_error.py"
    :file "http_error.py"
    :fsize 9072
    :lastmodtime '(23079 49428 608412 0)
    )
   (semanticdb-table "status_codes.py"
    :major-mode 'python-mode
    :tags nil
    :file "status_codes.py"
    :pointmax 6511
    :fsize 6510
    :lastmodtime '(23079 49428 609413 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "http_status.py"
    :major-mode 'python-mode
    :tags nil
    :file "http_status.py"
    :pointmax 1714
    :fsize 1713
    :lastmodtime '(23079 49428 610414 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "responders.py"
    :file "responders.py"
    :fsize 2257
    :lastmodtime '(23079 49428 610414 0)
    )
   (semanticdb-table "response.py"
    :major-mode 'python-mode
    :tags nil
    :file "response.py"
    :pointmax 31882
    :fsize 31881
    :lastmodtime '(23079 49428 610414 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "version.py"
    :file "version.py"
    :fsize 668
    :lastmodtime '(23079 49428 608412 0)
    )
   (semanticdb-table "constants.py"
    :file "constants.py"
    :fsize 2353
    :lastmodtime '(23079 49428 609413 0)
    )
   (semanticdb-table "redirects.py"
    :file "redirects.py"
    :fsize 4951
    :lastmodtime '(23079 49428 610414 0)
    )
   (semanticdb-table "uri.py"
    :file "uri.py"
    :fsize 518
    :lastmodtime '(23079 49428 611414 0)
    )
   (semanticdb-table "hooks.py"
    :file "hooks.py"
    :fsize 6606
    :lastmodtime '(23079 49428 608412 0)
    )
   )
  :file "!usr!lib!python2.7!site-packages!falcon!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
