;; Object playhouse/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "playhouse/"
  :tables (list 
   (semanticdb-table "shortcuts.py"
    :major-mode 'python-mode
    :tags 
        '( ("sys" include nil nil [1 11])
            ("peewee" include nil nil [13 33])
            ("peewee" include nil nil [34 57])
            ("if" code nil nil [59 174])
            ("case" function
               (:documentation "
    CASE statement builder.

    Example CASE statements:

        SELECT foo,
            CASE
                WHEN foo = 1 THEN \"one\"
                WHEN foo = 2 THEN \"two\"
                ELSE \"?\"
            END -- will be in column named \"case\" in postgres --
        FROM bar;

        -- equivalent to above --
        SELECT foo,
            CASE foo
                WHEN 1 THEN \"one\"
                WHEN 2 THEN \"two\"
                ELSE \"?\"
            END

    Corresponding peewee:

        # No predicate, use expressions.
        Bar.select(Bar.foo, case(None, (
            (Bar.foo == 1, \"one\"),
            (Bar.foo == 2, \"two\")), \"?\"))

        # Predicate, will test for equality.
        Bar.select(Bar.foo, case(Bar.foo, (
            (1, \"one\"),
            (2, \"two\")), \"?\"))
    "
                :arguments 
                  ( ("predicate" variable nil (reparse-symbol function_parameters) [185 194])
                    ("expression_tuples" variable nil (reparse-symbol function_parameters) [196 213])
                    ("default" variable nil (reparse-symbol function_parameters) [215 222]))                  )
                nil [176 1625])
            ("cast" function (:arguments 
              ( ("node" variable nil (reparse-symbol function_parameters) [1636 1640])
                ("as_type" variable nil (reparse-symbol function_parameters) [1642 1649]))              ) nil [1627 1709])
            ("_clone_set" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [1726 1727]))              ) nil [1711 1779])
            ("model_to_dict" function
               (:documentation "
    Convert a model instance (and any related objects) to a dictionary.

    :param bool recurse: Whether foreign-keys should be recursed.
    :param bool backrefs: Whether lists of related objects should be recursed.
    :param only: A list (or set) of field instances indicating which fields
        should be included.
    :param exclude: A list (or set) of field instances that should be
        excluded from the dictionary.
    :param list extra_attrs: Names of model instance attributes or methods
        that should be included.
    :param SelectQuery fields_from_query: Query that was source of model. Take
        fields explicitly selected by the query and serialize them.
    :param int max_depth: Maximum depth to recurse, value <= 0 means no max.
    "
                :arguments 
                  ( ("model" variable nil (reparse-symbol function_parameters) [1798 1803])
                    ("recurse" variable nil (reparse-symbol function_parameters) [1805 1812])
                    ("backrefs" variable nil (reparse-symbol function_parameters) [1819 1827])
                    ("only" variable nil (reparse-symbol function_parameters) [1835 1839])
                    ("exclude" variable nil (reparse-symbol function_parameters) [1864 1871])
                    ("seen" variable nil (reparse-symbol function_parameters) [1878 1882])
                    ("extra_attrs" variable nil (reparse-symbol function_parameters) [1889 1900])
                    ("fields_from_query" variable nil (reparse-symbol function_parameters) [1925 1942])
                    ("max_depth" variable nil (reparse-symbol function_parameters) [1949 1958]))                  )
                nil [1780 5204])
            ("dict_to_model" function (:arguments 
              ( ("model_class" variable nil (reparse-symbol function_parameters) [5224 5235])
                ("data" variable nil (reparse-symbol function_parameters) [5237 5241])
                ("ignore_unknown" variable nil (reparse-symbol function_parameters) [5243 5257]))              ) nil [5206 6622])
            ("RetryOperationalError" type
               (:superclasses ("object")
                :members 
                  ( ("execute_sql" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6681 6685])
                            ("sql" variable nil (reparse-symbol function_parameters) [6687 6690])
                            ("params" variable nil (reparse-symbol function_parameters) [6692 6698])
                            ("require_commit" variable nil (reparse-symbol function_parameters) [6705 6719]))                          )
                        (reparse-symbol indented_block_body) [6665 7204]))                  
                :type "class")
                nil [6624 7204]))          
    :file "shortcuts.py"
    :pointmax 7204
    :fsize 7203
    :lastmodtime '(23002 20494 0 0)
    :unmatched-syntax '((NAME 2748 . 2757) (IF 2763 . 2765) (ELSE 2784 . 2788))
    )
   )
  :file "!usr!lib!python2.7!site-packages!playhouse!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
