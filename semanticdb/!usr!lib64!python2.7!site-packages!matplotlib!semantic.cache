;; Object matplotlib/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "matplotlib/"
  :tables (list 
   (semanticdb-table "pyplot.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
`matplotlib.pyplot` is a state-based interface to matplotlib. It provides
a MATLAB-like way of plotting.

pyplot is mainly intended for interactive plots and simple cases of programmatic
plot generation::

    import numpy as np
    import matplotlib.pyplot as plt

    x = np.arange(0, 5, 0.1)
    y = np.sin(x)
    plt.plot(x, y)

The object-oriented API is recommended for more complex plots.
\"\"\"" code nil nil [133 536])
            ("" code nil nil [560 645])
            ("six" include nil nil [647 657])
            ("sys" include nil nil [659 669])
            ("warnings" include nil nil [670 685])
            ("time" include nil nil [686 697])
            ("types" include nil nil [698 710])
            ("cycler" include nil nil [712 737])
            ("matplotlib" include nil nil [738 755])
            ("matplotlib.colorbar" include nil nil [756 782])
            ("matplotlib" include nil nil [783 811])
            ("matplotlib" include nil nil [812 862])
            ("matplotlib.cbook" include nil nil [863 923])
            ("matplotlib.cbook" include nil nil [924 968])
            ("matplotlib.cbook" include nil nil [969 1008])
            ("matplotlib" include nil nil [1009 1041])
            ("matplotlib.backend_bases" include nil nil [1042 1095])
            ("matplotlib.figure" include nil nil [1096 1143])
            ("matplotlib.gridspec" include nil nil [1144 1184])
            ("matplotlib.image" include nil nil [1185 1231])
            ("matplotlib.image" include nil nil [1232 1278])
            ("matplotlib" include nil nil [1279 1340])
            ("matplotlib" include nil nil [1341 1374])
            ("matplotlib.rcsetup" include nil nil [1375 1439])
            ("matplotlib.artist" include nil nil [1440 1487])
            ("matplotlib.artist" include nil nil [1488 1531])
            ("matplotlib.axes" include nil nil [1532 1573])
            ("matplotlib.projections" include nil nil [1574 1618])
            ("matplotlib" include nil nil [1619 1646])
            ("matplotlib.scale" include nil nil [1692 1752])
            ("matplotlib" include nil nil [1754 1779])
            ("matplotlib.cm" include nil nil [1780 1829])
            ("numpy" include nil nil [1831 1849])
            ("matplotlib.colors" include nil nil [1897 1936])
            ("matplotlib.lines" include nil nil [1937 1972])
            ("matplotlib.text" include nil nil [1973 2017])
            ("matplotlib.patches" include nil nil [2018 2082])
            ("matplotlib.widgets" include nil nil [2083 2149])
            ("TickHelper" include nil nil [2164 2513])
            ("Formatter" include nil nil [2164 2513])
            ("FixedFormatter" include nil nil [2164 2513])
            ("NullFormatter" include nil nil [2164 2513])
            ("FuncFormatter" include nil nil [2164 2513])
            ("FormatStrFormatter" include nil nil [2164 2513])
            ("ScalarFormatter" include nil nil [2164 2513])
            ("LogFormatter" include nil nil [2164 2513])
            ("LogFormatterExponent" include nil nil [2164 2513])
            ("LogFormatterMathtext" include nil nil [2164 2513])
            ("Locator" include nil nil [2164 2513])
            ("IndexLocator" include nil nil [2164 2513])
            ("FixedLocator" include nil nil [2164 2513])
            ("NullLocator" include nil nil [2164 2513])
            ("LinearLocator" include nil nil [2164 2513])
            ("LogLocator" include nil nil [2164 2513])
            ("AutoLocator" include nil nil [2164 2513])
            ("MultipleLocator" include nil nil [2164 2513])
            ("MaxNLocator" include nil nil [2164 2513])
            ("matplotlib.backends" include nil nil [2514 2557])
            ("_backend_selection" function (:documentation " If rcParams['backend_fallback'] is true, check to see if the
        current backend is compatible with the current running event
        loop, and if not switches to a compatible one.
    ") nil [2583 4153])
            ("_backend_selection" code nil nil [4154 4174])
            ("_backend_mod, new_figure_manager, draw_if_interactive, _show" code nil nil [4190 4266])
            ("_IP_REGISTERED" variable nil nil [4268 4289])
            ("_INSTALL_FIG_OBSERVER" variable nil nil [4290 4319])
            ("install_repl_displayhook" function (:documentation "
    Install a repl display hook so that any stale figure are automatically
    redrawn when control is returned to the repl.

    This works with IPython terminals and kernels,
    as well as vanilla python shells.
    ") nil [4322 5866])
            ("uninstall_repl_displayhook" function (:documentation "
    Uninstalls the matplotlib display hook.

    .. warning

       Need IPython >= 2 for this to work.  For IPython < 2 will raise a
       ``NotImplementedError``

    .. warning

       If you are using vanilla python and have installed another
       display hook this will reset ``sys.displayhook`` to what ever
       function was there when matplotlib installed it's displayhook,
       possibly discarding your changes.
    ") nil [5868 6828])
            ("draw_all" variable nil nil [6830 6868])
            ("" code nil nil [6893 6909])
            ("findobj" function (:arguments 
              ( ("o" variable nil (reparse-symbol function_parameters) [6922 6923])
                ("match" variable nil (reparse-symbol function_parameters) [6930 6935])
                ("include_self" variable nil (reparse-symbol function_parameters) [6942 6954]))              ) nil [6910 7053])
            ("switch_backend" function
               (:documentation "
    Switch the default backend.  This feature is **experimental**, and
    is only expected to work switching to an image backend.  e.g., if
    you have a bunch of PostScript scripts that you want to run from
    an interactive ipython session, you may want to switch to the PS
    backend before running them to avoid having a bunch of GUI windows
    popup.  If you try to interactively switch from one GUI backend to
    another, you will explode.

    Calling this command will close all open windows.
    "
                :arguments 
                  ( ("newbackend" variable nil (reparse-symbol function_parameters) [7074 7084]))                  )
                nil [7055 7883])
            ("show" function
               (:documentation "
    Display a figure.
    When running in ipython with its pylab mode, display all
    figures and return to the ipython prompt.

    In non-interactive mode, display all figures and block until
    the figures have been closed; in interactive mode it has no
    effect unless figures were created prior to a change from
    non-interactive to interactive mode (not recommended).  In
    that case it displays the figures but does not block.

    A single experimental keyword argument, *block*, may be
    set to True or False to override the blocking behavior
    described above.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [7894 7899])
                    ("kw" variable nil (reparse-symbol function_parameters) [7901 7905]))                  )
                nil [7885 8554])
            ("isinteractive" function (:documentation "
    Return status of interactive mode.
    ") nil [8556 8671])
            ("ioff" function (:documentation "Turn interactive mode off.") nil [8673 8789])
            ("ion" function (:documentation "Turn interactive mode on.") nil [8791 8902])
            ("pause" function
               (:documentation "
    Pause for *interval* seconds.

    If there is an active figure, it will be updated and displayed before the
    pause, and the GUI event loop (if any) will run during the pause.

    This can be used for crude animation.  For more complex animation, see
    :mod:`matplotlib.animation`.

    Note
    ----
    This function is experimental; its behavior may be changed or extended in a
    future release.
    "
                :arguments 
                  ( ("interval" variable nil (reparse-symbol function_parameters) [8914 8922]))                  )
                nil [8904 9628])
            ("" code nil nil [9652 9667])
            ("rc" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [9675 9680])
                ("kwargs" variable nil (reparse-symbol function_parameters) [9682 9690]))              ) nil [9668 9728])
            ("" code nil nil [9752 9775])
            ("rc_context" function (:arguments 
              ( ("rc" variable nil (reparse-symbol function_parameters) [9791 9793])
                ("fname" variable nil (reparse-symbol function_parameters) [9800 9805]))              ) nil [9776 9857])
            ("" code nil nil [9881 9904])
            ("rcdefaults" function nil nil [9905 10006])
            ("gci" function (:documentation "
    Get the current colorable artist.  Specifically, returns the
    current :class:`~matplotlib.cm.ScalarMappable` instance (image or
    patch collection), or *None* if no images or patch collections
    have been defined.  The commands :func:`~matplotlib.pyplot.imshow`
    and :func:`~matplotlib.pyplot.figimage` create
    :class:`~matplotlib.image.Image` instances, and the commands
    :func:`~matplotlib.pyplot.pcolor` and
    :func:`~matplotlib.pyplot.scatter` create
    :class:`~matplotlib.collections.Collection` instances.  The
    current image is an attribute of the current axes, or the nearest
    earlier axes in the current figure that contains an image.
    ") nil [10136 10861])
            ("sci" function
               (:documentation "
    Set the current image.  This image will be the target of colormap
    commands like :func:`~matplotlib.pyplot.jet`,
    :func:`~matplotlib.pyplot.hot` or
    :func:`~matplotlib.pyplot.clim`).  The current image is an
    attribute of the current axes.
    "
                :arguments 
                  ( ("im" variable nil (reparse-symbol function_parameters) [10871 10873]))                  )
                nil [10863 11167])
            ("" code nil nil [11229 11236])
            ("setp" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [11246 11251])
                ("kwargs" variable nil (reparse-symbol function_parameters) [11253 11261]))              ) nil [11237 11298])
            ("xkcd" function
               (:documentation "
    Turns on `xkcd <https://xkcd.com/>`_ sketch-style drawing mode.
    This will only have effect on things drawn after this function is
    called.

    For best results, the \"Humor Sans\" font should be installed: it is
    not included with matplotlib.

    Parameters
    ----------
    scale : float, optional
        The amplitude of the wiggle perpendicular to the source line.
    length : float, optional
        The length of the wiggle along the line.
    randomness : float, optional
        The scale factor by which the length is shrunken or expanded.

    Notes
    -----
    This function works by a number of rcParams, so it will probably
    override others you have set before.

    If you want the effects of this function to be temporary, it can
    be used as a context manager, for example::

        with plt.xkcd():
            # This figure will be in XKCD-style
            fig1 = plt.figure()
            # ...

        # This figure will be in regular style
        fig2 = plt.figure()
    "
                :arguments 
                  ( ("scale" variable nil (reparse-symbol function_parameters) [11309 11314])
                    ("length" variable nil (reparse-symbol function_parameters) [11318 11324])
                    ("randomness" variable nil (reparse-symbol function_parameters) [11330 11340]))                  )
                nil [11300 13408])
            ("figure" function
               (:documentation "
    Creates a new figure.

    Parameters
    ----------

    num : integer or string, optional, default: none
        If not provided, a new figure will be created, and the figure number
        will be incremented. The figure objects holds this number in a `number`
        attribute.
        If num is provided, and a figure with this id already exists, make
        it active, and returns a reference to it. If this figure does not
        exists, create it and returns it.
        If num is a string, the window title will be set to this figure's
        `num`.

    figsize : tuple of integers, optional, default: None
        width, height in inches. If not provided, defaults to rc
        figure.figsize.

    dpi : integer, optional, default: None
        resolution of the figure. If not provided, defaults to rc figure.dpi.

    facecolor :
        the background color. If not provided, defaults to rc figure.facecolor.

    edgecolor :
        the border color. If not provided, defaults to rc figure.edgecolor.

    frameon : bool, optional, default: True
        If False, suppress drawing the figure frame.

    FigureClass : class derived from matplotlib.figure.Figure
        Optionally use a custom Figure instance.

    clear : bool, optional, default: False
        If True and the figure already exists, then it is cleared.

    Returns
    -------
    figure : Figure
        The Figure instance returned will also be passed to new_figure_manager
        in the backends, which allows to hook custom Figure classes into the
        pylab interface. Additional kwargs will be passed to the figure init
        function.

    Notes
    -----
    If you are creating many figures, make sure you explicitly call \"close\"
    on the figures you are not using, because this will enable pylab
    to properly clean up the memory.

    rcParams defines the default values, which can be modified in the
    matplotlibrc file

    "
                :arguments 
                  ( ("num" variable nil (reparse-symbol function_parameters) [13436 13439])
                    ("figsize" variable nil (reparse-symbol function_parameters) [13505 13512])
                    ("dpi" variable nil (reparse-symbol function_parameters) [13563 13566])
                    ("facecolor" variable nil (reparse-symbol function_parameters) [13613 13622])
                    ("edgecolor" variable nil (reparse-symbol function_parameters) [13675 13684])
                    ("frameon" variable nil (reparse-symbol function_parameters) [13737 13744])
                    ("FigureClass" variable nil (reparse-symbol function_parameters) [13762 13773])
                    ("clear" variable nil (reparse-symbol function_parameters) [13793 13798])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [13817 13825]))                  )
                nil [13425 18804])
            ("_auto_draw_if_interactive" function
               (:documentation "
    This is an internal helper function for making sure that auto-redrawing
    works as intended in the plain python repl.

    Parameters
    ----------
    fig : Figure
        A figure object which is assumed to be associated with a canvas
    "
                :arguments 
                  ( ("fig" variable nil (reparse-symbol function_parameters) [18836 18839])
                    ("val" variable nil (reparse-symbol function_parameters) [18841 18844]))                  )
                nil [18806 19213])
            ("gcf" function (:documentation "Get a reference to the current figure.") nil [19215 19429])
            ("fignum_exists" function (:arguments 
              ( ("num" variable nil (reparse-symbol function_parameters) [19449 19452]))              ) nil [19431 19527])
            ("get_fignums" function (:documentation "Return a list of existing figure numbers.") nil [19529 19643])
            ("get_figlabels" function (:documentation "Return a list of existing figure labels.") nil [19645 19881])
            ("get_current_fig_manager" function nil nil [19883 20124])
            ("" code nil nil [20148 20178])
            ("connect" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [20191 20192])
                ("func" variable nil (reparse-symbol function_parameters) [20194 20198]))              ) nil [20179 20266])
            ("" code nil nil [20290 20323])
            ("disconnect" function (:arguments 
              ( ("cid" variable nil (reparse-symbol function_parameters) [20339 20342]))              ) nil [20324 20409])
            ("close" function
               (:documentation "
    Close a figure window.

    ``close()`` by itself closes the current figure

    ``close(fig)`` closes the `~.Figure` instance *fig*

    ``close(num)`` closes the figure number *num*

    ``close(name)`` where *name* is a string, closes figure with that label

    ``close('all')`` closes all the figure windows
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [20421 20426]))                  )
                nil [20411 21827])
            ("clf" function (:documentation "
    Clear the current figure.
    ") nil [21829 21902])
            ("draw" function (:documentation "Redraw the current figure.

    This is used to update a figure that has been altered, but not
    automatically re-drawn.  If interactive mode is on (:func:`.ion()`), this
    should be only rarely needed, but there may be ways to modify the state of
    a figure without marking it as `stale`.  Please report these cases as
    bugs.

    A more object-oriented alternative, given any
    :class:`~matplotlib.figure.Figure` instance, :attr:`fig`, that
    was created using a :mod:`~matplotlib.pyplot` function, is::

        fig.canvas.draw_idle()
    ") nil [21904 22531])
            ("" code nil nil [22555 22571])
            ("savefig" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [22584 22589])
                ("kwargs" variable nil (reparse-symbol function_parameters) [22591 22599]))              ) nil [22572 22751])
            ("" code nil nil [22775 22790])
            ("ginput" function
               (:documentation "
    Blocking call to interact with the figure.

    This will wait for *n* clicks from the user and return a list of the
    coordinates of each click.

    If *timeout* is negative, does not timeout.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [22802 22807])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [22809 22817]))                  )
                nil [22791 23078])
            ("" code nil nil [23102 23129])
            ("waitforbuttonpress" function
               (:documentation "
    Blocking call to interact with the figure.

    This will wait for *n* key or mouse clicks from the user and
    return a list containing True's for keyboard clicks and False's
    for mouse clicks.

    If *timeout* is negative, does not timeout.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [23153 23158])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [23160 23168]))                  )
                nil [23130 23492])
            ("" code nil nil [23545 23558])
            ("figtext" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [23571 23576])
                ("kwargs" variable nil (reparse-symbol function_parameters) [23578 23586]))              ) nil [23559 23628])
            ("" code nil nil [23652 23669])
            ("suptitle" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [23683 23688])
                ("kwargs" variable nil (reparse-symbol function_parameters) [23690 23698]))              ) nil [23670 23744])
            ("" code nil nil [23768 23785])
            ("figimage" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [23799 23804])
                ("kwargs" variable nil (reparse-symbol function_parameters) [23806 23814]))              ) nil [23786 23860])
            ("figlegend" function
               (:documentation "
    Place a legend in the figure.

    *labels*
      a sequence of strings

    *handles*
      a sequence of :class:`~matplotlib.lines.Line2D` or
      :class:`~matplotlib.patches.Patch` instances

    *loc*
      can be a string or an integer specifying the legend
      location

    A :class:`matplotlib.legend.Legend` instance is returned.

    Examples
    --------

    To make a legend from existing artists on every axes::

      figlegend()

    To make a legend for a list of lines and labels::

      figlegend( (line1, line2, line3),
                 ('label1', 'label2', 'label3'),
                 'upper right' )

    .. seealso::

       :func:`~matplotlib.pyplot.legend`

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [23876 23881])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [23883 23891]))                  )
                nil [23862 24642])
            ("_hold_msg" variable nil nil [24674 24867])
            ("" code nil nil [24880 24906])
            ("hold" function
               (:documentation "
    Set the hold state.  If *b* is None (default), toggle the
    hold state, else set the hold state to boolean value *b*::

      hold()      # toggle hold
      hold(True)  # hold is on
      hold(False) # hold is off

    When *hold* is *True*, subsequent plot commands will add elements to
    the current axes.  When *hold* is *False*, the current axes and
    figure will be cleared on the next plot command.

    "
                :arguments 
                  ( ("b" variable nil (reparse-symbol function_parameters) [24916 24917]))                  )
                nil [24907 25844])
            ("" code nil nil [25856 25882])
            ("ishold" function (:documentation "
    Return the hold status of the current axes.
    ") nil [25883 25984])
            ("" code nil nil [25997 26023])
            ("over" function
               (:documentation "
    Call a function with hold(True).

    Calls::

      func(*args, **kwargs)

    with ``hold(True)`` and then restores the hold state.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [26033 26037])
                    ("args" variable nil (reparse-symbol function_parameters) [26039 26044])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [26046 26054]))                  )
                nil [26024 26307])
            ("axes" function
               (:documentation "
    Add an axes to the figure.

    The axes is added at position *rect* specified by:

    - ``axes()`` by itself creates a default full ``subplot(111)`` window axis.

    - ``axes(rect, facecolor='w')`` where *rect* = [left, bottom, width,
      height] in normalized (0, 1) units.  *facecolor* is the background
      color for the axis, default white.

    - ``axes(h)`` where *h* is an axes instance makes *h* the current
      axis and the parent of *h* the current figure.
      An :class:`~matplotlib.axes.Axes` instance is returned.

    =========   ==============   ==============================================
    kwarg       Accepts          Description
    =========   ==============   ==============================================
    facecolor   color            the axes background color
    frameon     [True|False]     display the frame?
    sharex      otherax          current axes shares xaxis attribute
                                 with otherax
    sharey      otherax          current axes shares yaxis attribute
                                 with otherax
    polar       [True|False]     use a polar axes?
    aspect      [str | num]      ['equal', 'auto'] or a number.  If a number
                                 the ratio of y-unit/x-unit in screen-space.
                                 Also see
                                 :meth:`~matplotlib.axes.Axes.set_aspect`.
    =========   ==============   ==============================================

    Examples:

    * :file:`examples/pylab_examples/axes_demo.py` places custom axes.
    * :file:`examples/pylab_examples/shared_axis_demo.py` uses
      *sharex* and *sharey*.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [26330 26335])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [26337 26345]))                  )
                nil [26321 28372])
            ("delaxes" function
               (:documentation "
    Remove an axes from the current figure.  If *ax*
    doesn't exist, an error will be raised.

    ``delaxes()``: delete the current axes
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [28386 28391]))                  )
                nil [28374 28666])
            ("sca" function
               (:documentation "
    Set the current Axes instance to *ax*.

    The current Figure is updated to the parent of *ax*.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [28676 28678]))                  )
                nil [28668 29091])
            ("gca" function
               (:documentation "
    Get the current :class:`~matplotlib.axes.Axes` instance on the
    current figure matching the given keyword args, or create one.

    Examples
    --------
    To get the current polar axes on the current figure::

        plt.gca(projection='polar')

    If the current axes doesn't exist, or isn't a polar one, the appropriate
    axes will be created and then returned.

    See Also
    --------
    matplotlib.figure.Figure.gca : The figure's gca method.
    "
                :arguments 
                  ( ("kwargs" variable nil (reparse-symbol function_parameters) [29101 29109]))                  )
                nil [29093 29624])
            ("subplot" function
               (:documentation "
    Return a subplot axes at the given grid position.

    Call signature::

       subplot(nrows, ncols, index, **kwargs)

    In the current figure, create and return an `~.Axes`, at position *index*
    of a (virtual) grid of *nrows* by *ncols* axes.  Indexes go from 1 to
    ``nrows * ncols``, incrementing in row-major order.

    If *nrows*, *ncols* and *index* are all less than 10, they can also be
    given as a single, concatenated, three-digit number.

    For example, ``subplot(2, 3, 3)`` and ``subplot(233)`` both create an
    `~.Axes` at the top right corner of the current figure, occupying half of
    the figure height and a third of the figure width.

    .. note::

       Creating a subplot will delete any pre-existing subplot that overlaps
       with it beyond sharing a boundary::

          import matplotlib.pyplot as plt
          # plot a line, implicitly creating a subplot(111)
          plt.plot([1,2,3])
          # now create a subplot which represents the top plot of a grid
          # with 2 rows and 1 column. Since this subplot will overlap the
          # first, the plot (and its axes) previously created, will be removed
          plt.subplot(211)
          plt.plot(range(12))
          plt.subplot(212, facecolor='y') # creates 2nd subplot with yellow background

       If you do not want this behavior, use the
       :meth:`~matplotlib.figure.Figure.add_subplot` method or the
       :func:`~matplotlib.pyplot.axes` function instead.

    Keyword arguments:

      *facecolor*:
        The background color of the subplot, which can be any valid
        color specifier.  See :mod:`matplotlib.colors` for more
        information.

      *polar*:
        A boolean flag indicating whether the subplot plot should be
        a polar projection.  Defaults to *False*.

      *projection*:
        A string giving the name of a custom projection to be used
        for the subplot. This projection must have been previously
        registered. See :mod:`matplotlib.projections`.

    .. seealso::

        :func:`~matplotlib.pyplot.axes`
            For additional information on :func:`axes` and
            :func:`subplot` keyword arguments.

        :file:`gallery/pie_and_polar_charts/polar_scatter.py`
            For an example

    **Example:**

    .. plot:: gallery/subplots_axes_and_figures/subplot.py

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [29669 29674])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [29676 29684]))                  )
                nil [29657 33003])
            ("subplots" function
               (:documentation "
    Create a figure and a set of subplots

    This utility wrapper makes it convenient to create common layouts of
    subplots, including the enclosing figure object, in a single call.

    Parameters
    ----------
    nrows, ncols : int, optional, default: 1
        Number of rows/columns of the subplot grid.

    sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False
        Controls sharing of properties among x (`sharex`) or y (`sharey`)
        axes:

            - True or 'all': x- or y-axis will be shared among all
              subplots.
            - False or 'none': each subplot x- or y-axis will be
              independent.
            - 'row': each subplot row will share an x- or y-axis.
            - 'col': each subplot column will share an x- or y-axis.

        When subplots have a shared x-axis along a column, only the x tick
        labels of the bottom subplot are visible.  Similarly, when subplots
        have a shared y-axis along a row, only the y tick labels of the first
        column subplot are visible.

    squeeze : bool, optional, default: True
        - If True, extra dimensions are squeezed out from the returned Axes
          object:

            - if only one subplot is constructed (nrows=ncols=1), the
              resulting single Axes object is returned as a scalar.
            - for Nx1 or 1xN subplots, the returned object is a 1D numpy
              object array of Axes objects are returned as numpy 1D arrays.
            - for NxM, subplots with N>1 and M>1 are returned as a 2D arrays.

        - If False, no squeezing at all is done: the returned Axes object is
          always a 2D array containing Axes instances, even if it ends up
          being 1x1.

    subplot_kw : dict, optional
        Dict with keywords passed to the
        :meth:`~matplotlib.figure.Figure.add_subplot` call used to create each
        subplot.

    gridspec_kw : dict, optional
        Dict with keywords passed to the
        :class:`~matplotlib.gridspec.GridSpec` constructor used to create the
        grid the subplots are placed on.

    **fig_kw :
        All additional keyword arguments are passed to the :func:`figure` call.

    Returns
    -------
    fig : :class:`matplotlib.figure.Figure` object

    ax : Axes object or array of Axes objects.

        ax can be either a single :class:`matplotlib.axes.Axes` object or an
        array of Axes objects if more than one subplot was created.  The
        dimensions of the resulting array can be controlled with the squeeze
        keyword, see above.

    Examples
    --------
    First create some toy data:

    >>> x = np.linspace(0, 2*np.pi, 400)
    >>> y = np.sin(x**2)

    Creates just a figure and only one subplot

    >>> fig, ax = plt.subplots()
    >>> ax.plot(x, y)
    >>> ax.set_title('Simple plot')

    Creates two subplots and unpacks the output array immediately

    >>> f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)
    >>> ax1.plot(x, y)
    >>> ax1.set_title('Sharing Y axis')
    >>> ax2.scatter(x, y)

    Creates four polar axes, and accesses them through the returned array

    >>> fig, axes = plt.subplots(2, 2, subplot_kw=dict(polar=True))
    >>> axes[0, 0].plot(x, y)
    >>> axes[1, 1].scatter(x, y)

    Share a X axis with each column of subplots

    >>> plt.subplots(2, 2, sharex='col')

    Share a Y axis with each row of subplots

    >>> plt.subplots(2, 2, sharey='row')

    Share both X and Y axes with all subplots

    >>> plt.subplots(2, 2, sharex='all', sharey='all')

    Note that this is the same as

    >>> plt.subplots(2, 2, sharex=True, sharey=True)

    See Also
    --------
    figure
    subplot
    "
                :arguments 
                  ( ("nrows" variable nil (reparse-symbol function_parameters) [33018 33023])
                    ("ncols" variable nil (reparse-symbol function_parameters) [33027 33032])
                    ("sharex" variable nil (reparse-symbol function_parameters) [33036 33042])
                    ("sharey" variable nil (reparse-symbol function_parameters) [33050 33056])
                    ("squeeze" variable nil (reparse-symbol function_parameters) [33064 33071])
                    ("subplot_kw" variable nil (reparse-symbol function_parameters) [33091 33101])
                    ("gridspec_kw" variable nil (reparse-symbol function_parameters) [33108 33119])
                    ("fig_kw" variable nil (reparse-symbol function_parameters) [33126 33134]))                  )
                nil [33005 37079])
            ("subplot2grid" function
               (:documentation "
    Create an axis at specific location inside a regular grid.

    Parameters
    ----------
    shape : sequence of 2 ints
        Shape of grid in which to place axis.
        First entry is number of rows, second entry is number of columns.

    loc : sequence of 2 ints
        Location to place axis within grid.
        First entry is row number, second entry is column number.

    rowspan : int
        Number of rows for the axis to span to the right.

    colspan : int
        Number of columns for the axis to span downwards.

    fig : `Figure`, optional
        Figure to place axis in. Defaults to current figure.

    **kwargs
        Additional keyword arguments are handed to `add_subplot`.


    Notes
    -----
    The following call ::

        subplot2grid(shape, loc, rowspan=1, colspan=1)

    is identical to ::

        gridspec=GridSpec(shape[0], shape[1])
        subplotspec=gridspec.new_subplotspec(loc, rowspan, colspan)
        subplot(subplotspec)
    "
                :arguments 
                  ( ("shape" variable nil (reparse-symbol function_parameters) [37098 37103])
                    ("loc" variable nil (reparse-symbol function_parameters) [37105 37108])
                    ("rowspan" variable nil (reparse-symbol function_parameters) [37110 37117])
                    ("colspan" variable nil (reparse-symbol function_parameters) [37121 37128])
                    ("fig" variable nil (reparse-symbol function_parameters) [37132 37135])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [37142 37150]))                  )
                nil [37081 38689])
            ("twinx" function
               (:documentation "
    Make a second axes that shares the *x*-axis.  The new axes will
    overlay *ax* (or the current axes if *ax* is *None*).  The ticks
    for *ax2* will be placed on the right, and the *ax2* instance is
    returned.

    .. seealso::

       :file:`examples/api_examples/two_scales.py`
          For an example
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [38701 38703]))                  )
                nil [38691 39114])
            ("twiny" function
               (:documentation "
    Make a second axes that shares the *y*-axis.  The new axis will
    overlay *ax* (or the current axes if *ax* is *None*).  The ticks
    for *ax2* will be placed on the top, and the *ax2* instance is
    returned.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [39126 39128]))                  )
                nil [39116 39442])
            ("subplots_adjust" function
               (:documentation "
    Tune the subplot layout.

    call signature::

      subplots_adjust(left=None, bottom=None, right=None, top=None,
                      wspace=None, hspace=None)

    The parameter meanings (and suggested defaults) are::

      left  = 0.125  # the left side of the subplots of the figure
      right = 0.9    # the right side of the subplots of the figure
      bottom = 0.1   # the bottom of the subplots of the figure
      top = 0.9      # the top of the subplots of the figure
      wspace = 0.2   # the amount of width reserved for blank space between subplots,
                     # expressed as a fraction of the average axis width
      hspace = 0.2   # the amount of height reserved for white space between subplots,
                     # expressed as a fraction of the average axis height

    The actual defaults are controlled by the rc file
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [39464 39469])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [39471 39479]))                  )
                nil [39444 40418])
            ("subplot_tool" function
               (:documentation "
    Launch a subplot tool window for a figure.

    A :class:`matplotlib.widgets.SubplotTool` instance is returned.
    "
                :arguments 
                  ( ("targetfig" variable nil (reparse-symbol function_parameters) [40437 40446]))                  )
                nil [40420 41283])
            ("tight_layout" function
               (:documentation "
    Automatically adjust subplot parameters to give specified padding.

    Parameters
    ----------
    pad : float
        padding between the figure edge and the edges of subplots, as a fraction of the font-size.
    h_pad, w_pad : float
        padding (height/width) between edges of adjacent subplots.
        Defaults to `pad_inches`.
    rect : if rect is given, it is interpreted as a rectangle
        (left, bottom, right, top) in the normalized figure
        coordinate that the whole subplots area (including
        labels) will fit into. Default is (0, 0, 1, 1).

    "
                :arguments 
                  ( ("pad" variable nil (reparse-symbol function_parameters) [41302 41305])
                    ("h_pad" variable nil (reparse-symbol function_parameters) [41312 41317])
                    ("w_pad" variable nil (reparse-symbol function_parameters) [41324 41329])
                    ("rect" variable nil (reparse-symbol function_parameters) [41336 41340]))                  )
                nil [41285 42028])
            ("box" function
               (:documentation "
    Turn the axes box on or off.  *on* may be a boolean or a string,
    'on' or 'off'.

    If *on* is *None*, toggle state.
    "
                :arguments 
                  ( ("on" variable nil (reparse-symbol function_parameters) [42038 42040]))                  )
                nil [42030 42312])
            ("title" function
               (:documentation "
    Set a title of the current axes.

    Set one of the three available axes titles. The available titles are
    positioned above the axes in the center, flush with the left edge,
    and flush with the right edge.

    .. seealso::
        See :func:`~matplotlib.pyplot.text` for adding text
        to the current axes

    Parameters
    ----------
    label : str
        Text to use for the title

    fontdict : dict
        A dictionary controlling the appearance of the title text,
        the default `fontdict` is:

            {'fontsize': rcParams['axes.titlesize'],
            'fontweight' : rcParams['axes.titleweight'],
            'verticalalignment': 'baseline',
            'horizontalalignment': loc}

    loc : {'center', 'left', 'right'}, str, optional
        Which title to set, defaults to 'center'

    Returns
    -------
    text : :class:`~matplotlib.text.Text`
        The matplotlib text instance representing the title

    Other parameters
    ----------------
    kwargs : text properties
        Other keyword arguments are text properties, see
        :class:`~matplotlib.text.Text` for a list of valid text
        properties.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [42324 42325])
                    ("args" variable nil (reparse-symbol function_parameters) [42327 42332])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [42334 42342]))                  )
                nil [42314 43575])
            ("axis" function
               (:documentation "
    Convenience method to get or set axis properties.

    Calling with no arguments::

      >>> axis()

    returns the current axes limits ``[xmin, xmax, ymin, ymax]``.::

      >>> axis(v)

    sets the min and max of the x and y axes, with
    ``v = [xmin, xmax, ymin, ymax]``.::

      >>> axis('off')

    turns off the axis lines and labels.::

      >>> axis('equal')

    changes limits of *x* or *y* axis so that equal increments of *x*
    and *y* have the same length; a circle is circular.::

      >>> axis('scaled')

    achieves the same result by changing the dimensions of the plot box instead
    of the axis data limits.::

      >>> axis('tight')

    changes *x* and *y* axis limits such that all data is shown. If
    all data is already shown, it will move it to the center of the
    figure without modifying (*xmax* - *xmin*) or (*ymax* -
    *ymin*). Note this is slightly different than in MATLAB.::

      >>> axis('image')

    is 'scaled' with the axis limits equal to the data limits.::

      >>> axis('auto')

    and::

      >>> axis('normal')

    are deprecated. They restore default behavior; axis limits are automatically
    scaled to make the data fit comfortably within the plot box.

    if ``len(*v)==0``, you can pass in *xmin*, *xmax*, *ymin*, *ymax*
    as kwargs selectively to alter just those limits without changing
    the others.

      >>> axis('square')

    changes the limit ranges (*xmax*-*xmin*) and (*ymax*-*ymin*) of
    the *x* and *y* axes to be the same, and have the same scaling,
    resulting in a square plot.

    The xmin, xmax, ymin, ymax tuple is returned

    .. seealso::

        :func:`xlim`, :func:`ylim`
           For setting the x- and y-limits individually.
    "
                :arguments 
                  ( ("v" variable nil (reparse-symbol function_parameters) [43598 43600])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [43602 43610]))                  )
                nil [43589 45406])
            ("xlabel" function
               (:documentation "
    Set the *x* axis label of the current axis.

    Default override is::

      override = {
          'fontsize'            : 'small',
          'verticalalignment'   : 'top',
          'horizontalalignment' : 'center'
          }

    .. seealso::

        :func:`~matplotlib.pyplot.text`
            For information on how override and the optional args work
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [45419 45420])
                    ("args" variable nil (reparse-symbol function_parameters) [45422 45427])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [45429 45437]))                  )
                nil [45408 45868])
            ("ylabel" function
               (:documentation "
    Set the *y* axis label of the current axis.

    Defaults override is::

        override = {
           'fontsize'            : 'small',
           'verticalalignment'   : 'center',
           'horizontalalignment' : 'right',
           'rotation'='vertical' : }

    .. seealso::

        :func:`~matplotlib.pyplot.text`
            For information on how override and the optional args
            work.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [45881 45882])
                    ("args" variable nil (reparse-symbol function_parameters) [45884 45889])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [45891 45899]))                  )
                nil [45870 46377])
            ("xlim" function
               (:documentation "
    Get or set the *x* limits of the current axes.

    ::

      xmin, xmax = xlim()   # return the current xlim
      xlim( (xmin, xmax) )  # set the xlim to xmin, xmax
      xlim( xmin, xmax )    # set the xlim to xmin, xmax

    If you do not specify args, you can pass the xmin and xmax as
    kwargs, e.g.::

      xlim(xmax=3) # adjust the max leaving min unchanged
      xlim(xmin=1) # adjust the min leaving max unchanged

    Setting limits turns autoscaling off for the x-axis.

    The new axis limits are returned as a length 2 tuple.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [46388 46393])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [46395 46403]))                  )
                nil [46379 47101])
            ("ylim" function
               (:documentation "
    Get or set the *y*-limits of the current axes.

    ::

      ymin, ymax = ylim()   # return the current ylim
      ylim( (ymin, ymax) )  # set the ylim to ymin, ymax
      ylim( ymin, ymax )    # set the ylim to ymin, ymax

    If you do not specify args, you can pass the *ymin* and *ymax* as
    kwargs, e.g.::

      ylim(ymax=3) # adjust the max leaving min unchanged
      ylim(ymin=1) # adjust the min leaving max unchanged

    Setting limits turns autoscaling off for the y-axis.

    The new axis limits are returned as a length 2 tuple.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [47112 47117])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [47119 47127]))                  )
                nil [47103 47828])
            ("xscale" function
               (:documentation "
    Set the scaling of the *x*-axis.

    call signature::

      xscale(scale, **kwargs)

    The available scales are: %(scale)s

    Different keywords may be accepted, depending on the scale:

    %(scale_docs)s
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [47867 47872])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [47874 47882]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [47830 48155])
            ("yscale" function
               (:documentation "
    Set the scaling of the *y*-axis.

    call signature::

      yscale(scale, **kwargs)

    The available scales are: %(scale)s

    Different keywords may be accepted, depending on the scale:

    %(scale_docs)s
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [48194 48199])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [48201 48209]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [48157 48482])
            ("xticks" function
               (:documentation "
    Get or set the *x*-limits of the current tick locations and labels.

    ::

      # return locs, labels where locs is an array of tick locations and
      # labels is an array of tick labels.
      locs, labels = xticks()

      # set the locations of the xticks
      xticks( arange(6) )

      # set the locations and labels of the xticks
      xticks( arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue') )

    The keyword args, if any, are :class:`~matplotlib.text.Text`
    properties. For example, to rotate long labels::

      xticks( arange(12), calendar.month_name[1:13], rotation=17 )
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [48495 48500])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [48502 48510]))                  )
                nil [48484 49649])
            ("yticks" function
               (:documentation "
    Get or set the *y*-limits of the current tick locations and labels.

    ::

      # return locs, labels where locs is an array of tick locations and
      # labels is an array of tick labels.
      locs, labels = yticks()

      # set the locations of the yticks
      yticks( arange(6) )

      # set the locations and labels of the yticks
      yticks( arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue') )

    The keyword args, if any, are :class:`~matplotlib.text.Text`
    properties. For example, to rotate long labels::

      yticks( arange(12), calendar.month_name[1:13], rotation=45 )
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [49662 49667])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [49669 49677]))                  )
                nil [49651 50847])
            ("minorticks_on" function (:documentation "
    Display minor ticks on the current plot.

    Displaying minor ticks reduces performance; turn them off using
    minorticks_off() if drawing speed is a problem.
    ") nil [50849 51078])
            ("minorticks_off" function (:documentation "
    Remove minor ticks from the current plot.
    ") nil [51080 51191])
            ("rgrids" function
               (:documentation "
    Get or set the radial gridlines on a polar plot.

    call signatures::

      lines, labels = rgrids()
      lines, labels = rgrids(radii, labels=None, angle=22.5, **kwargs)

    When called with no arguments, :func:`rgrid` simply returns the
    tuple (*lines*, *labels*), where *lines* is an array of radial
    gridlines (:class:`~matplotlib.lines.Line2D` instances) and
    *labels* is an array of tick labels
    (:class:`~matplotlib.text.Text` instances). When called with
    arguments, the labels will appear at the specified radial
    distances and angles.

    *labels*, if not *None*, is a len(*radii*) list of strings of the
    labels to use at each angle.

    If *labels* is None, the rformatter will be used

    Examples::

      # set the locations of the radial gridlines and labels
      lines, labels = rgrids( (0.25, 0.5, 1.0) )

      # set the locations and labels of the radial gridlines and labels
      lines, labels = rgrids( (0.25, 0.5, 1.0), ('Tom', 'Dick', 'Harry' )

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [51204 51209])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [51211 51219]))                  )
                nil [51193 52639])
            ("thetagrids" function
               (:documentation "
    Get or set the theta locations of the gridlines in a polar plot.

    If no arguments are passed, return a tuple (*lines*, *labels*)
    where *lines* is an array of radial gridlines
    (:class:`~matplotlib.lines.Line2D` instances) and *labels* is an
    array of tick labels (:class:`~matplotlib.text.Text` instances)::

      lines, labels = thetagrids()

    Otherwise the syntax is::

      lines, labels = thetagrids(angles, labels=None, fmt='%d', frac = 1.1)

    set the angles at which to place the theta grids (these gridlines
    are equal along the theta dimension).

    *angles* is in degrees.

    *labels*, if not *None*, is a len(angles) list of strings of the
    labels to use at each angle.

    If *labels* is *None*, the labels will be ``fmt%angle``.

    *frac* is the fraction of the polar axes radius at which to place
    the label (1 is the edge). e.g., 1.05 is outside the axes and 0.95
    is inside the axes.

    Return value is a list of tuples (*lines*, *labels*):

      - *lines* are :class:`~matplotlib.lines.Line2D` instances

      - *labels* are :class:`~matplotlib.text.Text` instances.

    Note that on input, the *labels* argument is a list of strings,
    and on output it is a list of :class:`~matplotlib.text.Text`
    instances.

    Examples::

      # set the locations of the radial gridlines and labels
      lines, labels = thetagrids( range(45,360,90) )

      # set the locations and labels of the radial gridlines and labels
      lines, labels = thetagrids( range(45,360,90), ('NE', 'NW', 'SW','SE') )
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [52656 52661])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [52663 52671]))                  )
                nil [52641 54670])
            ("plotting" function nil nil [54693 54718])
            ("get_plot_commands" function (:documentation "
    Get a sorted list of all of the plotting commands.
    ") nil [54720 55628])
            ("" code nil nil [55641 55648])
            ("colors" function (:documentation "
    This is a do-nothing function to provide you with help on how
    matplotlib handles colors.

    Commands which take color arguments can use several formats to
    specify the colors.  For the basic built-in colors, you can use a
    single letter

      =====   =======
      Alias   Color
      =====   =======
      'b'     blue
      'g'     green
      'r'     red
      'c'     cyan
      'm'     magenta
      'y'     yellow
      'k'     black
      'w'     white
      =====   =======

    For a greater range of colors, you have two options.  You can
    specify the color using an html hex string, as in::

      color = '#eeefff'

    or you can pass an R,G,B tuple, where each of R,G,B are in the
    range [0,1].

    You can also use any legal html name for a color, for example::

      color = 'red'
      color = 'burlywood'
      color = 'chartreuse'

    The example below creates a subplot with a dark
    slate gray background::

       subplot(111, facecolor=(0.1843, 0.3098, 0.3098))

    Here is an example that creates a pale turquoise title::

      title('Is this the best color?', color='#afeeee')

    ") nil [55649 56821])
            ("colormaps" function (:documentation "
    Matplotlib provides a number of colormaps, and others can be added using
    :func:`~matplotlib.cm.register_cmap`.  This function documents the built-in
    colormaps, and will also return a list of all registered colormaps if called.

    You can set the colormap for an image, pcolor, scatter, etc,
    using a keyword argument::

      imshow(X, cmap=cm.hot)

    or using the :func:`set_cmap` function::

      imshow(X)
      pyplot.set_cmap('hot')
      pyplot.set_cmap('jet')

    In interactive mode, :func:`set_cmap` will update the colormap post-hoc,
    allowing you to see which one works best for your data.

    All built-in colormaps can be reversed by appending ``_r``: For instance,
    ``gray_r`` is the reverse of ``gray``.

    There are several common color schemes used in visualization:

    Sequential schemes
      for unipolar data that progresses from low to high
    Diverging schemes
      for bipolar data that emphasizes positive or negative deviations from a
      central value
    Cyclic schemes
      meant for plotting values that wrap around at the
      endpoints, such as phase angle, wind direction, or time of day
    Qualitative schemes
      for nominal data that has no inherent ordering, where color is used
      only to distinguish categories

    Matplotlib ships with 4 perceptually uniform color maps which are
    the recommended color maps for sequential data:

      =========   ===================================================
      Colormap    Description
      =========   ===================================================
      inferno     perceptually uniform shades of black-red-yellow
      magma       perceptually uniform shades of black-red-white
      plasma      perceptually uniform shades of blue-red-yellow
      viridis     perceptually uniform shades of blue-green-yellow
      =========   ===================================================

    The following colormaps are based on the `ColorBrewer
    <http://colorbrewer2.org>`_ color specifications and designs developed by
    Cynthia Brewer:

    ColorBrewer Diverging (luminance is highest at the midpoint, and
    decreases towards differently-colored endpoints):

      ========  ===================================
      Colormap  Description
      ========  ===================================
      BrBG      brown, white, blue-green
      PiYG      pink, white, yellow-green
      PRGn      purple, white, green
      PuOr      orange, white, purple
      RdBu      red, white, blue
      RdGy      red, white, gray
      RdYlBu    red, yellow, blue
      RdYlGn    red, yellow, green
      Spectral  red, orange, yellow, green, blue
      ========  ===================================

    ColorBrewer Sequential (luminance decreases monotonically):

      ========  ====================================
      Colormap  Description
      ========  ====================================
      Blues     white to dark blue
      BuGn      white, light blue, dark green
      BuPu      white, light blue, dark purple
      GnBu      white, light green, dark blue
      Greens    white to dark green
      Greys     white to black (not linear)
      Oranges   white, orange, dark brown
      OrRd      white, orange, dark red
      PuBu      white, light purple, dark blue
      PuBuGn    white, light purple, dark green
      PuRd      white, light purple, dark red
      Purples   white to dark purple
      RdPu      white, pink, dark purple
      Reds      white to dark red
      YlGn      light yellow, dark green
      YlGnBu    light yellow, light green, dark blue
      YlOrBr    light yellow, orange, dark brown
      YlOrRd    light yellow, orange, dark red
      ========  ====================================

    ColorBrewer Qualitative:

    (For plotting nominal data, :class:`ListedColormap` is used,
    not :class:`LinearSegmentedColormap`.  Different sets of colors are
    recommended for different numbers of categories.)

    * Accent
    * Dark2
    * Paired
    * Pastel1
    * Pastel2
    * Set1
    * Set2
    * Set3

    A set of colormaps derived from those of the same name provided
    with Matlab are also included:

      =========   =======================================================
      Colormap    Description
      =========   =======================================================
      autumn      sequential linearly-increasing shades of red-orange-yellow
      bone        sequential increasing black-white color map with
                  a tinge of blue, to emulate X-ray film
      cool        linearly-decreasing shades of cyan-magenta
      copper      sequential increasing shades of black-copper
      flag        repetitive red-white-blue-black pattern (not cyclic at
                  endpoints)
      gray        sequential linearly-increasing black-to-white
                  grayscale
      hot         sequential black-red-yellow-white, to emulate blackbody
                  radiation from an object at increasing temperatures
      hsv         cyclic red-yellow-green-cyan-blue-magenta-red, formed
                  by changing the hue component in the HSV color space
      jet         a spectral map with dark endpoints, blue-cyan-yellow-red;
                  based on a fluid-jet simulation by NCSA [#]_
      pink        sequential increasing pastel black-pink-white, meant
                  for sepia tone colorization of photographs
      prism       repetitive red-yellow-green-blue-purple-...-green pattern
                  (not cyclic at endpoints)
      spring      linearly-increasing shades of magenta-yellow
      summer      sequential linearly-increasing shades of green-yellow
      winter      linearly-increasing shades of blue-green
      =========   =======================================================

    A set of palettes from the `Yorick scientific visualisation
    package <https://dhmunro.github.io/yorick-doc/>`_, an evolution of
    the GIST package, both by David H. Munro are included:

      ============  =======================================================
      Colormap      Description
      ============  =======================================================
      gist_earth    mapmaker's colors from dark blue deep ocean to green
                    lowlands to brown highlands to white mountains
      gist_heat     sequential increasing black-red-orange-white, to emulate
                    blackbody radiation from an iron bar as it grows hotter
      gist_ncar     pseudo-spectral black-blue-green-yellow-red-purple-white
                    colormap from National Center for Atmospheric
                    Research [#]_
      gist_rainbow  runs through the colors in spectral order from red to
                    violet at full saturation (like *hsv* but not cyclic)
      gist_stern    \"Stern special\" color table from Interactive Data
                    Language software
      ============  =======================================================


    Other miscellaneous schemes:

      ============= =======================================================
      Colormap      Description
      ============= =======================================================
      afmhot        sequential black-orange-yellow-white blackbody
                    spectrum, commonly used in atomic force microscopy
      brg           blue-red-green
      bwr           diverging blue-white-red
      coolwarm      diverging blue-gray-red, meant to avoid issues with 3D
                    shading, color blindness, and ordering of colors [#]_
      CMRmap        \"Default colormaps on color images often reproduce to
                    confusing grayscale images. The proposed colormap
                    maintains an aesthetically pleasing color image that
                    automatically reproduces to a monotonic grayscale with
                    discrete, quantifiable saturation levels.\" [#]_
      cubehelix     Unlike most other color schemes cubehelix was designed
                    by D.A. Green to be monotonically increasing in terms
                    of perceived brightness. Also, when printed on a black
                    and white postscript printer, the scheme results in a
                    greyscale with monotonically increasing brightness.
                    This color scheme is named cubehelix because the r,g,b
                    values produced can be visualised as a squashed helix
                    around the diagonal in the r,g,b color cube.
      gnuplot       gnuplot's traditional pm3d scheme
                    (black-blue-red-yellow)
      gnuplot2      sequential color printable as gray
                    (black-blue-violet-yellow-white)
      ocean         green-blue-white
      rainbow       spectral purple-blue-green-yellow-orange-red colormap
                    with diverging luminance
      seismic       diverging blue-white-red
      nipy_spectral black-purple-blue-green-yellow-red-white spectrum,
                    originally from the Neuroimaging in Python project
      terrain       mapmaker's colors, blue-green-yellow-brown-white,
                    originally from IGOR Pro
      ============= =======================================================

    The following colormaps are redundant and may be removed in future
    versions.  It's recommended to use the names in the descriptions
    instead, which produce identical output:

      =========  =======================================================
      Colormap   Description
      =========  =======================================================
      gist_gray  identical to *gray*
      gist_yarg  identical to *gray_r*
      binary     identical to *gray_r*
      spectral   identical to *nipy_spectral* [#]_
      =========  =======================================================

    .. rubric:: Footnotes

    .. [#] Rainbow colormaps, ``jet`` in particular, are considered a poor
      choice for scientific visualization by many researchers: `Rainbow Color
      Map (Still) Considered Harmful
      <http://ieeexplore.ieee.org/document/4118486/?arnumber=4118486>`_

    .. [#] Resembles \"BkBlAqGrYeOrReViWh200\" from NCAR Command
      Language. See `Color Table Gallery
      <https://www.ncl.ucar.edu/Document/Graphics/color_table_gallery.shtml>`_

    .. [#] See `Diverging Color Maps for Scientific Visualization
      <http://www.kennethmoreland.com/color-maps/>`_ by Kenneth Moreland.

    .. [#] See `A Color Map for Effective Black-and-White Rendering of
      Color-Scale Images
      <https://www.mathworks.com/matlabcentral/fileexchange/2662-cmrmap-m>`_
      by Carey Rappaport

    .. [#] Changed to distinguish from ColorBrewer's *Spectral* map.
      :func:`spectral` still works, but
      ``set_cmap('nipy_spectral')`` is recommended for clarity.


    ") nil [56823 67760])
            ("_setup_pyplot_info_docstrings" function (:documentation "
    Generates the plotting and docstring.

    These must be done after the entire module is imported, so it is
    called from the end of this module, which is generated by
    boilerplate.py.
    ") nil [67762 69322])
            ("colorbar" function (:arguments 
              ( ("mappable" variable nil (reparse-symbol function_parameters) [69402 69410])
                ("cax" variable nil (reparse-symbol function_parameters) [69417 69420])
                ("ax" variable nil (reparse-symbol function_parameters) [69427 69429])
                ("kw" variable nil (reparse-symbol function_parameters) [69436 69440]))              ) nil [69389 69912])
            ("colorbar" variable nil nil [69912 69963])
            ("clim" function
               (:documentation "
    Set the color limits of the current image.

    To apply clim to all axes images do::

      clim(0, 0.5)

    If either *vmin* or *vmax* is None, the image min/max respectively
    will be used for color scaling.

    If you want to set the clim of multiple images,
    use, for example::

      for im in gca().get_images():
          im.set_clim(0, 0.05)

    "
                :arguments 
                  ( ("vmin" variable nil (reparse-symbol function_parameters) [69975 69979])
                    ("vmax" variable nil (reparse-symbol function_parameters) [69986 69990]))                  )
                nil [69966 70520])
            ("set_cmap" function
               (:documentation "
    Set the default colormap.  Applies to the current image if any.
    See help(colormaps) for more information.

    *cmap* must be a :class:`~matplotlib.colors.Colormap` instance, or
    the name of a registered colormap.

    See :func:`matplotlib.cm.register_cmap` and
    :func:`matplotlib.cm.get_cmap`.
    "
                :arguments 
                  ( ("cmap" variable nil (reparse-symbol function_parameters) [70535 70539]))                  )
                nil [70522 70995])
            ("" code nil nil [71020 71029])
            ("imread" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [71041 71046])
                ("kwargs" variable nil (reparse-symbol function_parameters) [71048 71056]))              ) nil [71030 71095])
            ("" code nil nil [71119 71128])
            ("imsave" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [71140 71145])
                ("kwargs" variable nil (reparse-symbol function_parameters) [71147 71155]))              ) nil [71129 71194])
            ("matshow" function
               (:documentation "
    Display an array as a matrix in a new figure window.

    The origin is set at the upper left hand corner and rows (first
    dimension of the array) are displayed horizontally.  The aspect
    ratio of the figure window is that of the array, unless this would
    make an excessively short or narrow figure.

    Tick labels for the xaxis are placed on top.

    With the exception of *fignum*, keyword arguments are passed to
    :func:`~matplotlib.pyplot.imshow`.  You may set the *origin*
    kwarg to \"lower\" if you want the first row in the array to be
    at the bottom instead of the top.


    *fignum*: [ None | integer | False ]
      By default, :func:`matshow` creates a new figure window with
      automatic numbering.  If *fignum* is given as an integer, the
      created figure will use this figure number.  Because of how
      :func:`matshow` tries to set the figure aspect ratio to be the
      one of the array, if you provide the number of an already
      existing figure, strange things may happen.

      If *fignum* is *False* or 0, a new figure window will **NOT** be created.
    "
                :arguments 
                  ( ("A" variable nil (reparse-symbol function_parameters) [71208 71209])
                    ("fignum" variable nil (reparse-symbol function_parameters) [71211 71217])
                    ("kw" variable nil (reparse-symbol function_parameters) [71224 71228]))                  )
                nil [71196 72695])
            ("polar" function
               (:documentation "
    Make a polar plot.

    call signature::

      polar(theta, r, **kwargs)

    Multiple *theta*, *r* arguments are supported, with format
    strings, as in :func:`~matplotlib.pyplot.plot`.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [72707 72712])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [72714 72722]))                  )
                nil [72697 73285])
            ("plotfile" function
               (:documentation "
    Plot the data in a file.

    *cols* is a sequence of column identifiers to plot.  An identifier
    is either an int or a string.  If it is an int, it indicates the
    column number.  If it is a string, it indicates the column header.
    matplotlib will make column headers lower case, replace spaces with
    underscores, and remove all illegal characters; so ``'Adj Close*'``
    will have name ``'adj_close'``.

    - If len(*cols*) == 1, only that column will be plotted on the *y* axis.

    - If len(*cols*) > 1, the first element will be an identifier for
      data for the *x* axis and the remaining elements will be the
      column indexes for multiple subplots if *subplots* is *True*
      (the default), or for lines in a single subplot if *subplots*
      is *False*.

    *plotfuncs*, if not *None*, is a dictionary mapping identifier to
    an :class:`~matplotlib.axes.Axes` plotting function as a string.
    Default is 'plot', other choices are 'semilogy', 'fill', 'bar',
    etc.  You must use the same type of identifier in the *cols*
    vector as you use in the *plotfuncs* dictionary, e.g., integer
    column numbers in both or column names in both. If *subplots*
    is *False*, then including any function such as 'semilogy'
    that changes the axis scaling will set the scaling for all
    columns.

    *comments*, *skiprows*, *checkrows*, *delimiter*, and *names*
    are all passed on to :func:`matplotlib.pylab.csv2rec` to
    load the data into a record array.

    If *newfig* is *True*, the plot always will be made in a new figure;
    if *False*, it will be made in the current figure if one exists,
    else in a new figure.

    kwargs are passed on to plotting functions.

    Example usage::

      # plot the 2nd and 4th column against the 1st in two subplots
      plotfile(fname, (0,1,3))

      # plot using column names; specify an alternate plot type for volume
      plotfile(fname, ('date', 'volume', 'adj_close'),
                                    plotfuncs={'volume': 'semilogy'})

    Note: plotfile is intended as a convenience for quickly plotting
    data from flat files; it is not intended as an alternative
    interface to general plotting with pyplot or matplotlib.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [73300 73305])
                    ("cols" variable nil (reparse-symbol function_parameters) [73307 73311])
                    ("plotfuncs" variable nil (reparse-symbol function_parameters) [73318 73327])
                    ("comments" variable nil (reparse-symbol function_parameters) [73347 73355])
                    ("skiprows" variable nil (reparse-symbol function_parameters) [73361 73369])
                    ("checkrows" variable nil (reparse-symbol function_parameters) [73373 73382])
                    ("delimiter" variable nil (reparse-symbol function_parameters) [73386 73395])
                    ("names" variable nil (reparse-symbol function_parameters) [73414 73419])
                    ("subplots" variable nil (reparse-symbol function_parameters) [73426 73434])
                    ("newfig" variable nil (reparse-symbol function_parameters) [73441 73447])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [73454 73462]))                  )
                nil [73287 77548])
            ("_autogen_docstring" function
               (:documentation "Autogenerated wrappers will get their docstring from a base function
    with an addendum."
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [77573 77577]))                  )
                nil [77550 77894])
            ("" code nil nil [78012 78022])
            ("spy" function (:arguments 
              ( ("Z" variable nil (reparse-symbol function_parameters) [78031 78032])
                ("precision" variable nil (reparse-symbol function_parameters) [78034 78043])
                ("marker" variable nil (reparse-symbol function_parameters) [78047 78053])
                ("markersize" variable nil (reparse-symbol function_parameters) [78060 78070])
                ("aspect" variable nil (reparse-symbol function_parameters) [78077 78083])
                ("kwargs" variable nil (reparse-symbol function_parameters) [78093 78101]))              ) nil [78023 78667])
            ("install_repl_displayhook" code nil nil [78965 78991])
            ("" code nil nil [79185 79197])
            ("acorr" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [79208 79209])
                ("hold" variable nil (reparse-symbol function_parameters) [79211 79215])
                ("data" variable nil (reparse-symbol function_parameters) [79222 79226])
                ("kwargs" variable nil (reparse-symbol function_parameters) [79233 79241]))              ) nil [79198 79704])
            ("" code nil nil [79816 79837])
            ("angle_spectrum" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [79857 79858])
                ("Fs" variable nil (reparse-symbol function_parameters) [79860 79862])
                ("Fc" variable nil (reparse-symbol function_parameters) [79869 79871])
                ("window" variable nil (reparse-symbol function_parameters) [79878 79884])
                ("pad_to" variable nil (reparse-symbol function_parameters) [79891 79897])
                ("sides" variable nil (reparse-symbol function_parameters) [79904 79909])
                ("hold" variable nil (reparse-symbol function_parameters) [79935 79939])
                ("data" variable nil (reparse-symbol function_parameters) [79946 79950])
                ("kwargs" variable nil (reparse-symbol function_parameters) [79957 79965]))              ) nil [79838 80526])
            ("" code nil nil [80638 80650])
            ("arrow" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [80661 80662])
                ("y" variable nil (reparse-symbol function_parameters) [80664 80665])
                ("dx" variable nil (reparse-symbol function_parameters) [80667 80669])
                ("dy" variable nil (reparse-symbol function_parameters) [80671 80673])
                ("hold" variable nil (reparse-symbol function_parameters) [80675 80679])
                ("kwargs" variable nil (reparse-symbol function_parameters) [80686 80694]))              ) nil [80651 81157])
            ("" code nil nil [81269 81283])
            ("axhline" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [81296 81297])
                ("xmin" variable nil (reparse-symbol function_parameters) [81301 81305])
                ("xmax" variable nil (reparse-symbol function_parameters) [81309 81313])
                ("hold" variable nil (reparse-symbol function_parameters) [81317 81321])
                ("kwargs" variable nil (reparse-symbol function_parameters) [81328 81336]))              ) nil [81284 81814])
            ("" code nil nil [81926 81940])
            ("axhspan" function (:arguments 
              ( ("ymin" variable nil (reparse-symbol function_parameters) [81953 81957])
                ("ymax" variable nil (reparse-symbol function_parameters) [81959 81963])
                ("xmin" variable nil (reparse-symbol function_parameters) [81965 81969])
                ("xmax" variable nil (reparse-symbol function_parameters) [81973 81977])
                ("hold" variable nil (reparse-symbol function_parameters) [81981 81985])
                ("kwargs" variable nil (reparse-symbol function_parameters) [81992 82000]))              ) nil [81941 82485])
            ("" code nil nil [82597 82611])
            ("axvline" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [82624 82625])
                ("ymin" variable nil (reparse-symbol function_parameters) [82629 82633])
                ("ymax" variable nil (reparse-symbol function_parameters) [82637 82641])
                ("hold" variable nil (reparse-symbol function_parameters) [82645 82649])
                ("kwargs" variable nil (reparse-symbol function_parameters) [82656 82664]))              ) nil [82612 83142])
            ("" code nil nil [83254 83268])
            ("axvspan" function (:arguments 
              ( ("xmin" variable nil (reparse-symbol function_parameters) [83281 83285])
                ("xmax" variable nil (reparse-symbol function_parameters) [83287 83291])
                ("ymin" variable nil (reparse-symbol function_parameters) [83293 83297])
                ("ymax" variable nil (reparse-symbol function_parameters) [83301 83305])
                ("hold" variable nil (reparse-symbol function_parameters) [83309 83313])
                ("kwargs" variable nil (reparse-symbol function_parameters) [83320 83328]))              ) nil [83269 83813])
            ("" code nil nil [83925 83935])
            ("bar" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [83944 83949])
                ("kwargs" variable nil (reparse-symbol function_parameters) [83951 83959]))              ) nil [83936 84448])
            ("" code nil nil [84560 84571])
            ("barh" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [84581 84586])
                ("kwargs" variable nil (reparse-symbol function_parameters) [84588 84596]))              ) nil [84572 85086])
            ("" code nil nil [85198 85216])
            ("broken_barh" function (:arguments 
              ( ("xranges" variable nil (reparse-symbol function_parameters) [85233 85240])
                ("yrange" variable nil (reparse-symbol function_parameters) [85242 85248])
                ("hold" variable nil (reparse-symbol function_parameters) [85250 85254])
                ("data" variable nil (reparse-symbol function_parameters) [85261 85265])
                ("kwargs" variable nil (reparse-symbol function_parameters) [85272 85280]))              ) nil [85217 85763])
            ("" code nil nil [85875 85889])
            ("boxplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [85902 85903])
                ("notch" variable nil (reparse-symbol function_parameters) [85905 85910])
                ("sym" variable nil (reparse-symbol function_parameters) [85917 85920])
                ("vert" variable nil (reparse-symbol function_parameters) [85927 85931])
                ("whis" variable nil (reparse-symbol function_parameters) [85938 85942])
                ("positions" variable nil (reparse-symbol function_parameters) [85949 85958])
                ("widths" variable nil (reparse-symbol function_parameters) [85977 85983])
                ("patch_artist" variable nil (reparse-symbol function_parameters) [85990 86002])
                ("bootstrap" variable nil (reparse-symbol function_parameters) [86009 86018])
                ("usermedians" variable nil (reparse-symbol function_parameters) [86025 86036])
                ("conf_intervals" variable nil (reparse-symbol function_parameters) [86055 86069])
                ("meanline" variable nil (reparse-symbol function_parameters) [86076 86084])
                ("showmeans" variable nil (reparse-symbol function_parameters) [86091 86100])
                ("showcaps" variable nil (reparse-symbol function_parameters) [86107 86115])
                ("showbox" variable nil (reparse-symbol function_parameters) [86134 86141])
                ("showfliers" variable nil (reparse-symbol function_parameters) [86148 86158])
                ("boxprops" variable nil (reparse-symbol function_parameters) [86165 86173])
                ("labels" variable nil (reparse-symbol function_parameters) [86180 86186])
                ("flierprops" variable nil (reparse-symbol function_parameters) [86205 86215])
                ("medianprops" variable nil (reparse-symbol function_parameters) [86222 86233])
                ("meanprops" variable nil (reparse-symbol function_parameters) [86240 86249])
                ("capprops" variable nil (reparse-symbol function_parameters) [86256 86264])
                ("whiskerprops" variable nil (reparse-symbol function_parameters) [86283 86295])
                ("manage_xticks" variable nil (reparse-symbol function_parameters) [86302 86315])
                ("autorange" variable nil (reparse-symbol function_parameters) [86322 86331])
                ("zorder" variable nil (reparse-symbol function_parameters) [86339 86345])
                ("hold" variable nil (reparse-symbol function_parameters) [86364 86368])
                ("data" variable nil (reparse-symbol function_parameters) [86375 86379]))              ) nil [85890 87636])
            ("" code nil nil [87748 87761])
            ("cohere" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [87773 87774])
                ("y" variable nil (reparse-symbol function_parameters) [87776 87777])
                ("NFFT" variable nil (reparse-symbol function_parameters) [87779 87783])
                ("Fs" variable nil (reparse-symbol function_parameters) [87789 87791])
                ("Fc" variable nil (reparse-symbol function_parameters) [87795 87797])
                ("detrend" variable nil (reparse-symbol function_parameters) [87801 87808])
                ("window" variable nil (reparse-symbol function_parameters) [87839 87845])
                ("noverlap" variable nil (reparse-symbol function_parameters) [87867 87875])
                ("pad_to" variable nil (reparse-symbol function_parameters) [87879 87885])
                ("sides" variable nil (reparse-symbol function_parameters) [87892 87897])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [87920 87933])
                ("hold" variable nil (reparse-symbol function_parameters) [87940 87944])
                ("data" variable nil (reparse-symbol function_parameters) [87951 87955])
                ("kwargs" variable nil (reparse-symbol function_parameters) [87962 87970]))              ) nil [87762 88642])
            ("" code nil nil [88754 88767])
            ("clabel" function (:arguments 
              ( ("CS" variable nil (reparse-symbol function_parameters) [88779 88781])
                ("args" variable nil (reparse-symbol function_parameters) [88783 88788])
                ("kwargs" variable nil (reparse-symbol function_parameters) [88790 88798]))              ) nil [88768 89294])
            ("" code nil nil [89406 89420])
            ("contour" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [89433 89438])
                ("kwargs" variable nil (reparse-symbol function_parameters) [89440 89448]))              ) nil [89421 89976])
            ("" code nil nil [90088 90103])
            ("contourf" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [90117 90122])
                ("kwargs" variable nil (reparse-symbol function_parameters) [90124 90132]))              ) nil [90104 90661])
            ("" code nil nil [90773 90783])
            ("csd" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [90792 90793])
                ("y" variable nil (reparse-symbol function_parameters) [90795 90796])
                ("NFFT" variable nil (reparse-symbol function_parameters) [90798 90802])
                ("Fs" variable nil (reparse-symbol function_parameters) [90809 90811])
                ("Fc" variable nil (reparse-symbol function_parameters) [90818 90820])
                ("detrend" variable nil (reparse-symbol function_parameters) [90827 90834])
                ("window" variable nil (reparse-symbol function_parameters) [90841 90847])
                ("noverlap" variable nil (reparse-symbol function_parameters) [90862 90870])
                ("pad_to" variable nil (reparse-symbol function_parameters) [90877 90883])
                ("sides" variable nil (reparse-symbol function_parameters) [90890 90895])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [90902 90915])
                ("return_line" variable nil (reparse-symbol function_parameters) [90930 90941])
                ("hold" variable nil (reparse-symbol function_parameters) [90948 90952])
                ("data" variable nil (reparse-symbol function_parameters) [90959 90963])
                ("kwargs" variable nil (reparse-symbol function_parameters) [90970 90978]))              ) nil [90784 91663])
            ("" code nil nil [91775 91790])
            ("errorbar" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [91804 91805])
                ("y" variable nil (reparse-symbol function_parameters) [91807 91808])
                ("yerr" variable nil (reparse-symbol function_parameters) [91810 91814])
                ("xerr" variable nil (reparse-symbol function_parameters) [91821 91825])
                ("fmt" variable nil (reparse-symbol function_parameters) [91832 91835])
                ("ecolor" variable nil (reparse-symbol function_parameters) [91840 91846])
                ("elinewidth" variable nil (reparse-symbol function_parameters) [91853 91863])
                ("capsize" variable nil (reparse-symbol function_parameters) [91883 91890])
                ("barsabove" variable nil (reparse-symbol function_parameters) [91897 91906])
                ("lolims" variable nil (reparse-symbol function_parameters) [91914 91920])
                ("uplims" variable nil (reparse-symbol function_parameters) [91928 91934])
                ("xlolims" variable nil (reparse-symbol function_parameters) [91955 91962])
                ("xuplims" variable nil (reparse-symbol function_parameters) [91970 91977])
                ("errorevery" variable nil (reparse-symbol function_parameters) [91985 91995])
                ("capthick" variable nil (reparse-symbol function_parameters) [91999 92007])
                ("hold" variable nil (reparse-symbol function_parameters) [92027 92031])
                ("data" variable nil (reparse-symbol function_parameters) [92038 92042])
                ("kwargs" variable nil (reparse-symbol function_parameters) [92049 92057]))              ) nil [91791 92869])
            ("" code nil nil [92981 92997])
            ("eventplot" function (:arguments 
              ( ("positions" variable nil (reparse-symbol function_parameters) [93012 93021])
                ("orientation" variable nil (reparse-symbol function_parameters) [93023 93034])
                ("lineoffsets" variable nil (reparse-symbol function_parameters) [93049 93060])
                ("linelengths" variable nil (reparse-symbol function_parameters) [93064 93075])
                ("linewidths" variable nil (reparse-symbol function_parameters) [93093 93103])
                ("colors" variable nil (reparse-symbol function_parameters) [93110 93116])
                ("linestyles" variable nil (reparse-symbol function_parameters) [93123 93133])
                ("hold" variable nil (reparse-symbol function_parameters) [93143 93147])
                ("data" variable nil (reparse-symbol function_parameters) [93168 93172])
                ("kwargs" variable nil (reparse-symbol function_parameters) [93179 93187]))              ) nil [92998 93879])
            ("" code nil nil [93991 94002])
            ("fill" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [94012 94017])
                ("kwargs" variable nil (reparse-symbol function_parameters) [94019 94027]))              ) nil [94003 94517])
            ("" code nil nil [94629 94648])
            ("fill_between" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [94666 94667])
                ("y1" variable nil (reparse-symbol function_parameters) [94669 94671])
                ("y2" variable nil (reparse-symbol function_parameters) [94673 94675])
                ("where" variable nil (reparse-symbol function_parameters) [94679 94684])
                ("interpolate" variable nil (reparse-symbol function_parameters) [94691 94702])
                ("step" variable nil (reparse-symbol function_parameters) [94710 94714])
                ("hold" variable nil (reparse-symbol function_parameters) [94738 94742])
                ("data" variable nil (reparse-symbol function_parameters) [94749 94753])
                ("kwargs" variable nil (reparse-symbol function_parameters) [94760 94768]))              ) nil [94649 95358])
            ("" code nil nil [95470 95490])
            ("fill_betweenx" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [95509 95510])
                ("x1" variable nil (reparse-symbol function_parameters) [95512 95514])
                ("x2" variable nil (reparse-symbol function_parameters) [95516 95518])
                ("where" variable nil (reparse-symbol function_parameters) [95522 95527])
                ("step" variable nil (reparse-symbol function_parameters) [95534 95538])
                ("interpolate" variable nil (reparse-symbol function_parameters) [95545 95556])
                ("hold" variable nil (reparse-symbol function_parameters) [95582 95586])
                ("data" variable nil (reparse-symbol function_parameters) [95593 95597])
                ("kwargs" variable nil (reparse-symbol function_parameters) [95604 95612]))              ) nil [95491 96174])
            ("" code nil nil [96286 96299])
            ("hexbin" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [96311 96312])
                ("y" variable nil (reparse-symbol function_parameters) [96314 96315])
                ("C" variable nil (reparse-symbol function_parameters) [96317 96318])
                ("gridsize" variable nil (reparse-symbol function_parameters) [96325 96333])
                ("bins" variable nil (reparse-symbol function_parameters) [96339 96343])
                ("xscale" variable nil (reparse-symbol function_parameters) [96350 96356])
                ("yscale" variable nil (reparse-symbol function_parameters) [96378 96384])
                ("extent" variable nil (reparse-symbol function_parameters) [96395 96401])
                ("cmap" variable nil (reparse-symbol function_parameters) [96408 96412])
                ("norm" variable nil (reparse-symbol function_parameters) [96419 96423])
                ("vmin" variable nil (reparse-symbol function_parameters) [96430 96434])
                ("vmax" variable nil (reparse-symbol function_parameters) [96452 96456])
                ("alpha" variable nil (reparse-symbol function_parameters) [96463 96468])
                ("linewidths" variable nil (reparse-symbol function_parameters) [96475 96485])
                ("edgecolors" variable nil (reparse-symbol function_parameters) [96492 96502])
                ("reduce_C_function" variable nil (reparse-symbol function_parameters) [96522 96539])
                ("mincnt" variable nil (reparse-symbol function_parameters) [96549 96555])
                ("marginals" variable nil (reparse-symbol function_parameters) [96562 96571])
                ("hold" variable nil (reparse-symbol function_parameters) [96579 96583])
                ("data" variable nil (reparse-symbol function_parameters) [96601 96605])
                ("kwargs" variable nil (reparse-symbol function_parameters) [96612 96620]))              ) nil [96300 97475])
            ("" code nil nil [97587 97598])
            ("hist" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [97608 97609])
                ("bins" variable nil (reparse-symbol function_parameters) [97611 97615])
                ("range" variable nil (reparse-symbol function_parameters) [97622 97627])
                ("density" variable nil (reparse-symbol function_parameters) [97634 97641])
                ("weights" variable nil (reparse-symbol function_parameters) [97648 97655])
                ("cumulative" variable nil (reparse-symbol function_parameters) [97662 97672])
                ("bottom" variable nil (reparse-symbol function_parameters) [97689 97695])
                ("histtype" variable nil (reparse-symbol function_parameters) [97702 97710])
                ("align" variable nil (reparse-symbol function_parameters) [97718 97723])
                ("orientation" variable nil (reparse-symbol function_parameters) [97731 97742])
                ("rwidth" variable nil (reparse-symbol function_parameters) [97764 97770])
                ("log" variable nil (reparse-symbol function_parameters) [97777 97780])
                ("color" variable nil (reparse-symbol function_parameters) [97788 97793])
                ("label" variable nil (reparse-symbol function_parameters) [97800 97805])
                ("stacked" variable nil (reparse-symbol function_parameters) [97812 97819])
                ("normed" variable nil (reparse-symbol function_parameters) [97836 97842])
                ("hold" variable nil (reparse-symbol function_parameters) [97849 97853])
                ("data" variable nil (reparse-symbol function_parameters) [97860 97864])
                ("kwargs" variable nil (reparse-symbol function_parameters) [97871 97879]))              ) nil [97599 98664])
            ("" code nil nil [98776 98789])
            ("hist2d" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [98801 98802])
                ("y" variable nil (reparse-symbol function_parameters) [98804 98805])
                ("bins" variable nil (reparse-symbol function_parameters) [98807 98811])
                ("range" variable nil (reparse-symbol function_parameters) [98816 98821])
                ("normed" variable nil (reparse-symbol function_parameters) [98828 98834])
                ("weights" variable nil (reparse-symbol function_parameters) [98842 98849])
                ("cmin" variable nil (reparse-symbol function_parameters) [98856 98860])
                ("cmax" variable nil (reparse-symbol function_parameters) [98878 98882])
                ("hold" variable nil (reparse-symbol function_parameters) [98889 98893])
                ("data" variable nil (reparse-symbol function_parameters) [98900 98904])
                ("kwargs" variable nil (reparse-symbol function_parameters) [98911 98919]))              ) nil [98790 99528])
            ("" code nil nil [99640 99653])
            ("hlines" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [99665 99666])
                ("xmin" variable nil (reparse-symbol function_parameters) [99668 99672])
                ("xmax" variable nil (reparse-symbol function_parameters) [99674 99678])
                ("colors" variable nil (reparse-symbol function_parameters) [99680 99686])
                ("linestyles" variable nil (reparse-symbol function_parameters) [99692 99702])
                ("label" variable nil (reparse-symbol function_parameters) [99712 99717])
                ("hold" variable nil (reparse-symbol function_parameters) [99722 99726])
                ("data" variable nil (reparse-symbol function_parameters) [99744 99748])
                ("kwargs" variable nil (reparse-symbol function_parameters) [99755 99763]))              ) nil [99654 100314])
            ("" code nil nil [100426 100439])
            ("imshow" function (:arguments 
              ( ("X" variable nil (reparse-symbol function_parameters) [100451 100452])
                ("cmap" variable nil (reparse-symbol function_parameters) [100454 100458])
                ("norm" variable nil (reparse-symbol function_parameters) [100465 100469])
                ("aspect" variable nil (reparse-symbol function_parameters) [100476 100482])
                ("interpolation" variable nil (reparse-symbol function_parameters) [100489 100502])
                ("alpha" variable nil (reparse-symbol function_parameters) [100509 100514])
                ("vmin" variable nil (reparse-symbol function_parameters) [100532 100536])
                ("vmax" variable nil (reparse-symbol function_parameters) [100543 100547])
                ("origin" variable nil (reparse-symbol function_parameters) [100554 100560])
                ("extent" variable nil (reparse-symbol function_parameters) [100567 100573])
                ("shape" variable nil (reparse-symbol function_parameters) [100580 100585])
                ("filternorm" variable nil (reparse-symbol function_parameters) [100603 100613])
                ("filterrad" variable nil (reparse-symbol function_parameters) [100617 100626])
                ("imlim" variable nil (reparse-symbol function_parameters) [100632 100637])
                ("resample" variable nil (reparse-symbol function_parameters) [100644 100652])
                ("url" variable nil (reparse-symbol function_parameters) [100659 100662])
                ("hold" variable nil (reparse-symbol function_parameters) [100680 100684])
                ("data" variable nil (reparse-symbol function_parameters) [100691 100695])
                ("kwargs" variable nil (reparse-symbol function_parameters) [100702 100710]))              ) nil [100440 101535])
            ("" code nil nil [101647 101660])
            ("loglog" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [101672 101677])
                ("kwargs" variable nil (reparse-symbol function_parameters) [101679 101687]))              ) nil [101661 102179])
            ("" code nil nil [102291 102316])
            ("magnitude_spectrum" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [102340 102341])
                ("Fs" variable nil (reparse-symbol function_parameters) [102343 102345])
                ("Fc" variable nil (reparse-symbol function_parameters) [102352 102354])
                ("window" variable nil (reparse-symbol function_parameters) [102361 102367])
                ("pad_to" variable nil (reparse-symbol function_parameters) [102374 102380])
                ("sides" variable nil (reparse-symbol function_parameters) [102410 102415])
                ("scale" variable nil (reparse-symbol function_parameters) [102422 102427])
                ("hold" variable nil (reparse-symbol function_parameters) [102434 102438])
                ("data" variable nil (reparse-symbol function_parameters) [102445 102449])
                ("kwargs" variable nil (reparse-symbol function_parameters) [102456 102464]))              ) nil [102317 103082])
            ("" code nil nil [103194 103207])
            ("pcolor" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [103219 103224])
                ("kwargs" variable nil (reparse-symbol function_parameters) [103226 103234]))              ) nil [103208 103738])
            ("" code nil nil [103850 103867])
            ("pcolormesh" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [103883 103888])
                ("kwargs" variable nil (reparse-symbol function_parameters) [103890 103898]))              ) nil [103868 104406])
            ("" code nil nil [104518 104539])
            ("phase_spectrum" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [104559 104560])
                ("Fs" variable nil (reparse-symbol function_parameters) [104562 104564])
                ("Fc" variable nil (reparse-symbol function_parameters) [104571 104573])
                ("window" variable nil (reparse-symbol function_parameters) [104580 104586])
                ("pad_to" variable nil (reparse-symbol function_parameters) [104593 104599])
                ("sides" variable nil (reparse-symbol function_parameters) [104606 104611])
                ("hold" variable nil (reparse-symbol function_parameters) [104637 104641])
                ("data" variable nil (reparse-symbol function_parameters) [104648 104652])
                ("kwargs" variable nil (reparse-symbol function_parameters) [104659 104667]))              ) nil [104540 105228])
            ("" code nil nil [105340 105350])
            ("pie" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [105359 105360])
                ("explode" variable nil (reparse-symbol function_parameters) [105362 105369])
                ("labels" variable nil (reparse-symbol function_parameters) [105376 105382])
                ("colors" variable nil (reparse-symbol function_parameters) [105389 105395])
                ("autopct" variable nil (reparse-symbol function_parameters) [105402 105409])
                ("pctdistance" variable nil (reparse-symbol function_parameters) [105424 105435])
                ("shadow" variable nil (reparse-symbol function_parameters) [105441 105447])
                ("labeldistance" variable nil (reparse-symbol function_parameters) [105455 105468])
                ("startangle" variable nil (reparse-symbol function_parameters) [105474 105484])
                ("radius" variable nil (reparse-symbol function_parameters) [105499 105505])
                ("counterclock" variable nil (reparse-symbol function_parameters) [105512 105524])
                ("wedgeprops" variable nil (reparse-symbol function_parameters) [105531 105541])
                ("textprops" variable nil (reparse-symbol function_parameters) [105548 105557])
                ("center" variable nil (reparse-symbol function_parameters) [105572 105578])
                ("frame" variable nil (reparse-symbol function_parameters) [105587 105592])
                ("rotatelabels" variable nil (reparse-symbol function_parameters) [105600 105612])
                ("hold" variable nil (reparse-symbol function_parameters) [105620 105624])
                ("data" variable nil (reparse-symbol function_parameters) [105631 105635]))              ) nil [105351 106493])
            ("" code nil nil [106605 106616])
            ("plot" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [106626 106631])
                ("kwargs" variable nil (reparse-symbol function_parameters) [106633 106641]))              ) nil [106617 107131])
            ("" code nil nil [107243 107259])
            ("plot_date" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [107274 107275])
                ("y" variable nil (reparse-symbol function_parameters) [107277 107278])
                ("fmt" variable nil (reparse-symbol function_parameters) [107280 107283])
                ("tz" variable nil (reparse-symbol function_parameters) [107289 107291])
                ("xdate" variable nil (reparse-symbol function_parameters) [107298 107303])
                ("ydate" variable nil (reparse-symbol function_parameters) [107310 107315])
                ("hold" variable nil (reparse-symbol function_parameters) [107323 107327])
                ("data" variable nil (reparse-symbol function_parameters) [107348 107352])
                ("kwargs" variable nil (reparse-symbol function_parameters) [107359 107367]))              ) nil [107260 107906])
            ("" code nil nil [108018 108028])
            ("psd" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [108037 108038])
                ("NFFT" variable nil (reparse-symbol function_parameters) [108040 108044])
                ("Fs" variable nil (reparse-symbol function_parameters) [108051 108053])
                ("Fc" variable nil (reparse-symbol function_parameters) [108060 108062])
                ("detrend" variable nil (reparse-symbol function_parameters) [108069 108076])
                ("window" variable nil (reparse-symbol function_parameters) [108083 108089])
                ("noverlap" variable nil (reparse-symbol function_parameters) [108104 108112])
                ("pad_to" variable nil (reparse-symbol function_parameters) [108119 108125])
                ("sides" variable nil (reparse-symbol function_parameters) [108132 108137])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [108144 108157])
                ("return_line" variable nil (reparse-symbol function_parameters) [108172 108183])
                ("hold" variable nil (reparse-symbol function_parameters) [108190 108194])
                ("data" variable nil (reparse-symbol function_parameters) [108201 108205])
                ("kwargs" variable nil (reparse-symbol function_parameters) [108212 108220]))              ) nil [108029 108902])
            ("" code nil nil [109014 109027])
            ("quiver" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [109039 109044])
                ("kw" variable nil (reparse-symbol function_parameters) [109046 109050]))              ) nil [109028 109546])
            ("" code nil nil [109658 109674])
            ("quiverkey" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [109689 109694])
                ("kw" variable nil (reparse-symbol function_parameters) [109696 109700]))              ) nil [109675 110187])
            ("" code nil nil [110299 110313])
            ("scatter" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [110326 110327])
                ("y" variable nil (reparse-symbol function_parameters) [110329 110330])
                ("s" variable nil (reparse-symbol function_parameters) [110332 110333])
                ("c" variable nil (reparse-symbol function_parameters) [110340 110341])
                ("marker" variable nil (reparse-symbol function_parameters) [110348 110354])
                ("cmap" variable nil (reparse-symbol function_parameters) [110361 110365])
                ("norm" variable nil (reparse-symbol function_parameters) [110372 110376])
                ("vmin" variable nil (reparse-symbol function_parameters) [110383 110387])
                ("vmax" variable nil (reparse-symbol function_parameters) [110406 110410])
                ("alpha" variable nil (reparse-symbol function_parameters) [110417 110422])
                ("linewidths" variable nil (reparse-symbol function_parameters) [110429 110439])
                ("verts" variable nil (reparse-symbol function_parameters) [110446 110451])
                ("edgecolors" variable nil (reparse-symbol function_parameters) [110458 110468])
                ("hold" variable nil (reparse-symbol function_parameters) [110487 110491])
                ("data" variable nil (reparse-symbol function_parameters) [110498 110502])
                ("kwargs" variable nil (reparse-symbol function_parameters) [110509 110517]))              ) nil [110314 111213])
            ("" code nil nil [111325 111340])
            ("semilogx" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [111354 111359])
                ("kwargs" variable nil (reparse-symbol function_parameters) [111361 111369]))              ) nil [111341 111863])
            ("" code nil nil [111975 111990])
            ("semilogy" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [112004 112009])
                ("kwargs" variable nil (reparse-symbol function_parameters) [112011 112019]))              ) nil [111991 112513])
            ("" code nil nil [112625 112640])
            ("specgram" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [112654 112655])
                ("NFFT" variable nil (reparse-symbol function_parameters) [112657 112661])
                ("Fs" variable nil (reparse-symbol function_parameters) [112668 112670])
                ("Fc" variable nil (reparse-symbol function_parameters) [112677 112679])
                ("detrend" variable nil (reparse-symbol function_parameters) [112686 112693])
                ("window" variable nil (reparse-symbol function_parameters) [112700 112706])
                ("noverlap" variable nil (reparse-symbol function_parameters) [112726 112734])
                ("cmap" variable nil (reparse-symbol function_parameters) [112741 112745])
                ("xextent" variable nil (reparse-symbol function_parameters) [112752 112759])
                ("pad_to" variable nil (reparse-symbol function_parameters) [112766 112772])
                ("sides" variable nil (reparse-symbol function_parameters) [112779 112784])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [112804 112817])
                ("mode" variable nil (reparse-symbol function_parameters) [112824 112828])
                ("scale" variable nil (reparse-symbol function_parameters) [112835 112840])
                ("vmin" variable nil (reparse-symbol function_parameters) [112847 112851])
                ("vmax" variable nil (reparse-symbol function_parameters) [112858 112862])
                ("hold" variable nil (reparse-symbol function_parameters) [112882 112886])
                ("data" variable nil (reparse-symbol function_parameters) [112893 112897])
                ("kwargs" variable nil (reparse-symbol function_parameters) [112904 112912]))              ) nil [112641 113705])
            ("" code nil nil [113817 113833])
            ("stackplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [113848 113849])
                ("args" variable nil (reparse-symbol function_parameters) [113851 113856])
                ("kwargs" variable nil (reparse-symbol function_parameters) [113858 113866]))              ) nil [113834 114364])
            ("" code nil nil [114476 114487])
            ("stem" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [114497 114502])
                ("kwargs" variable nil (reparse-symbol function_parameters) [114504 114512]))              ) nil [114488 115002])
            ("" code nil nil [115114 115125])
            ("step" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [115135 115136])
                ("y" variable nil (reparse-symbol function_parameters) [115138 115139])
                ("args" variable nil (reparse-symbol function_parameters) [115141 115146])
                ("kwargs" variable nil (reparse-symbol function_parameters) [115148 115156]))              ) nil [115126 115652])
            ("" code nil nil [115764 115781])
            ("streamplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [115797 115798])
                ("y" variable nil (reparse-symbol function_parameters) [115800 115801])
                ("u" variable nil (reparse-symbol function_parameters) [115803 115804])
                ("v" variable nil (reparse-symbol function_parameters) [115806 115807])
                ("density" variable nil (reparse-symbol function_parameters) [115809 115816])
                ("linewidth" variable nil (reparse-symbol function_parameters) [115820 115829])
                ("color" variable nil (reparse-symbol function_parameters) [115836 115841])
                ("cmap" variable nil (reparse-symbol function_parameters) [115848 115852])
                ("norm" variable nil (reparse-symbol function_parameters) [115874 115878])
                ("arrowsize" variable nil (reparse-symbol function_parameters) [115885 115894])
                ("arrowstyle" variable nil (reparse-symbol function_parameters) [115898 115908])
                ("minlength" variable nil (reparse-symbol function_parameters) [115916 115925])
                ("transform" variable nil (reparse-symbol function_parameters) [115946 115955])
                ("zorder" variable nil (reparse-symbol function_parameters) [115962 115968])
                ("start_points" variable nil (reparse-symbol function_parameters) [115975 115987])
                ("maxlength" variable nil (reparse-symbol function_parameters) [115994 116003])
                ("integration_direction" variable nil (reparse-symbol function_parameters) [116024 116045])
                ("hold" variable nil (reparse-symbol function_parameters) [116054 116058])
                ("data" variable nil (reparse-symbol function_parameters) [116065 116069]))              ) nil [115782 117022])
            ("" code nil nil [117134 117151])
            ("tricontour" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [117167 117172])
                ("kwargs" variable nil (reparse-symbol function_parameters) [117174 117182]))              ) nil [117152 117713])
            ("" code nil nil [117825 117843])
            ("tricontourf" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [117860 117865])
                ("kwargs" variable nil (reparse-symbol function_parameters) [117867 117875]))              ) nil [117844 118407])
            ("" code nil nil [118519 118535])
            ("tripcolor" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [118550 118555])
                ("kwargs" variable nil (reparse-symbol function_parameters) [118557 118565]))              ) nil [118536 119072])
            ("" code nil nil [119184 119198])
            ("triplot" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [119211 119216])
                ("kwargs" variable nil (reparse-symbol function_parameters) [119218 119226]))              ) nil [119199 119719])
            ("" code nil nil [119831 119848])
            ("violinplot" function (:arguments 
              ( ("dataset" variable nil (reparse-symbol function_parameters) [119864 119871])
                ("positions" variable nil (reparse-symbol function_parameters) [119873 119882])
                ("vert" variable nil (reparse-symbol function_parameters) [119889 119893])
                ("widths" variable nil (reparse-symbol function_parameters) [119900 119906])
                ("showmeans" variable nil (reparse-symbol function_parameters) [119912 119921])
                ("showextrema" variable nil (reparse-symbol function_parameters) [119944 119955])
                ("showmedians" variable nil (reparse-symbol function_parameters) [119962 119973])
                ("points" variable nil (reparse-symbol function_parameters) [119981 119987])
                ("bw_method" variable nil (reparse-symbol function_parameters) [119993 120002])
                ("hold" variable nil (reparse-symbol function_parameters) [120024 120028])
                ("data" variable nil (reparse-symbol function_parameters) [120035 120039]))              ) nil [119849 120746])
            ("" code nil nil [120858 120871])
            ("vlines" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [120883 120884])
                ("ymin" variable nil (reparse-symbol function_parameters) [120886 120890])
                ("ymax" variable nil (reparse-symbol function_parameters) [120892 120896])
                ("colors" variable nil (reparse-symbol function_parameters) [120898 120904])
                ("linestyles" variable nil (reparse-symbol function_parameters) [120910 120920])
                ("label" variable nil (reparse-symbol function_parameters) [120930 120935])
                ("hold" variable nil (reparse-symbol function_parameters) [120940 120944])
                ("data" variable nil (reparse-symbol function_parameters) [120962 120966])
                ("kwargs" variable nil (reparse-symbol function_parameters) [120973 120981]))              ) nil [120872 121532])
            ("" code nil nil [121644 121656])
            ("xcorr" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [121667 121668])
                ("y" variable nil (reparse-symbol function_parameters) [121670 121671])
                ("normed" variable nil (reparse-symbol function_parameters) [121673 121679])
                ("detrend" variable nil (reparse-symbol function_parameters) [121686 121693])
                ("usevlines" variable nil (reparse-symbol function_parameters) [121713 121722])
                ("maxlags" variable nil (reparse-symbol function_parameters) [121739 121746])
                ("hold" variable nil (reparse-symbol function_parameters) [121751 121755])
                ("data" variable nil (reparse-symbol function_parameters) [121762 121766])
                ("kwargs" variable nil (reparse-symbol function_parameters) [121773 121781]))              ) nil [121657 122363])
            ("" code nil nil [122475 122487])
            ("barbs" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [122498 122503])
                ("kw" variable nil (reparse-symbol function_parameters) [122505 122509]))              ) nil [122488 122992])
            ("" code nil nil [123107 123117])
            ("cla" function nil nil [123118 123166])
            ("" code nil nil [123281 123292])
            ("grid" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [123302 123303])
                ("which" variable nil (reparse-symbol function_parameters) [123310 123315])
                ("axis" variable nil (reparse-symbol function_parameters) [123325 123329])
                ("kwargs" variable nil (reparse-symbol function_parameters) [123338 123346]))              ) nil [123293 123424])
            ("" code nil nil [123539 123552])
            ("legend" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [123564 123569])
                ("kwargs" variable nil (reparse-symbol function_parameters) [123571 123579]))              ) nil [123553 123637])
            ("" code nil nil [123752 123764])
            ("table" function (:arguments 
              ( ("kwargs" variable nil (reparse-symbol function_parameters) [123775 123783]))              ) nil [123765 123833])
            ("" code nil nil [123948 123959])
            ("text" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [123969 123970])
                ("y" variable nil (reparse-symbol function_parameters) [123972 123973])
                ("s" variable nil (reparse-symbol function_parameters) [123975 123976])
                ("fontdict" variable nil (reparse-symbol function_parameters) [123978 123986])
                ("withdash" variable nil (reparse-symbol function_parameters) [123993 124001])
                ("kwargs" variable nil (reparse-symbol function_parameters) [124009 124017]))              ) nil [123960 124113])
            ("" code nil nil [124228 124243])
            ("annotate" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [124257 124262])
                ("kwargs" variable nil (reparse-symbol function_parameters) [124264 124272]))              ) nil [124244 124332])
            ("" code nil nil [124447 124470])
            ("ticklabel_format" function (:arguments 
              ( ("kwargs" variable nil (reparse-symbol function_parameters) [124492 124500]))              ) nil [124471 124561])
            ("" code nil nil [124676 124697])
            ("locator_params" function (:arguments 
              ( ("axis" variable nil (reparse-symbol function_parameters) [124717 124721])
                ("tight" variable nil (reparse-symbol function_parameters) [124730 124735])
                ("kwargs" variable nil (reparse-symbol function_parameters) [124742 124750]))              ) nil [124698 124833])
            ("" code nil nil [124948 124966])
            ("tick_params" function (:arguments 
              ( ("axis" variable nil (reparse-symbol function_parameters) [124983 124987])
                ("kwargs" variable nil (reparse-symbol function_parameters) [124996 125004]))              ) nil [124967 125071])
            ("" code nil nil [125186 125200])
            ("margins" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [125213 125218])
                ("kw" variable nil (reparse-symbol function_parameters) [125220 125224]))              ) nil [125201 125279])
            ("" code nil nil [125394 125410])
            ("autoscale" function (:arguments 
              ( ("enable" variable nil (reparse-symbol function_parameters) [125425 125431])
                ("axis" variable nil (reparse-symbol function_parameters) [125438 125442])
                ("tight" variable nil (reparse-symbol function_parameters) [125451 125456]))              ) nil [125411 125544])
            ("autumn" function nil nil [125637 125887])
            ("bone" function nil nil [125981 126223])
            ("cool" function nil nil [126317 126559])
            ("copper" function nil nil [126653 126903])
            ("flag" function nil nil [126997 127239])
            ("gray" function nil nil [127333 127575])
            ("hot" function nil nil [127669 127907])
            ("hsv" function nil nil [128001 128239])
            ("jet" function nil nil [128333 128571])
            ("pink" function nil nil [128665 128907])
            ("prism" function nil nil [129001 129247])
            ("spring" function nil nil [129341 129591])
            ("summer" function nil nil [129685 129935])
            ("winter" function nil nil [130029 130279])
            ("magma" function nil nil [130373 130619])
            ("inferno" function nil nil [130713 130967])
            ("plasma" function nil nil [131061 131311])
            ("viridis" function nil nil [131405 131659])
            ("nipy_spectral" function nil nil [131753 132031])
            ("spectral" function nil nil [132125 132580])
            ("_setup_pyplot_info_docstrings" code nil nil [132581 132612]))          
    :file "pyplot.py"
    :pointmax 132613
    :fsize 132612
    :lastmodtime '(23104 18693 480228 0)
    :unmatched-syntax '((NAME 16106 . 16114) (IF 16134 . 16136) (ELSE 16145 . 16149) (FROM 2151 . 2155) (PERIOD 2156 . 2157))
    )
   (semanticdb-table "colorbar.py"
    :file "colorbar.py"
    :fsize 51431
    :lastmodtime '(23104 18693 398229 0)
    )
   (semanticdb-table "backend_bases.py"
    :file "backend_bases.py"
    :fsize 113868
    :lastmodtime '(23104 18693 411229 0)
    )
   (semanticdb-table "figure.py"
    :file "figure.py"
    :fsize 74899
    :lastmodtime '(23104 18693 491228 0)
    )
   (semanticdb-table "gridspec.py"
    :file "gridspec.py"
    :fsize 15583
    :lastmodtime '(23104 18693 491228 0)
    )
   (semanticdb-table "image.py"
    :file "image.py"
    :fsize 51878
    :lastmodtime '(23104 18693 473228 0)
    )
   (semanticdb-table "rcsetup.py"
    :file "rcsetup.py"
    :fsize 57372
    :lastmodtime '(23104 18693 395229 0)
    )
   (semanticdb-table "artist.py"
    :file "artist.py"
    :fsize 46866
    :lastmodtime '(23104 18693 399229 0)
    )
   (semanticdb-table "scale.py"
    :file "scale.py"
    :fsize 18507
    :lastmodtime '(23104 18693 479228 0)
    )
   (semanticdb-table "cm.py"
    :major-mode 'python-mode
    :tags nil
    :file "cm.py"
    :pointmax 12669
    :fsize 12668
    :lastmodtime '(23104 18693 492228 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "colors.py"
    :file "colors.py"
    :fsize 72816
    :lastmodtime '(23104 18693 448229 0)
    )
   (semanticdb-table "lines.py"
    :file "lines.py"
    :fsize 50975
    :lastmodtime '(23104 18693 481229 0)
    )
   (semanticdb-table "text.py"
    :file "text.py"
    :fsize 80605
    :lastmodtime '(23104 18693 476228 0)
    )
   (semanticdb-table "patches.py"
    :file "patches.py"
    :fsize 152091
    :lastmodtime '(23104 18693 487228 0)
    )
   (semanticdb-table "widgets.py"
    :file "widgets.py"
    :fsize 93289
    :lastmodtime '(23104 18693 434229 0)
    )
   )
  :file "!usr!lib64!python2.7!site-packages!matplotlib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
