;; Object logging/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "logging/"
  :tables
  (list
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
Logging package for Python. Based on PEP 282 and comments thereto in
comp.lang.python.

Copyright (C) 2001-2012 Vinay Sajip. All Rights Reserved.

To use, simply 'import logging' and log away!
\"\"\"" code nil nil [988 1188])
            ("weakref" include nil nil [1190 1251])
            ("warnings" include nil nil [1190 1251])
            ("traceback" include nil nil [1190 1251])
            ("cStringIO" include nil nil [1190 1251])
            ("time" include nil nil [1190 1251])
            ("os" include nil nil [1190 1251])
            ("sys" include nil nil [1190 1251])
            ("__all__" variable nil nil [1253 1793])
            ("try" code nil nil [1795 1856])
            ("try" code nil nil [1857 1939])
            ("__author__" variable nil nil [1940 1994])
            ("__status__" variable nil nil [1995 2021])
            ("__version__" variable nil nil [2022 2045])
            ("__date__" variable nil nil [2046 2078])
            ("try" code nil nil [2264 2340])
            ("if" code nil nil [2443 2668])
            ("_srcfile" variable nil nil [2668 2705])
            ("currentframe" function (:documentation "Return the frame object for the caller's stack frame.") nil [2750 2928])
            ("if" code nil nil [2929 2999])
            ("_startTime" variable nil nil [3387 3411])
            ("raiseExceptions" variable nil nil [3501 3520])
            ("logThreads" variable nil nil [3597 3611])
            ("logMultiprocessing" variable nil nil [3694 3716])
            ("logProcesses" variable nil nil [3791 3807])
            ("CRITICAL" variable nil nil [4332 4345])
            ("FATAL" variable nil nil [4346 4362])
            ("ERROR" variable nil nil [4363 4373])
            ("WARNING" variable nil nil [4374 4386])
            ("WARN" variable nil nil [4387 4401])
            ("INFO" variable nil nil [4402 4411])
            ("DEBUG" variable nil nil [4412 4422])
            ("NOTSET" variable nil nil [4423 4433])
            ("_levelNames" variable nil nil [4435 4746])
            ("getLevelName" function
               (:documentation "
    Return the textual representation of logging level 'level'.

    If the level is one of the predefined levels (CRITICAL, ERROR, WARNING,
    INFO, DEBUG) then you get the corresponding string. If you have
    associated levels with names using addLevelName then the name you have
    associated with 'level' is returned.

    If a numeric value corresponding to one of the defined levels is passed
    in, the corresponding string representation is returned.

    Otherwise, the string \"Level %s\" % level is returned.
    "
                :arguments 
                  ( ("level" variable nil (reparse-symbol function_parameters) [4765 4770]))                  )
                nil [4748 5367])
            ("addLevelName" function
               (:documentation "
    Associate 'levelName' with 'level'.

    This is used when converting levels to text during message formatting.
    "
                :arguments 
                  ( ("level" variable nil (reparse-symbol function_parameters) [5385 5390])
                    ("levelName" variable nil (reparse-symbol function_parameters) [5392 5401]))                  )
                nil [5368 5736])
            ("_checkLevel" function (:arguments 
              ( ("level" variable nil (reparse-symbol function_parameters) [5753 5758]))              ) nil [5737 6078])
            ("if" code nil nil [6698 6762])
            ("_acquireLock" function (:documentation "
    Acquire the module-level lock for serializing access to shared data.

    This should be released with _releaseLock().
    ") nil [6763 6960])
            ("_releaseLock" function (:documentation "
    Release the module-level lock acquired by calling _acquireLock().
    ") nil [6961 7105])
            ("LogRecord" type
               (:documentation "
    A LogRecord instance represents an event being logged.

    LogRecord instances are created every time something is logged. They
    contain all the information pertinent to the event being logged. The
    main information passed in is in msg and args, which are combined
    using str(msg) % args to create the message field of the record. The
    record also includes information such as when the record was created,
    the source line where the logging call was made, and any exception
    information to be logged.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize a logging record with interesting information.
        \"\"\"" code nil (reparse-symbol indented_block_body) [7961 8042])
                            ("ct" variable nil (reparse-symbol indented_block_body) [8051 8067])
                            ("self" variable nil (reparse-symbol indented_block_body) [8076 8092])
                            ("self" variable nil (reparse-symbol indented_block_body) [8101 8115])
                            ("if" code nil (reparse-symbol indented_block_body) [8869 8966])
                            ("self" variable nil (reparse-symbol indented_block_body) [8974 8990])
                            ("self" variable nil (reparse-symbol indented_block_body) [8999 9035])
                            ("self" variable nil (reparse-symbol indented_block_body) [9044 9064])
                            ("self" variable nil (reparse-symbol indented_block_body) [9073 9097])
                            ("try" code nil (reparse-symbol indented_block_body) [9106 9363])
                            ("self" variable nil (reparse-symbol indented_block_body) [9371 9395])
                            ("self" variable nil (reparse-symbol indented_block_body) [9404 9424])
                            ("self" variable nil (reparse-symbol indented_block_body) [9473 9493])
                            ("self" variable nil (reparse-symbol indented_block_body) [9502 9522])
                            ("self" variable nil (reparse-symbol indented_block_body) [9531 9548])
                            ("self" code nil (reparse-symbol indented_block_body) [9557 9592])
                            ("self" code nil (reparse-symbol indented_block_body) [9601 9658])
                            ("if" code nil (reparse-symbol indented_block_body) [9667 9880])
                            ("if" code nil (reparse-symbol indented_block_body) [9888 10506])
                            ("if" code nil (reparse-symbol indented_block_body) [10514 10642]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7866 7870])
                            ("name" variable nil (reparse-symbol function_parameters) [7872 7876])
                            ("level" variable nil (reparse-symbol function_parameters) [7878 7883])
                            ("pathname" variable nil (reparse-symbol function_parameters) [7885 7893])
                            ("lineno" variable nil (reparse-symbol function_parameters) [7895 7901])
                            ("msg" variable nil (reparse-symbol function_parameters) [7920 7923])
                            ("args" variable nil (reparse-symbol function_parameters) [7925 7929])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [7931 7939])
                            ("func" variable nil (reparse-symbol function_parameters) [7941 7945]))                          
                        :documentation "
        Initialize a logging record with interesting information.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7853 10642])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10659 10663]))                          )
                        (reparse-symbol indented_block_body) [10647 10793])
                    ("getMessage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10813 10817]))                          
                        :documentation "
        Return the message for this LogRecord.

        Return the message for this LogRecord after merging any user-supplied
        arguments with the message.
        ")
                        (reparse-symbol indented_block_body) [10798 11418]))                  
                :type "class")
                nil [7284 11418])
            ("makeLogRecord" function
               (:documentation "
    Make a LogRecord whose attributes are defined by the specified dictionary,
    This function is useful for converting a logging event received over
    a socket connection (which is sent as a dictionary) into a LogRecord
    instance.
    "
                :arguments 
                  ( ("dict" variable nil (reparse-symbol function_parameters) [11437 11441]))                  )
                nil [11419 11800])
            ("Formatter" type
               (:documentation "
    Formatter instances are used to convert a LogRecord to text.

    Formatters need to know how a LogRecord is constructed. They are
    responsible for converting a LogRecord to (usually) a string which can
    be interpreted by either a human or an external system. The base Formatter
    allows a formatting string to be specified. If none is supplied, the
    default value of \"%s(message)\\\\n\" is used.

    The Formatter can be initialized with a format string which makes use of
    knowledge of the LogRecord attributes - e.g. the default value mentioned
    above makes use of the fact that the user's message and arguments are pre-
    formatted into a LogRecord's message attribute. Currently, the useful
    attributes in a LogRecord are described by:

    %(name)s            Name of the logger (logging channel)
    %(levelno)s         Numeric logging level for the message (DEBUG, INFO,
                        WARNING, ERROR, CRITICAL)
    %(levelname)s       Text logging level for the message (\"DEBUG\", \"INFO\",
                        \"WARNING\", \"ERROR\", \"CRITICAL\")
    %(pathname)s        Full pathname of the source file where the logging
                        call was issued (if available)
    %(filename)s        Filename portion of pathname
    %(module)s          Module (name portion of filename)
    %(lineno)d          Source line number where the logging call was issued
                        (if available)
    %(funcName)s        Function name
    %(created)f         Time when the LogRecord was created (time.time()
                        return value)
    %(asctime)s         Textual time when the LogRecord was created
    %(msecs)d           Millisecond portion of the creation time
    %(relativeCreated)d Time in milliseconds when the LogRecord was created,
                        relative to the time the logging module was loaded
                        (typically at application startup time)
    %(thread)d          Thread ID (if available)
    %(threadName)s      Thread name (if available)
    %(process)d         Process ID (if available)
    %(message)s         The result of record.getMessage(), computed just as
                        the record is emitted
    "
                :superclasses ("object")
                :members 
                  ( ("converter" variable nil (reparse-symbol indented_block_body) [14251 14277])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the formatter with specified format strings.

        Initialize the formatter either with the specified format string, or a
        default as described above. Allow for specialized date formatting with
        the optional datefmt argument (if omitted, you get the ISO8601 format).
        \"\"\"" code nil (reparse-symbol indented_block_body) [14335 14653])
                            ("if" code nil (reparse-symbol indented_block_body) [14662 14750])
                            ("self" variable nil (reparse-symbol indented_block_body) [14758 14780]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14296 14300])
                            ("fmt" variable nil (reparse-symbol function_parameters) [14302 14305])
                            ("datefmt" variable nil (reparse-symbol function_parameters) [14312 14319]))                          
                        :documentation "
        Initialize the formatter with specified format strings.

        Initialize the formatter either with the specified format string, or a
        default as described above. Allow for specialized date formatting with
        the optional datefmt argument (if omitted, you get the ISO8601 format).
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14283 14781])
                    ("formatTime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14801 14805])
                            ("record" variable nil (reparse-symbol function_parameters) [14807 14813])
                            ("datefmt" variable nil (reparse-symbol function_parameters) [14815 14822]))                          
                        :documentation "
        Return the creation time of the specified LogRecord as formatted text.

        This method should be called from format() by a formatter which
        wants to make use of a formatted time. This method can be overridden
        in formatters to provide for any specific requirement, but the
        basic behaviour is as follows: if datefmt (a string) is specified,
        it is used with time.strftime() to format the creation time of the
        record. Otherwise, the ISO8601 format is used. The resulting
        string is returned. This function uses a user-configurable function
        to convert the creation time to a tuple. By default, time.localtime()
        is used; to change this for a particular formatter instance, set the
        'converter' attribute to a function with the same signature as
        time.localtime() or time.gmtime(). To change it for all formatters,
        for example if you want all logging times to be shown in GMT,
        set the 'converter' attribute in the Formatter class.
        ")
                        (reparse-symbol indented_block_body) [14786 16122])
                    ("formatException" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16147 16151])
                            ("ei" variable nil (reparse-symbol function_parameters) [16153 16155]))                          
                        :documentation "
        Format and return the specified exception information as a string.

        This default implementation just uses
        traceback.print_exception()
        ")
                        (reparse-symbol indented_block_body) [16127 16555])
                    ("usesTime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16573 16577]))                          
                        :documentation "
        Check if the format uses the creation time of the record.
        ")
                        (reparse-symbol indented_block_body) [16560 16719])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16735 16739])
                            ("record" variable nil (reparse-symbol function_parameters) [16741 16747]))                          
                        :documentation "
        Format the specified record as text.

        The record's attribute dictionary is used as the operand to a
        string formatting operation which yields the returned string.
        Before formatting the dictionary, a couple of preparatory steps
        are carried out. The message attribute of the record is computed
        using LogRecord.getMessage(). If the formatting string uses the
        time (as determined by a call to usesTime(), formatTime() is
        called to format the event time. If there is exception information,
        it is formatted using formatException() and appended to the message.
        ")
                        (reparse-symbol indented_block_body) [16724 18526]))                  
                :type "class")
                nil [11992 18526])
            ("_defaultFormatter" variable nil nil [18591 18622])
            ("BufferingFormatter" type
               (:documentation "
    A formatter suitable for formatting a number of records.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Optionally specify a formatter which will be used to format each
        individual record.
        \"\"\"" code nil (reparse-symbol indented_block_body) [18781 18896])
                            ("if" code nil (reparse-symbol indented_block_body) [18905 19011]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18752 18756])
                            ("linefmt" variable nil (reparse-symbol function_parameters) [18758 18765]))                          
                        :documentation "
        Optionally specify a formatter which will be used to format each
        individual record.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18739 19011])
                    ("formatHeader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19033 19037])
                            ("records" variable nil (reparse-symbol function_parameters) [19039 19046]))                          
                        :documentation "
        Return the header string for the specified records.
        ")
                        (reparse-symbol indented_block_body) [19016 19151])
                    ("formatFooter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19173 19177])
                            ("records" variable nil (reparse-symbol function_parameters) [19179 19186]))                          
                        :documentation "
        Return the footer string for the specified records.
        ")
                        (reparse-symbol indented_block_body) [19156 19291])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19307 19311])
                            ("records" variable nil (reparse-symbol function_parameters) [19313 19320]))                          
                        :documentation "
        Format the specified records and return the result as a string.
        ")
                        (reparse-symbol indented_block_body) [19296 19669]))                  
                :type "class")
                nil [18624 19669])
            ("Filter" type
               (:documentation "
    Filter instances are used to perform arbitrary filtering of LogRecords.

    Loggers and Handlers can optionally use Filter instances to filter
    records as desired. The base filter class only allows events which are
    below a certain point in the logger hierarchy. For example, a filter
    initialized with \"A.B\" will allow events logged by loggers \"A.B\",
    \"A.B.C\", \"A.B.C.D\", \"A.B.D\" etc. but not \"A.BB\", \"B.A.B\" etc. If
    initialized with the empty string, all events are passed.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize a filter.

        Initialize with the name of the logger which, together with its
        children, will have its events allowed through the filter. If no
        name is specified, allow every event.
        \"\"\"" code nil (reparse-symbol indented_block_body) [20434 20670])
                            ("self" variable nil (reparse-symbol indented_block_body) [20679 20695])
                            ("self" variable nil (reparse-symbol indented_block_body) [20704 20725]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20410 20414])
                            ("name" variable nil (reparse-symbol function_parameters) [20416 20420]))                          
                        :documentation "
        Initialize a filter.

        Initialize with the name of the logger which, together with its
        children, will have its events allowed through the filter. If no
        name is specified, allow every event.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20397 20726])
                    ("filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20742 20746])
                            ("record" variable nil (reparse-symbol function_parameters) [20748 20754]))                          
                        :documentation "
        Determine if the specified record is to be logged.

        Is the specified record to be logged? Returns 0 for no, nonzero for
        yes. If deemed appropriate, the record may be modified in-place.
        ")
                        (reparse-symbol indented_block_body) [20731 21227]))                  
                :type "class")
                nil [19858 21227])
            ("Filterer" type
               (:documentation "
    A base class for loggers and handlers which allows them to share
    common code.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the list of filters to be an empty list.
        \"\"\"" code nil (reparse-symbol indented_block_body) [21386 21461])
                            ("self" variable nil (reparse-symbol indented_block_body) [21470 21487]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21371 21375]))                          
                        :documentation "
        Initialize the list of filters to be an empty list.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21358 21488])
                    ("addFilter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21507 21511])
                            ("filter" variable nil (reparse-symbol function_parameters) [21513 21519]))                          
                        :documentation "
        Add the specified filter to this handler.
        ")
                        (reparse-symbol indented_block_body) [21493 21677])
                    ("removeFilter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21699 21703])
                            ("filter" variable nil (reparse-symbol function_parameters) [21705 21711]))                          
                        :documentation "
        Remove the specified filter from this handler.
        ")
                        (reparse-symbol indented_block_body) [21682 21868])
                    ("filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21884 21888])
                            ("record" variable nil (reparse-symbol function_parameters) [21890 21896]))                          
                        :documentation "
        Determine if a record is loggable by consulting all the filters.

        The default is to allow the record to be logged; any filter can veto
        this and the record is then dropped. Returns a zero value if a record
        is to be dropped, else non-zero.
        ")
                        (reparse-symbol indented_block_body) [21873 22339]))                  
                :type "class")
                nil [21228 22339])
            ("_handlers" variable nil nil [22529 22570])
            ("_handlerList" variable nil nil [22606 22623])
            ("_removeHandlerRef" function
               (:documentation "
    Remove a handler reference from the internal cleanup list.
    "
                :arguments 
                  ( ("wr" variable nil (reparse-symbol function_parameters) [22719 22721]))                  )
                nil [22697 23224])
            ("_addHandlerRef" function
               (:documentation "
    Add a handler to the internal cleanup list using a weak reference.
    "
                :arguments 
                  ( ("handler" variable nil (reparse-symbol function_parameters) [23244 23251]))                  )
                nil [23225 23474])
            ("Handler" type
               (:documentation "
    Handler instances dispatch logging events to specific destinations.

    The base handler class. Acts as a placeholder which defines the Handler
    interface. Handlers can optionally use Formatter instances to format
    records as desired. By default, no formatter is specified; in this case,
    the 'raw' message as determined by record.message is logged.
    "
                :superclasses ("Filterer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initializes the instance - basically setting the formatter to None
        and the filter list to empty.
        \"\"\"" code nil (reparse-symbol indented_block_body) [23926 24054])
                            ("Filterer" code nil (reparse-symbol indented_block_body) [24063 24086])
                            ("self" variable nil (reparse-symbol indented_block_body) [24095 24112])
                            ("self" variable nil (reparse-symbol indented_block_body) [24121 24152])
                            ("self" variable nil (reparse-symbol indented_block_body) [24161 24182])
                            ("_addHandlerRef" code nil (reparse-symbol indented_block_body) [24270 24290])
                            ("self" code nil (reparse-symbol indented_block_body) [24299 24316]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23897 23901])
                            ("level" variable nil (reparse-symbol function_parameters) [23903 23908]))                          
                        :documentation "
        Initializes the instance - basically setting the formatter to None
        and the filter list to empty.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23884 24317])
                    ("get_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24335 24339]))                          )
                        (reparse-symbol indented_block_body) [24322 24368])
                    ("set_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24386 24390])
                            ("name" variable nil (reparse-symbol function_parameters) [24392 24396]))                          )
                        (reparse-symbol indented_block_body) [24373 24651])
                    ("name" variable nil (reparse-symbol indented_block_body) [24656 24691])
                    ("createLock" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24712 24716]))                          
                        :documentation "
        Acquire a thread lock for serializing access to the underlying I/O.
        ")
                        (reparse-symbol indented_block_body) [24697 24923])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24940 24944]))                          
                        :documentation "
        Acquire the I/O thread lock.
        ")
                        (reparse-symbol indented_block_body) [24928 25062])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25079 25083]))                          
                        :documentation "
        Release the I/O thread lock.
        ")
                        (reparse-symbol indented_block_body) [25067 25201])
                    ("setLevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25219 25223])
                            ("level" variable nil (reparse-symbol function_parameters) [25225 25230]))                          
                        :documentation "
        Set the logging level of this handler.
        ")
                        (reparse-symbol indented_block_body) [25206 25344])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25360 25364])
                            ("record" variable nil (reparse-symbol function_parameters) [25366 25372]))                          
                        :documentation "
        Format the specified record.

        If a formatter is set, use it. Otherwise, use the default formatter
        for the module.
        ")
                        (reparse-symbol indented_block_body) [25349 25681])
                    ("emit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25695 25699])
                            ("record" variable nil (reparse-symbol function_parameters) [25701 25707]))                          
                        :documentation "
        Do whatever it takes to actually log the specified logging record.

        This version is intended to be implemented by subclasses and so
        raises a NotImplementedError.
        ")
                        (reparse-symbol indented_block_body) [25686 26041])
                    ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26057 26061])
                            ("record" variable nil (reparse-symbol function_parameters) [26063 26069]))                          
                        :documentation "
        Conditionally emit the specified logging record.

        Emission depends on filters which may have been added to the handler.
        Wrap the actual emission of the record with acquisition/release of
        the I/O thread lock. Returns whether the filter passed the record for
        emission.
        ")
                        (reparse-symbol indented_block_body) [26046 26599])
                    ("setFormatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26621 26625])
                            ("fmt" variable nil (reparse-symbol function_parameters) [26627 26630]))                          
                        :documentation "
        Set the formatter for this handler.
        ")
                        (reparse-symbol indented_block_body) [26604 26730])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26745 26749]))                          
                        :documentation "
        Ensure all logging output has been flushed.

        This version does nothing and is intended to be implemented by
        subclasses.
        ")
                        (reparse-symbol indented_block_body) [26735 26933])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26948 26952]))                          
                        :documentation "
        Tidy up any resources used by the handler.

        This version removes the handler from an internal map of handlers,
        _handlers, which is used for handler lookup by name. Subclasses
        should ensure that this gets called from overridden close()
        methods.
        ")
                        (reparse-symbol indented_block_body) [26938 27571])
                    ("handleError" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27592 27596])
                            ("record" variable nil (reparse-symbol function_parameters) [27598 27604]))                          
                        :documentation "
        Handle errors which occur during an emit() call.

        This method should be called from handlers when an exception is
        encountered during an emit() call. If raiseExceptions is false,
        exceptions get silently ignored. This is what is mostly wanted
        for a logging system - most users will not care about errors in
        the logging system, they are more interested in application errors.
        You could, however, replace this with a custom handler if you wish.
        The record which was being processed is passed in to this method.
        ")
                        (reparse-symbol indented_block_body) [27576 28685]))                  
                :type "class")
                nil [23475 28685])
            ("StreamHandler" type
               (:documentation "
    A handler class which writes logging records, appropriately formatted,
    to a stream. Note that this class does not close the stream, as
    sys.stdout or sys.stderr may be used.
    "
                :superclasses ("Handler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the handler.

        If stream is not specified, sys.stderr is used.
        \"\"\"" code nil (reparse-symbol indented_block_body) [28963 29067])
                            ("Handler" code nil (reparse-symbol indented_block_body) [29076 29098])
                            ("if" code nil (reparse-symbol indented_block_body) [29107 29158])
                            ("self" variable nil (reparse-symbol indented_block_body) [29166 29186]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28935 28939])
                            ("stream" variable nil (reparse-symbol function_parameters) [28941 28947]))                          
                        :documentation "
        Initialize the handler.

        If stream is not specified, sys.stderr is used.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28922 29187])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29202 29206]))                          
                        :documentation "
        Flushes the stream.
        ")
                        (reparse-symbol indented_block_body) [29192 29439])
                    ("emit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29453 29457])
                            ("record" variable nil (reparse-symbol function_parameters) [29459 29465]))                          
                        :documentation "
        Emit a record.

        If a formatter is specified, it is used to format the record.
        The record is then written to the stream with a trailing newline.  If
        exception information is present, it is formatted using
        traceback.print_exception and appended to the stream.  If the stream
        has an 'encoding' attribute, it is used to determine how to do the
        output to the stream.
        ")
                        (reparse-symbol indented_block_body) [29444 31309]))                  
                :type "class")
                nil [28686 31309])
            ("FileHandler" type
               (:documentation "
    A handler class which writes formatted logging records to disk files.
    "
                :superclasses ("StreamHandler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Open the specified file and use it as the stream for logging.
        \"\"\"" code nil (reparse-symbol indented_block_body) [31510 31595])
                            ("if" code nil (reparse-symbol indented_block_body) [31741 31788])
                            ("self" variable nil (reparse-symbol indented_block_body) [31796 31841])
                            ("self" variable nil (reparse-symbol indented_block_body) [31850 31866])
                            ("self" variable nil (reparse-symbol indented_block_body) [31875 31899])
                            ("if" code nil (reparse-symbol indented_block_body) [31908 32190]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31451 31455])
                            ("filename" variable nil (reparse-symbol function_parameters) [31457 31465])
                            ("mode" variable nil (reparse-symbol function_parameters) [31467 31471])
                            ("encoding" variable nil (reparse-symbol function_parameters) [31477 31485])
                            ("delay" variable nil (reparse-symbol function_parameters) [31492 31497]))                          
                        :documentation "
        Open the specified file and use it as the stream for logging.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31438 32190])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32205 32209]))                          
                        :documentation "
        Closes the stream.
        ")
                        (reparse-symbol indented_block_body) [32195 32567])
                    ("_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32582 32586]))                          
                        :documentation "
        Open the current base file with the (original) mode and encoding.
        Return the resulting stream.
        ")
                        (reparse-symbol indented_block_body) [32572 32928])
                    ("emit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32942 32946])
                            ("record" variable nil (reparse-symbol function_parameters) [32948 32954]))                          
                        :documentation "
        Emit a record.

        If the stream was not opened because 'delay' was specified in the
        constructor, open it before calling the superclass's emit.
        ")
                        (reparse-symbol indented_block_body) [32933 33258]))                  
                :type "class")
                nil [31310 33258])
            ("PlaceHolder" type
               (:documentation "
    PlaceHolder instances are used in the Manager logger hierarchy to take
    the place of nodes for which no loggers have been defined. This class is
    intended for internal use only and not as part of the public API.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize with the specified logger being a child of this placeholder.
        \"\"\"" code nil (reparse-symbol indented_block_body) [33754 33849])
                            ("self" variable nil (reparse-symbol indented_block_body) [33892 33927]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33730 33734])
                            ("alogger" variable nil (reparse-symbol function_parameters) [33736 33743]))                          
                        :documentation "
        Initialize with the specified logger being a child of this placeholder.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33717 33928])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33944 33948])
                            ("alogger" variable nil (reparse-symbol function_parameters) [33950 33957]))                          
                        :documentation "
        Add the specified logger as a child of this placeholder.
        ")
                        (reparse-symbol indented_block_body) [33933 34217]))                  
                :type "class")
                nil [33448 34217])
            ("_loggerClass" variable nil nil [34283 34302])
            ("setLoggerClass" function
               (:documentation "
    Set the class to be used when instantiating a logger. The class should
    define __init__() such that only a name argument is required, and the
    __init__() should call Logger.__init__()
    "
                :arguments 
                  ( ("klass" variable nil (reparse-symbol function_parameters) [34323 34328]))                  )
                nil [34304 34773])
            ("getLoggerClass" function (:documentation "
    Return the class to be used when instantiating a logger.
    ") nil [34774 34898])
            ("Manager" type
               (:documentation "
    There is [under normal circumstances] just one Manager instance, which
    holds the hierarchy of loggers.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the manager with the root node of the logger hierarchy.
        \"\"\"" code nil (reparse-symbol indented_block_body) [35091 35181])
                            ("self" variable nil (reparse-symbol indented_block_body) [35190 35210])
                            ("self" variable nil (reparse-symbol indented_block_body) [35219 35235])
                            ("self" variable nil (reparse-symbol indented_block_body) [35244 35276])
                            ("self" variable nil (reparse-symbol indented_block_body) [35285 35305])
                            ("self" variable nil (reparse-symbol indented_block_body) [35314 35337]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35066 35070])
                            ("rootnode" variable nil (reparse-symbol function_parameters) [35072 35080]))                          
                        :documentation "
        Initialize the manager with the root node of the logger hierarchy.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35053 35338])
                    ("getLogger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35357 35361])
                            ("name" variable nil (reparse-symbol function_parameters) [35363 35367]))                          
                        :documentation "
        Get a logger with the specified name (channel name), creating it
        if it doesn't yet exist. This name is a dot-separated hierarchical
        name, such as \"a\", \"a.b\", \"a.b.c\" or similar.

        If a PlaceHolder existed for the specified name [i.e. the logger
        didn't exist but a child of it did], replace it with the created
        logger and fix up the parent/child references which pointed to the
        placeholder to now point to the logger.
        ")
                        (reparse-symbol indented_block_body) [35343 36773])
                    ("setLoggerClass" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36797 36801])
                            ("klass" variable nil (reparse-symbol function_parameters) [36803 36808]))                          
                        :documentation "
        Set the class to be used when instantiating a logger with this Manager.
        ")
                        (reparse-symbol indented_block_body) [36778 37147])
                    ("_fixupParents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37170 37174])
                            ("alogger" variable nil (reparse-symbol function_parameters) [37176 37183]))                          
                        :documentation "
        Ensure that there are either loggers or placeholders all the way
        from the specified logger to the root of the logger hierarchy.
        ")
                        (reparse-symbol indented_block_body) [37152 37972])
                    ("_fixupChildren" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37996 38000])
                            ("ph" variable nil (reparse-symbol function_parameters) [38002 38004])
                            ("alogger" variable nil (reparse-symbol function_parameters) [38006 38013]))                          
                        :documentation "
        Ensure that children of the placeholder ph are connected to the
        specified logger.
        ")
                        (reparse-symbol indented_block_body) [37977 38423]))                  
                :type "class")
                nil [34899 38423])
            ("Logger" type
               (:documentation "
    Instances of the Logger class represent a single logging channel. A
    \"logging channel\" indicates an area of an application. Exactly how an
    \"area\" is defined is up to the application developer. Since an
    application can have any number of areas, logging channels are identified
    by a unique string. Application areas can be nested (e.g. an area
    of \"input processing\" might include sub-areas \"read CSV files\", \"read
    XLS files\" and \"read Gnumeric files\"). To cater for this natural nesting,
    channel names are organized into a namespace hierarchy where levels are
    separated by periods, much like the Java or Python package namespace. So
    in the instance given above, channel names might be \"input\" for the upper
    level, and \"input.csv\", \"input.xls\" and \"input.gnu\" for the sub-levels.
    There is no arbitrary limit to the depth of nesting.
    "
                :superclasses ("Filterer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the logger with a name and an optional level.
        \"\"\"" code nil (reparse-symbol indented_block_body) [39581 39661])
                            ("Filterer" code nil (reparse-symbol indented_block_body) [39670 39693])
                            ("self" variable nil (reparse-symbol indented_block_body) [39702 39718])
                            ("self" variable nil (reparse-symbol indented_block_body) [39727 39758])
                            ("self" variable nil (reparse-symbol indented_block_body) [39767 39785])
                            ("self" variable nil (reparse-symbol indented_block_body) [39794 39812])
                            ("self" variable nil (reparse-symbol indented_block_body) [39821 39839])
                            ("self" variable nil (reparse-symbol indented_block_body) [39848 39865]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39546 39550])
                            ("name" variable nil (reparse-symbol function_parameters) [39552 39556])
                            ("level" variable nil (reparse-symbol function_parameters) [39558 39563]))                          
                        :documentation "
        Initialize the logger with a name and an optional level.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39533 39866])
                    ("setLevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39884 39888])
                            ("level" variable nil (reparse-symbol function_parameters) [39890 39895]))                          
                        :documentation "
        Set the logging level of this logger.
        ")
                        (reparse-symbol indented_block_body) [39871 40008])
                    ("debug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40023 40027])
                            ("msg" variable nil (reparse-symbol function_parameters) [40029 40032])
                            ("args" variable nil (reparse-symbol function_parameters) [40034 40039])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [40041 40049]))                          
                        :documentation "
        Log 'msg % args' with severity 'DEBUG'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=1)
        ")
                        (reparse-symbol indented_block_body) [40013 40394])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40408 40412])
                            ("msg" variable nil (reparse-symbol function_parameters) [40414 40417])
                            ("args" variable nil (reparse-symbol function_parameters) [40419 40424])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [40426 40434]))                          
                        :documentation "
        Log 'msg % args' with severity 'INFO'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.info(\"Houston, we have a %s\", \"interesting problem\", exc_info=1)
        ")
                        (reparse-symbol indented_block_body) [40399 40780])
                    ("warning" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40797 40801])
                            ("msg" variable nil (reparse-symbol function_parameters) [40803 40806])
                            ("args" variable nil (reparse-symbol function_parameters) [40808 40813])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [40815 40823]))                          
                        :documentation "
        Log 'msg % args' with severity 'WARNING'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=1)
        ")
                        (reparse-symbol indented_block_body) [40785 41178])
                    ("warn" variable nil (reparse-symbol indented_block_body) [41183 41197])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41213 41217])
                            ("msg" variable nil (reparse-symbol function_parameters) [41219 41222])
                            ("args" variable nil (reparse-symbol function_parameters) [41224 41229])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41231 41239]))                          
                        :documentation "
        Log 'msg % args' with severity 'ERROR'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1)
        ")
                        (reparse-symbol indented_block_body) [41203 41583])
                    ("exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41602 41606])
                            ("msg" variable nil (reparse-symbol function_parameters) [41608 41611])
                            ("args" variable nil (reparse-symbol function_parameters) [41613 41618])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41620 41628]))                          
                        :documentation "
        Convenience method for logging an ERROR with exception information.
        ")
                        (reparse-symbol indented_block_body) [41588 41803])
                    ("critical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41821 41825])
                            ("msg" variable nil (reparse-symbol function_parameters) [41827 41830])
                            ("args" variable nil (reparse-symbol function_parameters) [41832 41837])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41839 41847]))                          
                        :documentation "
        Log 'msg % args' with severity 'CRITICAL'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.critical(\"Houston, we have a %s\", \"major disaster\", exc_info=1)
        ")
                        (reparse-symbol indented_block_body) [41808 42204])
                    ("fatal" variable nil (reparse-symbol indented_block_body) [42209 42225])
                    ("log" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42239 42243])
                            ("level" variable nil (reparse-symbol function_parameters) [42245 42250])
                            ("msg" variable nil (reparse-symbol function_parameters) [42252 42255])
                            ("args" variable nil (reparse-symbol function_parameters) [42257 42262])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42264 42272]))                          
                        :documentation "
        Log 'msg % args' with the integer severity 'level'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.log(level, \"We have a %s\", \"mysterious problem\", exc_info=1)
        ")
                        (reparse-symbol indented_block_body) [42231 42801])
                    ("findCaller" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42821 42825]))                          
                        :documentation "
        Find the stack frame of the caller so that we can note the source
        file name, line number and function name.
        ")
                        (reparse-symbol indented_block_body) [42806 43530])
                    ("makeRecord" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43550 43554])
                            ("name" variable nil (reparse-symbol function_parameters) [43556 43560])
                            ("level" variable nil (reparse-symbol function_parameters) [43562 43567])
                            ("fn" variable nil (reparse-symbol function_parameters) [43569 43571])
                            ("lno" variable nil (reparse-symbol function_parameters) [43573 43576])
                            ("msg" variable nil (reparse-symbol function_parameters) [43578 43581])
                            ("args" variable nil (reparse-symbol function_parameters) [43583 43587])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [43589 43597])
                            ("func" variable nil (reparse-symbol function_parameters) [43599 43603])
                            ("extra" variable nil (reparse-symbol function_parameters) [43610 43615]))                          
                        :documentation "
        A factory method which can be overridden in subclasses to create
        specialized LogRecords.
        ")
                        (reparse-symbol indented_block_body) [43535 44105])
                    ("_log" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44119 44123])
                            ("level" variable nil (reparse-symbol function_parameters) [44125 44130])
                            ("msg" variable nil (reparse-symbol function_parameters) [44132 44135])
                            ("args" variable nil (reparse-symbol function_parameters) [44137 44141])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [44143 44151])
                            ("extra" variable nil (reparse-symbol function_parameters) [44158 44163]))                          
                        :documentation "
        Low-level logging routine which creates a LogRecord and then calls
        all the handlers of this logger to handle the record.
        ")
                        (reparse-symbol indented_block_body) [44110 45039])
                    ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45055 45059])
                            ("record" variable nil (reparse-symbol function_parameters) [45061 45067]))                          
                        :documentation "
        Call the handlers for the specified record.

        This method is used for unpickled records received from a socket, as
        well as those created locally. Logger-level filtering is applied.
        ")
                        (reparse-symbol indented_block_body) [45044 45392])
                    ("addHandler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45412 45416])
                            ("hdlr" variable nil (reparse-symbol function_parameters) [45418 45422]))                          
                        :documentation "
        Add the specified handler to this logger.
        ")
                        (reparse-symbol indented_block_body) [45397 45666])
                    ("removeHandler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45689 45693])
                            ("hdlr" variable nil (reparse-symbol function_parameters) [45695 45699]))                          
                        :documentation "
        Remove the specified handler from this logger.
        ")
                        (reparse-symbol indented_block_body) [45671 45942])
                    ("callHandlers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45964 45968])
                            ("record" variable nil (reparse-symbol function_parameters) [45970 45976]))                          
                        :documentation "
        Pass a record to all relevant handlers.

        Loop through all handlers for this logger and its parents in the
        logger hierarchy. If no handler was found, output a one-off error
        message to sys.stderr. Stop searching up the hierarchy whenever a
        logger with the \"propagate\" attribute set to zero is found - that
        will be the last logger whose handlers are called.
        ")
                        (reparse-symbol indented_block_body) [45947 47001])
                    ("getEffectiveLevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47028 47032]))                          
                        :documentation "
        Get the effective level for this logger.

        Loop through this logger and its parents in the logger hierarchy,
        looking for a non-zero logging level. Return the first one found.
        ")
                        (reparse-symbol indented_block_body) [47006 47423])
                    ("isEnabledFor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47445 47449])
                            ("level" variable nil (reparse-symbol function_parameters) [47451 47456]))                          
                        :documentation "
        Is this logger enabled for level 'level'?
        ")
                        (reparse-symbol indented_block_body) [47428 47645])
                    ("getChild" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47663 47667])
                            ("suffix" variable nil (reparse-symbol function_parameters) [47669 47675]))                          
                        :documentation "
        Get a logger which is a descendant to this one.

        This is a convenience method, such that

        logging.getLogger('abc').getChild('def.ghi')

        is the same as

        logging.getLogger('abc.def.ghi')

        It's useful, for example, when the parent logger is named using
        __name__ rather than a literal string.
        ")
                        (reparse-symbol indented_block_body) [47650 48178]))                  
                :type "class")
                nil [38612 48178])
            ("RootLogger" type
               (:documentation "
    A root logger is not that different to any other logger, except that
    it must have a logging level and there is only one instance of it in
    the hierarchy.
    "
                :superclasses ("Logger")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the logger with the name \"root\".
        \"\"\"" code nil (reparse-symbol indented_block_body) [48425 48492])
                            ("Logger" code nil (reparse-symbol indented_block_body) [48501 48537]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48403 48407])
                            ("level" variable nil (reparse-symbol function_parameters) [48409 48414]))                          
                        :documentation "
        Initialize the logger with the name \"root\".
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48390 48538]))                  
                :type "class")
                nil [48179 48538])
            ("_loggerClass" variable nil nil [48539 48560])
            ("LoggerAdapter" type
               (:documentation "
    An adapter for loggers which makes it easier to specify contextual
    information in logging output.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the adapter with a logger and a dict-like object which
        provides contextual information. This constructor signature allows
        easy stacking of LoggerAdapters, if so desired.

        You can effectively pass keyword arguments as shown in the
        following example:

        adapter = LoggerAdapter(someLogger, dict(p1=v1, p2=\"v2\"))
        \"\"\"" code nil (reparse-symbol indented_block_body) [48761 49143])
                            ("self" variable nil (reparse-symbol indented_block_body) [49152 49172])
                            ("self" variable nil (reparse-symbol indented_block_body) [49181 49199]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48731 48735])
                            ("logger" variable nil (reparse-symbol function_parameters) [48737 48743])
                            ("extra" variable nil (reparse-symbol function_parameters) [48745 48750]))                          
                        :documentation "
        Initialize the adapter with a logger and a dict-like object which
        provides contextual information. This constructor signature allows
        easy stacking of LoggerAdapters, if so desired.

        You can effectively pass keyword arguments as shown in the
        following example:

        adapter = LoggerAdapter(someLogger, dict(p1=v1, p2=\"v2\"))
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48718 49200])
                    ("process" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49217 49221])
                            ("msg" variable nil (reparse-symbol function_parameters) [49223 49226])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [49228 49234]))                          
                        :documentation "
        Process the logging message and keyword arguments passed in to
        a logging call to insert contextual information. You can either
        manipulate the message itself, the keyword args or both. Return
        the message and kwargs modified (or not) to suit your needs.

        Normally, you'll only need to override this one method in a
        LoggerAdapter subclass for your specific needs.
        ")
                        (reparse-symbol indented_block_body) [49205 49734])
                    ("debug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49749 49753])
                            ("msg" variable nil (reparse-symbol function_parameters) [49755 49758])
                            ("args" variable nil (reparse-symbol function_parameters) [49760 49765])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [49767 49775]))                          
                        :documentation "
        Delegate a debug call to the underlying logger, after adding
        contextual information from this adapter instance.
        ")
                        (reparse-symbol indented_block_body) [49739 50026])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50040 50044])
                            ("msg" variable nil (reparse-symbol function_parameters) [50046 50049])
                            ("args" variable nil (reparse-symbol function_parameters) [50051 50056])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [50058 50066]))                          
                        :documentation "
        Delegate an info call to the underlying logger, after adding
        contextual information from this adapter instance.
        ")
                        (reparse-symbol indented_block_body) [50031 50316])
                    ("warning" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50333 50337])
                            ("msg" variable nil (reparse-symbol function_parameters) [50339 50342])
                            ("args" variable nil (reparse-symbol function_parameters) [50344 50349])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [50351 50359]))                          
                        :documentation "
        Delegate a warning call to the underlying logger, after adding
        contextual information from this adapter instance.
        ")
                        (reparse-symbol indented_block_body) [50321 50614])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50629 50633])
                            ("msg" variable nil (reparse-symbol function_parameters) [50635 50638])
                            ("args" variable nil (reparse-symbol function_parameters) [50640 50645])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [50647 50655]))                          
                        :documentation "
        Delegate an error call to the underlying logger, after adding
        contextual information from this adapter instance.
        ")
                        (reparse-symbol indented_block_body) [50619 50907])
                    ("exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50926 50930])
                            ("msg" variable nil (reparse-symbol function_parameters) [50932 50935])
                            ("args" variable nil (reparse-symbol function_parameters) [50937 50942])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [50944 50952]))                          
                        :documentation "
        Delegate an exception call to the underlying logger, after adding
        contextual information from this adapter instance.
        ")
                        (reparse-symbol indented_block_body) [50912 51239])
                    ("critical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51257 51261])
                            ("msg" variable nil (reparse-symbol function_parameters) [51263 51266])
                            ("args" variable nil (reparse-symbol function_parameters) [51268 51273])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [51275 51283]))                          
                        :documentation "
        Delegate a critical call to the underlying logger, after adding
        contextual information from this adapter instance.
        ")
                        (reparse-symbol indented_block_body) [51244 51540])
                    ("log" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51553 51557])
                            ("level" variable nil (reparse-symbol function_parameters) [51559 51564])
                            ("msg" variable nil (reparse-symbol function_parameters) [51566 51569])
                            ("args" variable nil (reparse-symbol function_parameters) [51571 51576])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [51578 51586]))                          
                        :documentation "
        Delegate a log call to the underlying logger, after adding
        contextual information from this adapter instance.
        ")
                        (reparse-symbol indented_block_body) [51545 51840])
                    ("isEnabledFor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51862 51866])
                            ("level" variable nil (reparse-symbol function_parameters) [51868 51873]))                          
                        :documentation "
        See if the underlying logger is enabled for the specified level.
        ")
                        (reparse-symbol indented_block_body) [51845 52020]))                  
                :type "class")
                nil [48562 52020])
            ("root" variable nil nil [52021 52047])
            ("Logger" variable nil nil [52048 52066])
            ("Logger" variable nil nil [52067 52104])
            ("BASIC_FORMAT" variable nil nil [52299 52350])
            ("basicConfig" function
               (:documentation "
    Do basic configuration for the logging system.

    This function does nothing if the root logger already has handlers
    configured. It is a convenience method intended for use by simple scripts
    to do one-shot configuration of the logging package.

    The default behaviour is to create a StreamHandler which writes to
    sys.stderr, set a formatter using the BASIC_FORMAT format string, and
    add the handler to the root logger.

    A number of optional keyword arguments may be specified, which can alter
    the default behaviour.

    filename  Specifies that a FileHandler be created, using the specified
              filename, rather than a StreamHandler.
    filemode  Specifies the mode to open the file, if filename is specified
              (if filemode is unspecified, it defaults to 'a').
    format    Use the specified format string for the handler.
    datefmt   Use the specified date/time format.
    level     Set the root logger level to the specified level.
    stream    Use the specified stream to initialize the StreamHandler. Note
              that this argument is incompatible with 'filename' - if both
              are present, 'stream' is ignored.

    Note that you could specify a stream created using open(filename, mode)
    rather than passing the filename and mode in. However, it should be
    remembered that StreamHandler does not close its stream (since it may be
    using sys.stdout or sys.stderr), whereas FileHandler closes its stream
    when the handler is closed.
    "
                :arguments 
                  ( ("kwargs" variable nil (reparse-symbol function_parameters) [52368 52376]))                  )
                nil [52352 54719])
            ("getLogger" function
               (:documentation "
    Return a logger with the specified name, creating it if necessary.

    If no name is specified, return the root logger.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [54978 54982]))                  )
                nil [54964 55220])
            ("critical" function
               (:documentation "
    Log a message with severity 'CRITICAL' on the root logger.
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [55446 55449])
                    ("args" variable nil (reparse-symbol function_parameters) [55451 55456])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [55458 55466]))                  )
                nil [55433 55642])
            ("fatal" variable nil nil [55643 55659])
            ("error" function
               (:documentation "
    Log a message with severity 'ERROR' on the root logger.
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [55671 55674])
                    ("args" variable nil (reparse-symbol function_parameters) [55676 55681])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [55683 55691]))                  )
                nil [55661 55861])
            ("exception" function
               (:documentation "
    Log a message with severity 'ERROR' on the root logger,
    with exception information.
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [55876 55879])
                    ("args" variable nil (reparse-symbol function_parameters) [55881 55886])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [55888 55896]))                  )
                nil [55862 56066])
            ("warning" function
               (:documentation "
    Log a message with severity 'WARNING' on the root logger.
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [56079 56082])
                    ("args" variable nil (reparse-symbol function_parameters) [56084 56089])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [56091 56099]))                  )
                nil [56067 56273])
            ("warn" variable nil nil [56274 56288])
            ("info" function
               (:documentation "
    Log a message with severity 'INFO' on the root logger.
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [56299 56302])
                    ("args" variable nil (reparse-symbol function_parameters) [56304 56309])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [56311 56319]))                  )
                nil [56290 56487])
            ("debug" function
               (:documentation "
    Log a message with severity 'DEBUG' on the root logger.
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [56498 56501])
                    ("args" variable nil (reparse-symbol function_parameters) [56503 56508])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [56510 56518]))                  )
                nil [56488 56688])
            ("log" function
               (:documentation "
    Log 'msg % args' with the integer severity 'level' on the root logger.
    "
                :arguments 
                  ( ("level" variable nil (reparse-symbol function_parameters) [56697 56702])
                    ("msg" variable nil (reparse-symbol function_parameters) [56704 56707])
                    ("args" variable nil (reparse-symbol function_parameters) [56709 56714])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [56716 56724]))                  )
                nil [56689 56914])
            ("disable" function
               (:documentation "
    Disable all logging calls of severity 'level' and below.
    "
                :arguments 
                  ( ("level" variable nil (reparse-symbol function_parameters) [56927 56932]))                  )
                nil [56915 57045])
            ("shutdown" function
               (:documentation "
    Perform any cleanup actions in the logging system (e.g. flushing
    buffers).

    Should be called at application exit.
    "
                :arguments 
                  ( ("handlerList" variable nil (reparse-symbol function_parameters) [57059 57070]))                  )
                nil [57046 57971])
            ("atexit" include nil nil [58060 58073])
            ("atexit" code nil nil [58074 58099])
            ("NullHandler" type
               (:documentation "
    This handler does nothing. It's intended to be used to avoid the
    \"No handlers could be found for logger XXX\" one-off warning. This is
    important for library code, which may contain code to log events. If a user
    of the library does not configure logging, the one-off warning might be
    produced; to avoid this, the library developer simply needs to instantiate
    a NullHandler and add it to the top-level logger of the library module or
    package.
    "
                :superclasses ("Handler")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58644 58648])
                            ("record" variable nil (reparse-symbol function_parameters) [58650 58656]))                          )
                        (reparse-symbol indented_block_body) [58633 58672])
                    ("emit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58686 58690])
                            ("record" variable nil (reparse-symbol function_parameters) [58692 58698]))                          )
                        (reparse-symbol indented_block_body) [58677 58714])
                    ("createLock" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58734 58738]))                          )
                        (reparse-symbol indented_block_body) [58719 58766]))                  
                :type "class")
                nil [58117 58766])
            ("_warnings_showwarning" variable nil nil [58791 58819])
            ("_showwarning" function
               (:documentation "
    Implementation of showwarnings which redirects to logging, which will first
    check to see if the file parameter is None. If a file is specified, it will
    delegate to the original warnings implementation of showwarning. Otherwise,
    it will call warnings.formatwarning and will log the resulting string to a
    warnings logger named \"py.warnings\" with level logging.WARNING.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [58838 58845])
                    ("category" variable nil (reparse-symbol function_parameters) [58847 58855])
                    ("filename" variable nil (reparse-symbol function_parameters) [58857 58865])
                    ("lineno" variable nil (reparse-symbol function_parameters) [58867 58873])
                    ("file" variable nil (reparse-symbol function_parameters) [58875 58879])
                    ("line" variable nil (reparse-symbol function_parameters) [58886 58890]))                  )
                nil [58821 59694])
            ("captureWarnings" function
               (:documentation "
    If capture is true, redirect all warnings to the logging package.
    If capture is False, ensure that warnings are not redirected to logging
    but to their original destinations.
    "
                :arguments 
                  ( ("capture" variable nil (reparse-symbol function_parameters) [59715 59722]))                  )
                nil [59695 60277]))          
      :file "__init__.py"
      :pointmax 60277
      :fsize 60276
      :lastmodtime '(22915 49735 0 0)
      :unmatched-syntax '((INDENT_BLOCK 57869 . 57901) (NEWLINE 57868 . 57869) (COLON 57867 . 57868) (FINALLY 57860 . 57867) (INDENT_BLOCK 28662 . 28685) (NEWLINE 28661 . 28662) (COLON 28660 . 28661) (FINALLY 28653 . 28660) (INDENT_BLOCK 28662 . 28685) (NEWLINE 28661 . 28662) (COLON 28660 . 28661) (FINALLY 28653 . 28660))))
  :file "!usr!lib64!python2.7!logging!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
