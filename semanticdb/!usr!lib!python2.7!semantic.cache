;; Object python2.7/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "python2.7/"
  :tables
  (list
    (semanticdb-table "os.py"
      :major-mode 'python-mode
      :tags nil
      :file "os.py"
      :pointmax 25915
      :fsize 25914
      :lastmodtime '(22387 47074 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "random.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* Without a direct way to compute N steps forward, the semantics of
  jumpahead(n) are weakened to simply jump to another distant state and rely
  on the large period to avoid overlapping sequences.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.

\"\"\"" code nil nil [1 1111])
            ("__future__" include nil nil [1113 1144])
            ("warnings" include nil nil [1145 1179])
            ("types" include nil nil [1180 1264])
            ("math" include nil nil [1265 1341])
            ("math" include nil nil [1342 1413])
            ("os" include nil nil [1414 1448])
            ("binascii" include nil nil [1449 1489])
            ("hashlib" include nil nil [1490 1516])
            ("__all__" variable nil nil [1518 1902])
            ("NV_MAGICCONST" code nil nil [1904 1945])
            ("TWOPI" code nil nil [1946 1961])
            ("LOG4" variable nil nil [1962 1978])
            ("SG_MAGICCONST" code nil nil [1979 2010])
            ("BPF" variable nil nil [2011 2019])
            ("RECIP_BPF" variable nil nil [2055 2074])
            ("_random" include nil nil [2257 2271])
            ("Random" type
               (:documentation "Random number generator base class used by bound module functions.

    Used to instantiate instances of Random to get generators that don't
    share state.  Especially useful for multi-threaded programs, creating
    a different instance of Random for each thread, and using the jumpahead()
    method to ensure that the generated sequences seen by each thread don't
    overlap.

    Class Random can also be subclassed if you want to use a different basic
    generator of your own devising: in that case, override the following
    methods: random(), seed(), getstate(), setstate() and jumpahead().
    Optionally, implement a getrandbits() method so that randrange() can cover
    arbitrarily large ranges.

    "
                :superclasses ("_random.Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [3037 3048])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        \"\"\"" code nil (reparse-symbol indented_block_body) [3122 3229])
                            ("self" code nil (reparse-symbol indented_block_body) [3239 3251])
                            ("self" variable nil (reparse-symbol indented_block_body) [3260 3282]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3099 3103])
                            ("x" variable nil (reparse-symbol function_parameters) [3105 3106]))                          
                        :documentation "Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3086 3283])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3297 3301])
                            ("a" variable nil (reparse-symbol function_parameters) [3303 3304]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.
        ")
                        (reparse-symbol indented_block_body) [3288 4001])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4019 4023]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [4006 4175])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4193 4197])
                            ("state" variable nil (reparse-symbol function_parameters) [4199 4204]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [4180 5242])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5261 5265])
                            ("n" variable nil (reparse-symbol function_parameters) [5267 5268]))                          
                        :documentation "Change the internal state to one that is likely far away
        from the current state.  This method will not be in Py3.x,
        so it is better to simply reseed.
        ")
                        (reparse-symbol indented_block_body) [5247 5808])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6032 6036]))                          )
                        (reparse-symbol indented_block_body) [6015 6083])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6105 6109])
                            ("state" variable nil (reparse-symbol function_parameters) [6111 6116]))                          )
                        (reparse-symbol indented_block_body) [6088 6162])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6182 6186]))                          )
                        (reparse-symbol indented_block_body) [6167 6240])
                    ("randrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6321 6325])
                            ("start" variable nil (reparse-symbol function_parameters) [6327 6332])
                            ("stop" variable nil (reparse-symbol function_parameters) [6334 6338])
                            ("step" variable nil (reparse-symbol function_parameters) [6345 6349])
                            ("_int" variable nil (reparse-symbol function_parameters) [6353 6357])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [6363 6372]))                          
                        :documentation "Choose a random item from range(start, stop[, step]).

        This fixes the problem with randint() which includes the
        endpoint; in Python this is usually not what you want.

        ")
                        (reparse-symbol indented_block_body) [6307 8894])
                    ("randint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8911 8915])
                            ("a" variable nil (reparse-symbol function_parameters) [8917 8918])
                            ("b" variable nil (reparse-symbol function_parameters) [8920 8921]))                          
                        :documentation "Return random integer in range [a, b], including both end points.
        ")
                        (reparse-symbol indented_block_body) [8899 9052])
                    ("_randbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9072 9076])
                            ("n" variable nil (reparse-symbol function_parameters) [9078 9079])
                            ("_log" variable nil (reparse-symbol function_parameters) [9081 9085])
                            ("_int" variable nil (reparse-symbol function_parameters) [9092 9096])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [9102 9111])
                            ("_Method" variable nil (reparse-symbol function_parameters) [9140 9147])
                            ("_BuiltinMethod" variable nil (reparse-symbol function_parameters) [9161 9175]))                          
                        :documentation "Return a random int in the range [0,n)

        Handles the case where n has more bits than returned
        by a single call to the underlying generator.
        ")
                        (reparse-symbol indented_block_body) [9057 10214])
                    ("choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10293 10297])
                            ("seq" variable nil (reparse-symbol function_parameters) [10299 10302]))                          
                        :documentation "Choose a random element from a non-empty sequence.")
                        (reparse-symbol indented_block_body) [10282 10457])
                    ("shuffle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10474 10478])
                            ("x" variable nil (reparse-symbol function_parameters) [10480 10481])
                            ("random" variable nil (reparse-symbol function_parameters) [10483 10489]))                          
                        :documentation "x, random=random.random -> shuffle list x in place; return None.

        Optional arg random is a 0-argument function returning a random
        float in [0.0, 1.0); by default, the standard random.random.

        ")
                        (reparse-symbol indented_block_body) [10462 10998])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11014 11018])
                            ("population" variable nil (reparse-symbol function_parameters) [11020 11030])
                            ("k" variable nil (reparse-symbol function_parameters) [11032 11033]))                          
                        :documentation "Chooses k unique random elements from a population sequence.

        Returns a new list containing elements from the population while
        leaving the original population unchanged.  The resulting list is
        in selection order so that all sub-slices will also be valid random
        samples.  This allows raffle winners (the sample) to be partitioned
        into grand prize and second place winners (the subslices).

        Members of the population need not be hashable or unique.  If the
        population contains repeats, then each occurrence is a possible
        selection in the sample.

        To choose a sample in a range of integers, use xrange as an argument.
        This is especially fast and space efficient for sampling from a
        large population:   sample(xrange(10000000), 60)
        ")
                        (reparse-symbol indented_block_body) [11003 13833])
                    ("uniform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13988 13992])
                            ("a" variable nil (reparse-symbol function_parameters) [13994 13995])
                            ("b" variable nil (reparse-symbol function_parameters) [13997 13998]))                          )
                        (reparse-symbol indented_block_body) [13976 14125])
                    ("triangular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14202 14206])
                            ("low" variable nil (reparse-symbol function_parameters) [14208 14211])
                            ("high" variable nil (reparse-symbol function_parameters) [14217 14221])
                            ("mode" variable nil (reparse-symbol function_parameters) [14227 14231]))                          
                        :documentation "Triangular distribution.

        Continuous distribution bounded by given lower and upper limits,
        and having a given mode value in-between.

        http://en.wikipedia.org/wiki/Triangular_distribution

        ")
                        (reparse-symbol indented_block_body) [14187 14790])
                    ("normalvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14879 14883])
                            ("mu" variable nil (reparse-symbol function_parameters) [14885 14887])
                            ("sigma" variable nil (reparse-symbol function_parameters) [14889 14894]))                          
                        :documentation "Normal distribution.

        mu is the mean, and sigma is the standard deviation.

        ")
                        (reparse-symbol indented_block_body) [14861 15554])
                    ("lognormvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15647 15651])
                            ("mu" variable nil (reparse-symbol function_parameters) [15653 15655])
                            ("sigma" variable nil (reparse-symbol function_parameters) [15657 15662]))                          
                        :documentation "Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        ")
                        (reparse-symbol indented_block_body) [15628 15982])
                    ("expovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16074 16078])
                            ("lambd" variable nil (reparse-symbol function_parameters) [16080 16085]))                          
                        :documentation "Exponential distribution.

        lambd is 1.0 divided by the desired mean.  It should be
        nonzero.  (The parameter would be called \"lambda\", but that is
        a reserved word in Python.)  Returned values range from 0 to
        positive infinity if lambd is positive, and from negative
        infinity to 0 if lambd is negative.

        ")
                        (reparse-symbol indented_block_body) [16058 16699])
                    ("vonmisesvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16793 16797])
                            ("mu" variable nil (reparse-symbol function_parameters) [16799 16801])
                            ("kappa" variable nil (reparse-symbol function_parameters) [16803 16808]))                          
                        :documentation "Circular data distribution.

        mu is the mean angle, expressed in radians between 0 and 2*pi, and
        kappa is the concentration parameter, which must be greater than or
        equal to zero.  If kappa is equal to zero, this distribution reduces
        to a uniform random angle over the range 0 to 2*pi.

        ")
                        (reparse-symbol indented_block_body) [16773 18163])
                    ("gammavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18250 18254])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18256 18261])
                            ("beta" variable nil (reparse-symbol function_parameters) [18263 18267]))                          
                        :documentation "Gamma distribution.  Not the gamma function!

        Conditions on the parameters are alpha > 0 and beta > 0.

        The probability distribution function is:

                    x ** (alpha - 1) * math.exp(-x / beta)
          pdf(x) =  --------------------------------------
                      math.gamma(alpha) * beta ** alpha

        ")
                        (reparse-symbol indented_block_body) [18233 20457])
                    ("gauss" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20545 20549])
                            ("mu" variable nil (reparse-symbol function_parameters) [20551 20553])
                            ("sigma" variable nil (reparse-symbol function_parameters) [20555 20560]))                          
                        :documentation "Gaussian distribution.

        mu is the mean, and sigma is the standard deviation.  This is
        slightly faster than the normalvariate() function.

        Not thread-safe without a lock around calls.

        ")
                        (reparse-symbol indented_block_body) [20535 21871])
                    ("betavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22367 22371])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22373 22378])
                            ("beta" variable nil (reparse-symbol function_parameters) [22380 22384]))                          
                        :documentation "Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        ")
                        (reparse-symbol indented_block_body) [22351 22842])
                    ("paretovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22918 22922])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22924 22929]))                          
                        :documentation "Pareto distribution.  alpha is the shape parameter.")
                        (reparse-symbol indented_block_body) [22900 23094])
                    ("weibullvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23172 23176])
                            ("alpha" variable nil (reparse-symbol function_parameters) [23178 23183])
                            ("beta" variable nil (reparse-symbol function_parameters) [23185 23189]))                          
                        :documentation "Weibull distribution.

        alpha is the scale parameter and beta is the shape parameter.

        ")
                        (reparse-symbol indented_block_body) [23153 23441]))                  
                :type "class")
                nil [2273 23441])
            ("WichmannHill" type
               (:superclasses ("Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [23534 23545])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23592 23596])
                            ("a" variable nil (reparse-symbol function_parameters) [23598 23599]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.

        If a is an int or long, a is used directly.  Distinct values between
        0 and 27814431486575L inclusive are guaranteed to yield distinct
        internal states (this guarantee is specific to the default
        Wichmann-Hill generator).
        ")
                        (reparse-symbol indented_block_body) [23583 24607])
                    ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24623 24627]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [24612 25679])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25697 25701]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [25684 25833])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25851 25855])
                            ("state" variable nil (reparse-symbol function_parameters) [25857 25862]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [25838 26244])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26263 26267])
                            ("n" variable nil (reparse-symbol function_parameters) [26269 26270]))                          
                        :documentation "Act as if n calls to random() were made, but quickly.

        n is an int, greater than or equal to 0.

        Example use:  If you have 2 threads and know that each will
        consume no more than a million random numbers, create two Random
        objects r1 and r2, then do
            r2.setstate(r1.getstate())
            r2.jumpahead(1000000)
        Then r1 and r2 will use guaranteed-disjoint segments of the full
        period.
        ")
                        (reparse-symbol indented_block_body) [26249 27012])
                    ("__whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27030 27034])
                            ("x" variable nil (reparse-symbol function_parameters) [27036 27037])
                            ("y" variable nil (reparse-symbol function_parameters) [27041 27042])
                            ("z" variable nil (reparse-symbol function_parameters) [27046 27047]))                          
                        :documentation "Set the Wichmann-Hill seed from (x, y, z).

        These must be integers in the range [0, 256).
        ")
                        (reparse-symbol indented_block_body) [27017 27816])
                    ("whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27832 27836])
                            ("a" variable nil (reparse-symbol function_parameters) [27838 27839]))                          
                        :documentation "Seed from hashable object's hash code.

        None or no argument seeds from current time.  It is not guaranteed
        that objects with distinct hash codes lead to distinct internal
        states.

        This is obsolete, provided for compatibility with the seed routine
        used prior to Python 2.1.  Use the .seed() method instead.
        ")
                        (reparse-symbol indented_block_body) [27821 28520]))                  
                :type "class")
                nil [23501 28520])
            ("SystemRandom" type
               (:documentation "Alternate random number generator using sources provided
    by the operating system (such as /dev/urandom on Unix or
    CryptGenRandom on Windows).

     Not available on all systems (see os.urandom() for details).
    "
                :superclasses ("Random")
                :members 
                  ( ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28868 28872]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [28857 29007])
                    ("getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29028 29032])
                            ("k" variable nil (reparse-symbol function_parameters) [29034 29035]))                          
                        :documentation "getrandbits(k) -> x.  Generates a long int with k random bits.")
                        (reparse-symbol indented_block_body) [29012 29487])
                    ("_stub" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29502 29506])
                            ("args" variable nil (reparse-symbol function_parameters) [29508 29513])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29515 29521]))                          )
                        (reparse-symbol indented_block_body) [29492 29615])
                    ("seed" variable nil (reparse-symbol indented_block_body) [29619 29643])
                    ("_notimplemented" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29669 29673])
                            ("args" variable nil (reparse-symbol function_parameters) [29675 29680])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29682 29688]))                          )
                        (reparse-symbol indented_block_body) [29649 29847])
                    ("getstate" variable nil (reparse-symbol indented_block_body) [29851 29888]))                  
                :type "class")
                nil [28592 29889])
            ("_test_generator" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [29969 29970])
                ("func" variable nil (reparse-symbol function_parameters) [29972 29976])
                ("args" variable nil (reparse-symbol function_parameters) [29978 29982]))              ) nil [29949 30503])
            ("_test" function (:arguments 
              ( ("N" variable nil (reparse-symbol function_parameters) [30515 30516]))              ) nil [30505 31303])
            ("_inst" variable nil nil [31635 31651])
            ("seed" variable nil nil [31652 31669])
            ("random" variable nil nil [31670 31691])
            ("uniform" variable nil nil [31692 31715])
            ("triangular" variable nil nil [31716 31745])
            ("randint" variable nil nil [31746 31769])
            ("choice" variable nil nil [31770 31791])
            ("randrange" variable nil nil [31792 31819])
            ("sample" variable nil nil [31820 31841])
            ("shuffle" variable nil nil [31842 31865])
            ("normalvariate" variable nil nil [31866 31901])
            ("lognormvariate" variable nil nil [31902 31939])
            ("expovariate" variable nil nil [31940 31971])
            ("vonmisesvariate" variable nil nil [31972 32011])
            ("gammavariate" variable nil nil [32012 32045])
            ("gauss" variable nil nil [32046 32065])
            ("betavariate" variable nil nil [32066 32097])
            ("paretovariate" variable nil nil [32098 32133])
            ("weibullvariate" variable nil nil [32134 32171])
            ("getstate" variable nil nil [32172 32197])
            ("setstate" variable nil nil [32198 32223])
            ("jumpahead" variable nil nil [32224 32251])
            ("getrandbits" variable nil nil [32252 32283])
            ("if" code nil nil [32285 32324]))          
      :file "random.py"
      :pointmax 32324
      :fsize 32323
      :lastmodtime '(22387 47074 0 0)
      :unmatched-syntax '((NAME 14525 . 14526) (IF 14533 . 14535) (ELSE 14549 . 14553)))
    (semanticdb-table "__future__.py"
      :file "__future__.py"
      :fsize 4380
      :lastmodtime '(22387 47074 0 0))
    (semanticdb-table "collections.py"
      :file "collections.py"
      :fsize 26142
      :lastmodtime '(22387 47074 0 0))
    (semanticdb-table "functools.py"
      :major-mode 'python-mode
      :tags nil
      :file "functools.py"
      :pointmax 4479
      :fsize 4478
      :lastmodtime '(22387 47074 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "heapq.py"
      :file "heapq.py"
      :fsize 18296
      :lastmodtime '(22387 47074 0 0))
    (semanticdb-table "numbers.py"
      :file "numbers.py"
      :fsize 10319
      :lastmodtime '(22387 47074 0 0))
    (semanticdb-table "threading.py"
      :file "threading.py"
      :fsize 47330
      :lastmodtime '(22387 47074 0 0))
    (semanticdb-table "traceback.py"
      :file "traceback.py"
      :fsize 11285
      :lastmodtime '(22387 47074 0 0)))
  :file "!usr!lib!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
