;; Object openstack/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "openstack/"
  :tables (list 
   (semanticdb-table "connection.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
The :class:`~openstack.connection.Connection` class is the primary interface
to the Python SDK it maintains a context for a connection to a cloud provider.
The connection has an attribute to access each supported service.  The service
attributes are created dynamically based on user profiles and the service
catalog.

Examples
--------

At a minimum, the :class:`~openstack.connection.Connection` class needs to be
created with an authenticator or the parameters to build one.

Create a connection
~~~~~~~~~~~~~~~~~~~

The following example constructor uses the identity authenticator using
username and password.  The default settings for the transport are used
by this connection.::

    from openstack import connection
    auth_args = {
        'auth_url': 'http://172.20.1.108:5000/v3',
        'project_name': 'admin',
        'username': 'admin',
        'password': 'admin',
    }
    conn = connection.Connection(**auth_args)

List
~~~~

Services are accessed through an attribute named after the service.  A list
of all the projects is retrieved in this manner::

    projects = conn.identity.list_projects()

Find or create
~~~~~~~~~~~~~~
If you wanted to make sure you had a network named 'jenkins', you would first
try to find it and if that fails, you would create it::

    network = conn.network.find_network(\"jenkins\")
    if network is None:
        network = conn.network.create_network({\"name\": \"jenkins\"})

\"\"\"" code nil nil [547 1983])
            ("logging" include nil nil [1984 1998])
            ("sys" include nil nil [1999 2009])
            ("keystoneauth1.loading" include nil nil [2011 2063])
            ("os_client_config" include nil nil [2064 2087])
            ("openstack" include nil nil [2089 2121])
            ("openstack" include nil nil [2122 2163])
            ("openstack" include nil nil [2164 2191])
            ("openstack" include nil nil [2192 2220])
            ("openstack" include nil nil [2221 2262])
            ("openstack" include nil nil [2263 2290])
            ("_logger" variable nil nil [2292 2329])
            ("from_config" function
               (:documentation "Create a Connection using os-client-config

    :param str cloud_name: Use the `cloud_name` configuration details when
                           creating the Connection instance.
    :param cloud_config: An instance of
                         `os_client_config.config.OpenStackConfig`
                         as returned from the os-client-config library.
                         If no `config` is provided,
                         `os_client_config.OpenStackConfig` will be called,
                         and the provided `cloud_name` will be used in
                         determining which cloud's configuration details
                         will be used in creation of the
                         `Connection` instance.
    :param options: A namespace object; allows direct passing in of options to
                    be added to the cloud config. This does not have to be an
                    instance of argparse.Namespace, despite the naming of the
                    the `os_client_config.config.OpenStackConfig.get_one_cloud`
                    argument to which it is passed.

    :rtype: :class:`~openstack.connection.Connection`
    "
                :arguments 
                  ( ("cloud_name" variable nil (reparse-symbol function_parameters) [2348 2358])
                    ("cloud_config" variable nil (reparse-symbol function_parameters) [2365 2377])
                    ("options" variable nil (reparse-symbol function_parameters) [2384 2391]))                  )
                nil [2332 5887])
            ("Connection" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a context for a connection to a cloud provider.

        A connection needs a transport and an authenticator.  The user may pass
        in a transport and authenticator they want to use or they may pass in
        the parameters to create a transport and authenticator.  The connection
        creates a
        :class:`~openstack.session.Session` which uses the profile
        and authenticator to perform HTTP requests.

        :param session: A session object compatible with
            :class:`~openstack.session.Session`.
        :type session: :class:`~openstack.session.Session`
        :param authenticator: An authenticator derived from the base
            authenticator plugin that was previously created.  Two common
            authentication identity plugins are
            :class:`identity_v2 <openstack.auth.identity.v2.Auth>` and
            :class:`identity_v3 <openstack.auth.identity.v3.Auth>`.
            If this parameter is not passed in, the connection will create an
            authenticator.
        :type authenticator: :class:`~openstack.auth.base.BaseAuthPlugin`
        :param profile: If the user has any special profiles such as the
            service name, region, version or interface, they may be provided
            in the profile object.  If no profiles are provided, the
            services that appear first in the service catalog will be used.
        :type profile: :class:`~openstack.profile.Profile`
        :param bool verify: If a transport is not provided to the connection,
            this parameter will be used to create a transport.  If ``verify``
            is set to true, which is the default, the SSL cert will be
            verified.  It can also be set to a CA_BUNDLE path.
        :param cert: If a transport is not provided to the connection then this
            parameter will be used to create a transport. `cert` allows to
            provide a client certificate file path or a tuple with client
            certificate and key paths.
        :type cert: str or tuple
        :param str user_agent: If a transport is not provided to the
            connection, this parameter will be used when creating a transport.
            The value given here will be prepended to the default, which is
            specified in :attr:`~openstack.transport.USER_AGENT`.
            The resulting ``user_agent`` value is used for the ``User-Agent``
            HTTP header.
        :param str auth_plugin: The name of authentication plugin to use.
            The default value is ``password``.
        :param auth_args: The rest of the parameters provided are assumed to be
            authentication arguments that are used by the authentication
            plugin.
        \"\"\"" code nil (reparse-symbol indented_block_body) [6125 8877])
                            ("_profile" code nil (reparse-symbol indented_block_body) [8925 8943])
                            ("if" code nil (reparse-symbol indented_block_body) [8952 10329])
                            ("self" code nil (reparse-symbol indented_block_body) [10338 10350]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5933 5937])
                            ("session" variable nil (reparse-symbol function_parameters) [5939 5946])
                            ("authenticator" variable nil (reparse-symbol function_parameters) [5953 5966])
                            ("profile" variable nil (reparse-symbol function_parameters) [5973 5980])
                            ("verify" variable nil (reparse-symbol function_parameters) [6004 6010])
                            ("cert" variable nil (reparse-symbol function_parameters) [6017 6021])
                            ("user_agent" variable nil (reparse-symbol function_parameters) [6028 6038])
                            ("auth_plugin" variable nil (reparse-symbol function_parameters) [6062 6073])
                            ("auth_args" variable nil (reparse-symbol function_parameters) [6103 6114]))                          
                        :documentation "Create a context for a connection to a cloud provider.

        A connection needs a transport and an authenticator.  The user may pass
        in a transport and authenticator they want to use or they may pass in
        the parameters to create a transport and authenticator.  The connection
        creates a
        :class:`~openstack.session.Session` which uses the profile
        and authenticator to perform HTTP requests.

        :param session: A session object compatible with
            :class:`~openstack.session.Session`.
        :type session: :class:`~openstack.session.Session`
        :param authenticator: An authenticator derived from the base
            authenticator plugin that was previously created.  Two common
            authentication identity plugins are
            :class:`identity_v2 <openstack.auth.identity.v2.Auth>` and
            :class:`identity_v3 <openstack.auth.identity.v3.Auth>`.
            If this parameter is not passed in, the connection will create an
            authenticator.
        :type authenticator: :class:`~openstack.auth.base.BaseAuthPlugin`
        :param profile: If the user has any special profiles such as the
            service name, region, version or interface, they may be provided
            in the profile object.  If no profiles are provided, the
            services that appear first in the service catalog will be used.
        :type profile: :class:`~openstack.profile.Profile`
        :param bool verify: If a transport is not provided to the connection,
            this parameter will be used to create a transport.  If ``verify``
            is set to true, which is the default, the SSL cert will be
            verified.  It can also be set to a CA_BUNDLE path.
        :param cert: If a transport is not provided to the connection then this
            parameter will be used to create a transport. `cert` allows to
            provide a client certificate file path or a tuple with client
            certificate and key paths.
        :type cert: str or tuple
        :param str user_agent: If a transport is not provided to the
            connection, this parameter will be used when creating a transport.
            The value given here will be prepended to the default, which is
            specified in :attr:`~openstack.transport.USER_AGENT`.
            The resulting ``user_agent`` value is used for the ``User-Agent``
            HTTP header.
        :param str auth_plugin: The name of authentication plugin to use.
            The default value is ``password``.
        :param auth_args: The rest of the parameters provided are assumed to be
            authentication arguments that are used by the authentication
            plugin.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5920 10351])
                    ("_create_authenticator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10382 10386])
                            ("authenticator" variable nil (reparse-symbol function_parameters) [10388 10401])
                            ("auth_plugin" variable nil (reparse-symbol function_parameters) [10403 10414])
                            ("args" variable nil (reparse-symbol function_parameters) [10416 10422]))                          )
                        (reparse-symbol indented_block_body) [10356 10866])
                    ("_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10881 10885]))                          
                        :documentation "Open the connection.

        NOTE(thowe): Have this set up some lazy loader instead.
        ")
                        (reparse-symbol indented_block_body) [10871 11081])
                    ("_load" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11096 11100])
                            ("service" variable nil (reparse-symbol function_parameters) [11102 11109]))                          )
                        (reparse-symbol indented_block_body) [11086 11735])
                    ("authorize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11754 11758]))                          
                        :documentation "Authorize this Connection

        **NOTE**: This method is optional. When an application makes a call
                  to any OpenStack service, this method allows you to request
                  a token manually before attempting to do anything else.

        :returns: A string token.

        :raises: :class:`~openstack.exceptions.HttpException` if the
                 authorization fails due to reasons like the credentials
                 provided are unable to be authorized or the `auth_plugin`
                 argument is missing, etc.
        ")
                        (reparse-symbol indented_block_body) [11740 12450]))                  
                :type "class")
                nil [5889 12450]))          
    :file "connection.py"
    :pointmax 12450
    :fsize 12449
    :lastmodtime '(23099 29269 160111 0)
    :unmatched-syntax '((RETURN 12394 . 12400) (IF 12429 . 12431) (ELSE 12440 . 12444) (INDENT_BLOCK 11671 . 11735) (NEWLINE 11670 . 11671) (COLON 11669 . 11670) (TRY 11219 . 11222) (AS 11665 . 11667) (NAME 8886 . 8890) (IF 8909 . 8911) (ELSE 8920 . 8924) (NAME 5798 . 5802) (IF 5825 . 5827) (ELSE 5832 . 5836) (NAME 5798 . 5802) (IF 5825 . 5827) (ELSE 5832 . 5836))
    )
   (semanticdb-table "session.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
The :class:`~openstack.session.Session` overrides
:class:`~keystoneauth1.session.Session` to provide end point filtering and
mapping KSA exceptions to SDK exceptions.

\"\"\"" code nil nil [547 722])
            ("collections" include nil nil [723 757])
            ("logging" include nil nil [758 772])
            ("try" code nil nil [774 1610])
            ("keystoneauth1" include nil nil [1611 1662])
            ("keystoneauth1" include nil nil [1663 1708])
            ("openstack" include nil nil [1710 1742])
            ("openstack" include nil nil [1743 1770])
            ("openstack" include nil nil [1771 1821])
            ("six.moves.urllib" include nil nil [1823 1857])
            ("DEFAULT_USER_AGENT" code nil nil [1859 1929])
            ("API_REQUEST_HEADER" variable nil nil [1930 1974])
            ("Version" variable nil nil [1976 2027])
            ("_logger" variable nil nil [2029 2066])
            ("map_exceptions" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [2088 2092]))              ) nil [2069 2442])
            ("Session" type
               (:superclasses ("_session.Session")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a new Keystone auth session with a profile.

        :param profile: If the user has any special profiles such as the
            service name, region, version or interface, they may be provided
            in the profile object.  If no profiles are provided, the
            services that appear first in the service catalog will be used.
        :param user_agent: A User-Agent header string to use for the
                           request. If not provided, a default of
                           :attr:`~openstack.session.DEFAULT_USER_AGENT`
                           is used, which contains the openstacksdk version
                           When a non-None value is passed, it will be
                           prepended to the default.
        :type profile: :class:`~openstack.profile.Profile`
        \"\"\"" code nil (reparse-symbol indented_block_body) [2546 3374])
                            ("if" code nil (reparse-symbol indented_block_body) [3383 3546])
                            ("self" variable nil (reparse-symbol indented_block_body) [3555 3577])
                            ("api_version_header" variable nil (reparse-symbol indented_block_body) [3586 3631])
                            ("self" variable nil (reparse-symbol indented_block_body) [3640 3664])
                            ("super" code nil (reparse-symbol indented_block_body) [3674 3856]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2495 2499])
                            ("profile" variable nil (reparse-symbol function_parameters) [2501 2508])
                            ("user_agent" variable nil (reparse-symbol function_parameters) [2510 2520])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2527 2535]))                          
                        :documentation "Create a new Keystone auth session with a profile.

        :param profile: If the user has any special profiles such as the
            service name, region, version or interface, they may be provided
            in the profile object.  If no profiles are provided, the
            services that appear first in the service catalog will be used.
        :param user_agent: A User-Agent header string to use for the
                           request. If not provided, a default of
                           :attr:`~openstack.session.DEFAULT_USER_AGENT`
                           is used, which contains the openstacksdk version
                           When a non-None value is passed, it will be
                           prepended to the default.
        :type profile: :class:`~openstack.profile.Profile`
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2482 3857])
                    ("_get_api_requests" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3884 3888]))                          
                        :documentation "Get API micro-version requests.

        :param profile: A profile object that contains customizations about
                        service name, region, version, interface or
                        api_version.
        :return: A standard header string if there is any specialization in
                 API microversion, or None if no such request exists.
        ")
                        (reparse-symbol indented_block_body) [3862 4616])
                    ("_Endpoint" type
                       (:superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [4764 4778])
                                    ("self" variable nil (reparse-symbol indented_block_body) [4791 4815])
                                    ("self" variable nil (reparse-symbol indented_block_body) [4828 4868])
                                    ("self" variable nil (reparse-symbol indented_block_body) [4881 4909]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [4668 4672])
                                    ("uri" variable nil (reparse-symbol function_parameters) [4674 4677])
                                    ("versions" variable nil (reparse-symbol function_parameters) [4679 4687])
                                    ("needs_project_id" variable nil (reparse-symbol function_parameters) [4710 4726])
                                    ("project_id" variable nil (reparse-symbol function_parameters) [4734 4744]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [4655 4910])
                            ("__eq__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [4930 4934])
                                    ("other" variable nil (reparse-symbol function_parameters) [4936 4941]))                                  )
                                (reparse-symbol indented_block_body) [4919 5183]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [4621 5183])
                    ("_parse_versions_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5217 5221])
                            ("uri" variable nil (reparse-symbol function_parameters) [5223 5226]))                          
                        :documentation "Look for a \"versions\" JSON response at `uri`

        Return versions if we get them, otherwise return None.
        ")
                        (reparse-symbol indented_block_body) [5188 6249])
                    ("_get_endpoint_versions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6281 6285])
                            ("service_type" variable nil (reparse-symbol function_parameters) [6287 6299])
                            ("endpoint" variable nil (reparse-symbol function_parameters) [6301 6309]))                          
                        :documentation "Get available endpoints from the remote service

        Take the endpoint that the Service Catalog gives us as a base
        and then work from there. In most cases, the path-less 'root'
        of the URI is the base of the service which contains the versions.
        In other cases, we need to discover it by trying the paths that
        eminate from that root. Generally this is achieved in one roundtrip
        request/response, but depending on how the service is installed,
        it may require multiple requests.
        ")
                        (reparse-symbol indented_block_body) [6254 9103])
                    ("_parse_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9127 9131])
                            ("version" variable nil (reparse-symbol function_parameters) [9133 9140]))                          
                        :documentation "Parse the version and return major and minor components

        If the version was given with a leading \"v\", e.g., \"v3\", strip
        that off to just numerals.
        ")
                        (reparse-symbol indented_block_body) [9108 9932])
                    ("_get_version_match" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9960 9964])
                            ("endpoint" variable nil (reparse-symbol function_parameters) [9966 9974])
                            ("profile_version" variable nil (reparse-symbol function_parameters) [9976 9991])
                            ("service_type" variable nil (reparse-symbol function_parameters) [9993 10005]))                          
                        :documentation "Return the best matching version

        Look through each version trying to find the best match for
        the version specified in this profile.
         * The best match will only ever be found within the same
           major version, meaning a v2 profile will never match if
           only v3 is available on the server.
         * The search for the best match is fuzzy if needed.
           * If the profile specifies v2 and the server has
             v2.0, v2.1, and v2.2, the match will be v2.2.
           * When an exact major/minor is specified, e.g., v2.0,
             it will only match v2.0.
        ")
                        (reparse-symbol indented_block_body) [9937 11938])
                    ("get_endpoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11960 11964])
                            ("auth" variable nil (reparse-symbol function_parameters) [11966 11970])
                            ("interface" variable nil (reparse-symbol function_parameters) [11977 11986])
                            ("service_type" variable nil (reparse-symbol function_parameters) [11993 12005])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [12033 12041]))                          
                        :documentation "Override get endpoint to automate endpoint filtering

        This method uses the service catalog to find the root URI of
        each service and then gets all available versions directly
        from the service, not from the service catalog.

        Endpoints are cached per service type and interface combination
        so that they're only requested from the remote service once
        per instance of this class.
        ")
                        (reparse-symbol indented_block_body) [11943 13895])
                    ("request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13932 13936])
                            ("args" variable nil (reparse-symbol function_parameters) [13938 13943])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [13945 13953]))                          
                        :decorators 
                          ( ("map_exceptions" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13900 14017]))                  
                :type "class")
                nil [2444 14017]))          
    :file "session.py"
    :pointmax 14017
    :fsize 14016
    :lastmodtime '(23099 29269 162111 0)
    :unmatched-syntax '((NAME 7300 . 7319) (IF 7350 . 7352) (ELSE 7364 . 7368) (INDENT_BLOCK 2337 . 2407) (NEWLINE 2336 . 2337) (COLON 2335 . 2336) (AS 2331 . 2333) (EXCEPT 2296 . 2302) (INDENT_BLOCK 2241 . 2288) (NEWLINE 2240 . 2241) (COLON 2239 . 2240) (TRY 2152 . 2155) (AS 2235 . 2237) (INDENT_BLOCK 2337 . 2407) (NEWLINE 2336 . 2337) (COLON 2335 . 2336) (AS 2331 . 2333) (EXCEPT 2296 . 2302) (INDENT_BLOCK 2241 . 2288) (NEWLINE 2240 . 2241) (COLON 2239 . 2240) (TRY 2152 . 2155) (AS 2235 . 2237) (INDENT_BLOCK 2337 . 2407) (NEWLINE 2336 . 2337) (COLON 2335 . 2336) (AS 2331 . 2333) (EXCEPT 2296 . 2302) (INDENT_BLOCK 2241 . 2288) (NEWLINE 2240 . 2241) (COLON 2239 . 2240) (TRY 2152 . 2155) (AS 2235 . 2237) (INDENT_BLOCK 2337 . 2407) (NEWLINE 2336 . 2337) (COLON 2335 . 2336) (AS 2331 . 2333) (EXCEPT 2296 . 2302) (INDENT_BLOCK 2241 . 2288) (NEWLINE 2240 . 2241) (COLON 2239 . 2240) (TRY 2152 . 2155) (AS 2235 . 2237) (INDENT_BLOCK 2337 . 2407) (NEWLINE 2336 . 2337) (COLON 2335 . 2336) (AS 2331 . 2333) (EXCEPT 2296 . 2302) (INDENT_BLOCK 2241 . 2288) (NEWLINE 2240 . 2241) (COLON 2239 . 2240) (TRY 2152 . 2155) (AS 2235 . 2237) (INDENT_BLOCK 2337 . 2407) (NEWLINE 2336 . 2337) (COLON 2335 . 2336) (AS 2331 . 2333) (EXCEPT 2296 . 2302) (INDENT_BLOCK 2241 . 2288) (NEWLINE 2240 . 2241) (COLON 2239 . 2240) (TRY 2152 . 2155) (AS 2235 . 2237) (INDENT_BLOCK 2337 . 2407) (NEWLINE 2336 . 2337) (COLON 2335 . 2336) (AS 2331 . 2333) (EXCEPT 2296 . 2302) (INDENT_BLOCK 2241 . 2288) (NEWLINE 2240 . 2241) (COLON 2239 . 2240) (TRY 2152 . 2155) (AS 2235 . 2237) (INDENT_BLOCK 2337 . 2407) (NEWLINE 2336 . 2337) (COLON 2335 . 2336) (AS 2331 . 2333) (EXCEPT 2296 . 2302) (INDENT_BLOCK 2241 . 2288) (NEWLINE 2240 . 2241) (COLON 2239 . 2240) (TRY 2152 . 2155) (AS 2235 . 2237) (INDENT_BLOCK 2337 . 2407) (NEWLINE 2336 . 2337) (COLON 2335 . 2336) (AS 2331 . 2333) (EXCEPT 2296 . 2302) (INDENT_BLOCK 2241 . 2288) (NEWLINE 2240 . 2241) (COLON 2239 . 2240) (TRY 2152 . 2155) (AS 2235 . 2237))
    )
   (semanticdb-table "profile.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
:class:`~openstack.profile.Profile` is the class that is used to
define the various preferences for different services.  The preferences that
are currently supported are service name, region, version and interface.
The :class:`~openstack.profile.Profile` and the
:class:`~openstack.connection.Connection` classes are the most important
user facing classes.

Examples
--------

The :class:`~openstack.profile.Profile` class is constructed
with no arguments.

Set Methods
~~~~~~~~~~~

A user's preferences are set based on the service type.  Service type would
normally be something like 'compute', 'identity', 'object-store', etc.::

    from openstack import profile
    prof = profile.Profile()
    prof.set_name('compute', 'matrix')
    prof.set_region(prof.ALL, 'zion')
    prof.set_version('identity', 'v3')
    prof.set_interface('object-store', 'internal')
    for service in prof.get_services():
        print(prof.get_filter(service.service_type)

The resulting preference print out would look something like::

    service_type=compute,region=zion,service_name=matrix
    service_type=network,region=zion
    service_type=database,region=zion
    service_type=image,region=zion
    service_type=metering,region=zion
    service_type=orchestration,region=zion
    service_type=object-store,interface=internal,region=zion
    service_type=identity,region=zion,version=v3
\"\"\"" code nil nil [547 1932])
            ("copy" include nil nil [1934 1945])
            ("logging" include nil nil [1946 1960])
            ("openstack.bare_metal" include nil nil [1962 2013])
            ("openstack.block_store" include nil nil [2014 2067])
            ("openstack.cluster" include nil nil [2068 2113])
            ("openstack.compute" include nil nil [2114 2159])
            ("openstack.database" include nil nil [2160 2207])
            ("openstack" include nil nil [2208 2240])
            ("openstack.identity" include nil nil [2241 2288])
            ("openstack.image" include nil nil [2289 2330])
            ("openstack.key_manager" include nil nil [2331 2384])
            ("openstack.load_balancer" include nil nil [2385 2456])
            ("openstack.message" include nil nil [2457 2502])
            ("openstack" include nil nil [2503 2538])
            ("openstack.network" include nil nil [2539 2584])
            ("openstack.object_store" include nil nil [2585 2640])
            ("openstack.orchestration" include nil nil [2641 2698])
            ("openstack.telemetry.alarm" include nil nil [2699 2750])
            ("openstack.telemetry" include nil nil [2751 2800])
            ("openstack.workflow" include nil nil [2801 2848])
            ("_logger" variable nil nil [2850 2887])
            ("Profile" type
               (:superclasses ("object")
                :members 
                  ( ("ALL" variable nil (reparse-symbol indented_block_body) [2918 2927])
                    ("\"\"\"Wildcard service identifier representing all services.\"\"\"" code nil (reparse-symbol indented_block_body) [2932 2992])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"User preference for each service.

        :param plugins: List of entry point namespaces to load.

        Create a new :class:`~openstack.profile.Profile`
        object with no preferences defined, but knowledge of the services.
        Services are identified by their service type, e.g.: 'identity',
        'compute', etc.
        \"\"\"" code nil (reparse-symbol indented_block_body) [3040 3383])
                            ("self" variable nil (reparse-symbol indented_block_body) [3392 3411])
                            ("self" code nil (reparse-symbol indented_block_body) [3421 3480])
                            ("self" code nil (reparse-symbol indented_block_body) [3489 3557])
                            ("self" code nil (reparse-symbol indented_block_body) [3566 3636])
                            ("self" code nil (reparse-symbol indented_block_body) [3645 3708])
                            ("self" code nil (reparse-symbol indented_block_body) [3717 3780])
                            ("self" code nil (reparse-symbol indented_block_body) [3789 3854])
                            ("self" code nil (reparse-symbol indented_block_body) [3863 3928])
                            ("self" code nil (reparse-symbol indented_block_body) [3937 3996])
                            ("self" code nil (reparse-symbol indented_block_body) [4005 4075])
                            ("self" code nil (reparse-symbol indented_block_body) [4084 4147])
                            ("self" code nil (reparse-symbol indented_block_body) [4156 4219])
                            ("self" code nil (reparse-symbol indented_block_body) [4228 4291])
                            ("self" code nil (reparse-symbol indented_block_body) [4300 4385])
                            ("self" code nil (reparse-symbol indented_block_body) [4394 4482])
                            ("self" code nil (reparse-symbol indented_block_body) [4491 4558])
                            ("self" code nil (reparse-symbol indented_block_body) [4567 4632])
                            ("if" code nil (reparse-symbol indented_block_body) [4642 4731])
                            ("self" variable nil (reparse-symbol indented_block_body) [4739 4788]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3011 3015])
                            ("plugins" variable nil (reparse-symbol function_parameters) [3017 3024]))                          
                        :documentation "User preference for each service.

        :param plugins: List of entry point namespaces to load.

        Create a new :class:`~openstack.profile.Profile`
        object with no preferences defined, but knowledge of the services.
        Services are identified by their service type, e.g.: 'identity',
        'compute', etc.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2998 4789])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4807 4811]))                          )
                        (reparse-symbol indented_block_body) [4794 4850])
                    ("_add_service" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4872 4876])
                            ("serv" variable nil (reparse-symbol function_parameters) [4878 4882]))                          )
                        (reparse-symbol indented_block_body) [4855 4964])
                    ("_load_plugin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4986 4990])
                            ("namespace" variable nil (reparse-symbol function_parameters) [4992 5001]))                          
                        :documentation "Load a service plugin.

        :param str namespace: Entry point namespace
        ")
                        (reparse-symbol indented_block_body) [4969 5430])
                    ("get_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5450 5454])
                            ("service" variable nil (reparse-symbol function_parameters) [5456 5463]))                          
                        :documentation "Get a service preference.

        :param str service: Desired service type.
        ")
                        (reparse-symbol indented_block_body) [5435 5618])
                    ("_get_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5639 5643])
                            ("service" variable nil (reparse-symbol function_parameters) [5645 5652]))                          
                        :documentation "Get a service preference.

        :param str service: Desired service type.
        ")
                        (reparse-symbol indented_block_body) [5623 6009])
                    ("_get_services" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6032 6036])
                            ("service" variable nil (reparse-symbol function_parameters) [6038 6045]))                          )
                        (reparse-symbol indented_block_body) [6014 6119])
                    ("_setter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6136 6140])
                            ("service" variable nil (reparse-symbol function_parameters) [6142 6149])
                            ("attr" variable nil (reparse-symbol function_parameters) [6151 6155])
                            ("value" variable nil (reparse-symbol function_parameters) [6157 6162]))                          )
                        (reparse-symbol indented_block_body) [6124 6277])
                    ("get_services" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6299 6303]))                          
                        :documentation "Get a list of all the known services.")
                        (reparse-symbol indented_block_body) [6282 6494])
                    ("set_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6512 6516])
                            ("service" variable nil (reparse-symbol function_parameters) [6518 6525])
                            ("name" variable nil (reparse-symbol function_parameters) [6527 6531]))                          
                        :documentation "Set the desired name for the specified service.

        :param str service: Service type.
        :param str name: Desired service name.
        ")
                        (reparse-symbol indented_block_body) [6499 6747])
                    ("set_region" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6767 6771])
                            ("service" variable nil (reparse-symbol function_parameters) [6773 6780])
                            ("region" variable nil (reparse-symbol function_parameters) [6782 6788]))                          
                        :documentation "Set the desired region for the specified service.

        :param str service: Service type.
        :param str region: Desired service region.
        ")
                        (reparse-symbol indented_block_body) [6752 7006])
                    ("set_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7027 7031])
                            ("service" variable nil (reparse-symbol function_parameters) [7033 7040])
                            ("version" variable nil (reparse-symbol function_parameters) [7042 7049]))                          
                        :documentation "Set the desired version for the specified service.

        :param str service: Service type.
        :param str version: Desired service version.
        ")
                        (reparse-symbol indented_block_body) [7011 7274])
                    ("set_api_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7299 7303])
                            ("service" variable nil (reparse-symbol function_parameters) [7305 7312])
                            ("api_version" variable nil (reparse-symbol function_parameters) [7314 7325]))                          
                        :documentation "Set the desired API micro-version for the specified service.

        :param str service: Service type.
        :param str api_version: Desired service API micro-version.
        ")
                        (reparse-symbol indented_block_body) [7279 7580])
                    ("set_interface" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7603 7607])
                            ("service" variable nil (reparse-symbol function_parameters) [7609 7616])
                            ("interface" variable nil (reparse-symbol function_parameters) [7618 7627]))                          
                        :documentation "Set the desired interface for the specified service.

        :param str service: Service type.
        :param str interface: Desired service interface.
        ")
                        (reparse-symbol indented_block_body) [7585 7860]))                  
                :type "class")
                nil [2890 7860]))          
    :file "profile.py"
    :pointmax 7860
    :fsize 7859
    :lastmodtime '(23099 29269 161111 0)
    :unmatched-syntax '((RETURN 6056 . 6062) (IF 6081 . 6083) (ELSE 6104 . 6108))
    )
   (semanticdb-table "service_filter.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
The :class:`~openstack.service_filter.ServiceFilter` is the base class
for service identifiers and user service preferences.  Each
:class:`~openstack.resource.Resource` has a service identifier to
associate the resource with a service.  An example of a service identifier
would be ``openstack.compute.compute_service.ComputeService``.
The preferences are stored in the
:class:`~openstack.profile.Profile` object.
The service preference and the service identifier are joined to create a
filter to match a service.

Examples
--------

The :class:`~openstack.service_filter.ServiceFilter` class can be built
with a service type, interface, region, name, and version.

Create a service filter
~~~~~~~~~~~~~~~~~~~~~~~

Create a compute service and service preference. Join the services
and match::

    from openstack import service_filter
    from openstack.compute import compute_service
    default = compute_service.ComputeService()
    preference = service_filter.ServiceFilter('compute', version='v2')
    result = preference.join(default)
    matches = (result.match_service_type('compute') and
               result.match_service_name('Hal9000') and
               result.match_region('DiscoveryOne') and
               result.match_interface('public'))
    print(str(result))
    print(\"matches=\" + str(matches))

The resulting output from the code::

    service_type=compute,interface=public,version=v2
    matches=True
\"\"\"" code nil nil [547 1980])
            ("ValidVersion" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"\" Valid service version.

        :param string module: Module associated with version.
        :param string path: URL path version.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2063 2211])
                            ("self" variable nil (reparse-symbol indented_block_body) [2220 2240])
                            ("self" code nil (reparse-symbol indented_block_body) [2249 2275]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2029 2033])
                            ("module" variable nil (reparse-symbol function_parameters) [2035 2041])
                            ("path" variable nil (reparse-symbol function_parameters) [2043 2047]))                          
                        :documentation "\" Valid service version.

        :param string module: Module associated with version.
        :param string path: URL path version.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2016 2276]))                  
                :type "class")
                nil [1983 2276])
            ("ServiceFilter" type
               (:superclasses ("dict")
                :members 
                  ( ("UNVERSIONED" variable nil (reparse-symbol indented_block_body) [2309 2325])
                    ("PUBLIC" variable nil (reparse-symbol indented_block_body) [2330 2347])
                    ("INTERNAL" variable nil (reparse-symbol indented_block_body) [2352 2373])
                    ("ADMIN" variable nil (reparse-symbol indented_block_body) [2378 2393])
                    ("valid_versions" variable nil (reparse-symbol indented_block_body) [2398 2417])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a service identifier.

        :param string service_type: The desired type of service.
        :param string interface: The exposure of the endpoint. Should be
                                  `public` (default), `internal` or `admin`.
        :param string region: The desired region (optional).
        :param string service_name: Name of the service
        :param string version: Version of service to use.
        :param string api_version: Microversion of service supported.
        :param bool requires_project_id: True if this service's endpoint
                                         expects project id to be included.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2608 3261])
                            ("self" variable nil (reparse-symbol indented_block_body) [3270 3313])
                            ("self" variable nil (reparse-symbol indented_block_body) [3322 3351])
                            ("self" variable nil (reparse-symbol indented_block_body) [3360 3388])
                            ("self" variable nil (reparse-symbol indented_block_body) [3397 3432])
                            ("self" variable nil (reparse-symbol indented_block_body) [3441 3466])
                            ("self" variable nil (reparse-symbol indented_block_body) [3475 3508])
                            ("self" variable nil (reparse-symbol indented_block_body) [3517 3566]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2436 2440])
                            ("service_type" variable nil (reparse-symbol function_parameters) [2442 2454])
                            ("interface" variable nil (reparse-symbol function_parameters) [2456 2465])
                            ("region" variable nil (reparse-symbol function_parameters) [2474 2480])
                            ("service_name" variable nil (reparse-symbol function_parameters) [2504 2516])
                            ("version" variable nil (reparse-symbol function_parameters) [2523 2530])
                            ("api_version" variable nil (reparse-symbol function_parameters) [2537 2548])
                            ("requires_project_id" variable nil (reparse-symbol function_parameters) [2572 2591]))                          
                        :documentation "Create a service identifier.

        :param string service_type: The desired type of service.
        :param string interface: The exposure of the endpoint. Should be
                                  `public` (default), `internal` or `admin`.
        :param string region: The desired region (optional).
        :param string service_name: Name of the service
        :param string version: Version of service to use.
        :param string api_version: Microversion of service supported.
        :param bool requires_project_id: True if this service's endpoint
                                         expects project id to be included.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2423 3567])
                    ("service_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3603 3607]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3572 3646])
                    ("interface" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3679 3683]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3651 3719])
                    ("interface" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3760 3764])
                            ("value" variable nil (reparse-symbol function_parameters) [3766 3771]))                          
                        :decorators 
                          ( ("interface.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3724 3808])
                    ("region" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3838 3842]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3813 3880])
                    ("region" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3915 3919])
                            ("value" variable nil (reparse-symbol function_parameters) [3921 3926]))                          
                        :decorators 
                          ( ("region.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3885 3965])
                    ("service_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4001 4005]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3970 4044])
                    ("service_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4091 4095])
                            ("value" variable nil (reparse-symbol function_parameters) [4097 4102]))                          
                        :decorators 
                          ( ("service_name.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4049 4142])
                    ("version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4173 4177]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4147 4211])
                    ("version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4248 4252])
                            ("value" variable nil (reparse-symbol function_parameters) [4254 4259]))                          
                        :decorators 
                          ( ("version.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4216 4294])
                    ("api_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4329 4333]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4299 4371])
                    ("api_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4416 4420])
                            ("value" variable nil (reparse-symbol function_parameters) [4422 4427]))                          
                        :decorators 
                          ( ("api_version.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4376 4466])
                    ("requires_project_id" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4509 4513]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4471 4559])
                    ("requires_project_id" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4620 4624])
                            ("value" variable nil (reparse-symbol function_parameters) [4626 4631]))                          
                        :decorators 
                          ( ("requires_project_id.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4564 4678])
                    ("path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4706 4710]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4683 4741])
                    ("path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4772 4776])
                            ("value" variable nil (reparse-symbol function_parameters) [4778 4783]))                          
                        :decorators 
                          ( ("path.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4746 4815])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4833 4837])
                            ("version" variable nil (reparse-symbol function_parameters) [4839 4846]))                          )
                        (reparse-symbol indented_block_body) [4820 4982])
                    ("get_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5002 5006]))                          )
                        (reparse-symbol indented_block_body) [4987 5089])
                    ("_get_valid_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5117 5121]))                          )
                        (reparse-symbol indented_block_body) [5094 5484])
                    ("get_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5504 5508]))                          
                        :documentation "Get the full module name associated with the service.")
                        (reparse-symbol indented_block_body) [5489 5759])
                    ("get_service_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5787 5791]))                          
                        :documentation "Get the module version of the service name.

        This would often be the same as the service type except in cases like
        object store where the service type is `object-store` and the module
        is `object_store`.
        ")
                        (reparse-symbol indented_block_body) [5764 6100]))                  
                :type "class")
                nil [2278 6100]))          
    :file "service_filter.py"
    :pointmax 6100
    :fsize 6099
    :lastmodtime '(23099 29269 162111 0)
    :unmatched-syntax 'nil
    )
   )
  :file "!usr!lib!python2.7!site-packages!openstack!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
